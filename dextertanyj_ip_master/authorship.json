[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "# nekochan.NekoChan project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/nekochan.NekoChan.java` file, right-click it, and choose `Run nekochan.NekoChan.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    archiveBaseName \u003d \"ip\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 17,
      "-": 43
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "##### Like cats? Like anime? Need someone to help you manage your busy life?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "##### Neko-chan is the perfect companion for you."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "- [Add Tasks - Todos, Deadlines \u0026 Events](#add-tasks)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "- [Delete Tasks](#delete-tasks)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "- [View Tasks](#view-tasks)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "- [Mark Task As Completed](#mark-task-as-completed)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "- [Search](#search)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "- [Undo/Redo](#undoredo)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Add Tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan can help you to manage 3 different types of tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Todos"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Events"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "#### Todos"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Todos are the most basic form of tasks with only a description and a completion status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `todo [description]`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `todo Pack school bag` - Creates a todo called Pack school bag."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Hai hai~ Neko-chan has added this task:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[T][✘] Pack school bag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan now knows 1 thing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "#### Deadlines"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Deadlines are tasks with a due date in addition to the basic properties."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `deadline [description] by [due date]` "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "_View the section on date and time formats for more info on accepted date and time formats._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `deadline Submit homework by 1 Jun 2020`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Hai hai~ Neko-chan has added this task:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[D][✘] Submit homework (by: 1 Jun 2020)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan now knows 2 things."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "#### Events"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Events are tasks with a starting and ending date in addition to the basic properties."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `event [description] from [start date] to [end date]` "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "or `event [description] from [start date] for [duration]` "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "or `event [description] from [start date] for all day`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `event Lunch with friends from 23 Jun 2020 12:00 to 23 Jun 2020 13:00` - Creates an event called "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Lunch with friends that starts on 23 Jun 2020 at 12pm to 1pm."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Hai hai~ Neko-chan has added this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[E][✘] Lunch with friends (from 23 Jun 2020 12:00 to 23 Jun 2020 13:00)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan now knows 3 things."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `event Neko-chan meet and greet from 23 Jun 2020 18:00 for 1h` - Creates an event called "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan meet and greet that starts on 23 Jun 2020 at 12pm and lasts for 1 hour."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "_View the section on duration formats for more info on accepted duration formats._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Hai hai~ Neko-chan has added this task:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[E][✘] Neko-chan meet and greet (from 23 Jun 2020 18:00 to 23 Jun 2020 19:00)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan now knows 4 things."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `event Visit USS from 10 Jun 2020 for all day` - Creates an event called "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Visit USS that occurs on 23 Jun 2020 and is an all day event."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Hai hai~ Neko-chan has added this task:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[E][✘] Visit USS (on 10 Jun 2020 for all day)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan now knows 5 things."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Delete Tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan can help you to delete one or all of your tasks if the list is getting too long."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `delete [task number]` or `delete all`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `delete 3` - Deletes your third task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Hai! Neko-chan has removed this task:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[E][✘] Lunch with friends (from 23 Jun 2020 12:00 to 23 Jun 2020 13:00)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan now knows 4 things."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `delete all` - Deletes all your tasks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan has cleared all your tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "You sure are efficient!"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### View Tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan can help you view all your tasks at once. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `list`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `list` - Lists all your tasks."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Here\u0027s everything Neko-chan knows:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "1. [T][✘] Pack school bag"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "2. [D][✘] Submit homework (by: 1 Jun 2020)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "3. [E][✘] Lunch with friends (from 23 Jun 2020 12:00 to 23 Jun 2020 13:00)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "4. [E][✘] Neko-chan meet and greet (from 23 Jun 2020 18:00 to 23 Jun 2020 19:00)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "5. [E][✘] Visit USS (on 10 Jun 2020 for all day)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Mark Task As Completed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan can help you keep track of which tasks you have completed or not."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `complete [task number]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `complete 1` - Marks the first task in your list as complete."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Yay! Neko-chan has marked this task as complete:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[T][✘] Pack school bag"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Search"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Need to find a task by a particular keyword or date? Neko-chan can help you with that as well!"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `search [keyword]` or `search [date]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `search homework` - Searches for tasks in your list with the word homework."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Here\u0027s everything Neko-chan found:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[D][✘] Submit homework (by: 1 Jun 2020)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `search 23 Jun 2020` - Searches for deadlines or events that occur on 1 Jun 2020."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Here\u0027s everything Neko-chan found:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[E][✘] Lunch with friends (from 23 Jun 2020 12:00 to 23 Jun 2020 13:00)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[E][✘] Neko-chan meet and greet (from 23 Jun 2020 18:00 to 23 Jun 2020 19:00)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Undo/Redo"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Neko-chan can help you to undo or redo your actions if you find yourself making a mistake."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "How to use: `undo` or `redo`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `undo` - Undoes the previous action"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "You\u0027re lucky Neko-chan can reverse the time."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Example: `redo` - Redoes the most recently undone action"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "So this is how the future looks like..."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "## Accepted Date \u0026 Time Formats"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `DD MMM YYYY` (E.g 1 Sep 2020)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `D/M/YYYY` (E.g 1/9/2020)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `D-M-YYYY` (E.g 1-9-2020)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `D MMM YYYY HH:mm` (E.g 1 Sep 2020 13:00)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `D/M/YYYY HH:mm` (E.g 1/9/2020 13:00)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `D-M-YYYY HH:mm` (E.g 1-9-2020 13:00)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "## Accepted Duration Formats"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `X Days Y Hours Z Minutes` (E.g 1 Days 2 Hours 1 Minutes)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `Xd Yh Zm` (E.g 1d 2h 1m)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `Xday Yhr Xmin` (E.g. 1day 2hr 1min)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "_Where X is the number of days, Y is the number of hours and Z is the number of minutes. All values are optional, i.e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "you may omit the number of days, hours or minutes, and they are assumed to be 0._"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "## Advanced Features"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Command Line Mode"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "If for any reason, you prefer to use Neko-chan in the command line environment, you can do so by executing the following"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "`java -jar Neko.jar -mode cli`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "_Neko-chan might be a little sad you don\u0027t want to see her though._"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 187,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.CliWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String FLAG_MODE \u003d \"-mode\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String FLAG_GUI \u003d \"gui\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String FLAG_CLI \u003d \"cli\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Entry point for the chat bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Execute the jar file with \"-mode cli\" as arguments to access command line interface."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Otherwise, defaults to graphical user interface."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Adapted from https://stackoverflow.com/a/1254338"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cString\u003e arguments \u003d Arrays.asList(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int modeIndex \u003d arguments.indexOf(FLAG_MODE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String mode \u003d modeIndex \u003d\u003d -1 ? FLAG_GUI : arguments.get(modeIndex + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (mode.equals(FLAG_GUI)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else if (mode.equals(FLAG_CLI)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] defaultArgs \u003d {};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            CliWrapper.main(defaultArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 33
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A GUI for NekoChan using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String STAGE_TITLE \u003d \"Neko-chan\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            stage.setTitle(STAGE_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().start();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 32
    }
  },
  {
    "path": "src/main/java/nekochan/CliWrapper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.Response;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.ui.Clui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CliWrapper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private NekoChan nekoChan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Clui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private CliWrapper(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ui \u003d new Clui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            nekoChan \u003d new NekoChan(filePath, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoStorageException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            nekoChan \u003d new NekoChan(filePath, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Response response \u003d nekoChan.getResponse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                assert response.getResponseMessage().length() \u003e 0 : \"response message should not be empty\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.print(response.getResponseMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                isExit \u003d response.shouldExit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (IncompleteNekoCommandException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.print(\"Something went wrong, but I\u0027m not sure what...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (NekoException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.print(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        new CliWrapper(Storage.FILE_PATH).run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 48
    }
  },
  {
    "path": "src/main/java/nekochan/Encodable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface Encodable\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String encode();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/nekochan/NekoChan.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.Response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code NekoChan} class controls the logic of the chat bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoChan {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private NekoHistory history;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an instance of the chat bot logic."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Uses the default save location."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param useSave true if the local save file at the default save location should be loaded."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoChan(boolean useSave) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this(Storage.FILE_PATH, useSave);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an instance of the chat bot logic."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param filePath the file path to store the local save file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param useSave true if the local save file should be loaded."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if the file at the specified {@code filePath} could not be loaded."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoChan(String filePath, boolean useSave) throws NekoStorageException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TaskList taskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (useSave) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history \u003d new NekoHistory(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the appropriate {@link Response} for the specified input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the user input to process."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the response from the chat bot."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        c.execute(history, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return c.getResponse();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 59
    }
  },
  {
    "path": "src/main/java/nekochan/Searchable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface Searchable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean match(String searchParameter);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/nekochan/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoSimilarTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code CompleteCommand} class represents a command to create a new {@link Task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task createdTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int remainingTaskCount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e similarTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an {@code AddCommand} with the specified type and specified task details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param type           the type of {@code Task} to be added."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param taskDetail     the details of the task to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoException if the specified type is null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AddCommand(TaskType type, String taskDetail) throws NekoException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d Deadline.createTask(taskDetail);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d Event.createTask(taskDetail);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d ToDo.createTask(taskDetail);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoException(Messages.INVALID_TASK_TYPE_ERROR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code AddCommand} by adding the created {@code Task} to the specified {@code list}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            history.addTask(createdTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoSimilarTaskException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            similarTasks \u003d e.getSimilarTask();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            remainingTaskCount \u003d history.getCurrentTaskCount();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            history.save(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code AddCommand}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code AddCommand}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code AddCommand} was not executed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_ADD_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert createdTask !\u003d null : \"created task should not be null\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_ADD + createdTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + Messages.getTotalTaskMessage(remainingTaskCount);;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (similarTasks !\u003d null \u0026\u0026 !similarTasks.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            responseMessage +\u003d \"\\n\" + Messages.SIMILAR_TASK_ERROR"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    + similarTasks.stream().map(Task::toString).reduce(\"\", (str1, str2) -\u003e str1 + str2 + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 91
    }
  },
  {
    "path": "src/main/java/nekochan/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Command} class provides a skeletal implementation of an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected boolean isCompleted \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes the command with the supplied {@code list} and {@code storage}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract void execute(NekoHistory history, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} after this {@code Command} has been executed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code Command}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoException if this {@code Command} has not been executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract Response getResponse() throws NekoException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 28
    }
  },
  {
    "path": "src/main/java/nekochan/command/CompleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code CompleteCommand} class represents a command to mark a {@link Task} in a {@link TaskList} as complete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task completedTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code CompleteCommand} with the specified {@code index}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CompleteCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code CompleteCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks the {@code Task} in the specified {@code list} at the stored {@code index} as complete."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completedTask \u003d history.markAsComplete(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.save(storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code CompleteCommand}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return @return a {@code Response} object containing the result of executing this {@code CompleteCommand}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code CompleteCommand} was not executed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_COMPLETE_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert completedTask !\u003d null : \"completed task should not be null\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_COMPLETE + completedTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 59
    }
  },
  {
    "path": "src/main/java/nekochan/command/DeleteAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteAllCommand} class represents a command to remove all entries in a {@link TaskList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteAllCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code DeleteAllCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes all contents in the specified {@code list}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.clearAllTasks();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.save(storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code DeleteAllCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return @return a {@code Response} object containing the result of executing this {@code DeleteAllCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code DeleteAllCommand} was not executed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_DELETE_ALL_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_DELETE_ALL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 44
    }
  },
  {
    "path": "src/main/java/nekochan/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteCommand} class represents a command to delete a {@link Task} in a {@link TaskList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int remainingTaskCount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code DeleteCommand} with the specified {@code index}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code DeleteCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the {@code Task} in the specified {@code list} at the stored {@code index}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        deletedTask \u003d history.deleteTask(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        remainingTaskCount \u003d history.getCurrentTaskCount();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.save(storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code DeleteCommand}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code DeleteCommand}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code DeleteCommand} was not executed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_DELETE_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert deletedTask !\u003d null : \"deleted task should not be null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_DELETE + deletedTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + Messages.getTotalTaskMessage(remainingTaskCount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 63
    }
  },
  {
    "path": "src/main/java/nekochan/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Exit} class represents a command to safely terminate the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code ExitCommand} by saving the specified {@code list} to file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.save(storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code ExitCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code ExitCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code ExitCommand} was not executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_EXIT_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 39
    }
  },
  {
    "path": "src/main/java/nekochan/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code ListCommand} class represents a command to print all contents of a {@link TaskList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The output of the {@code ListCommand} retains the same order of tasks in the {@code TaskList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_UNDOABLE \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cString\u003e existingTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code ListCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        existingTasks \u003d history.listAll();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from executing this {@code ListCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code ListCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code ListCommand} was not executed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_LIST_COMMAND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (existingTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            responseMessage \u003d Messages.MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            responseMessage \u003d Messages.MESSAGE_LIST;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (int i \u003d 0; i \u003c existingTasks.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                responseMessage +\u003d String.format(\"%d. %s\\n\", i + 1, existingTasks.get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert responseMessage.length() \u003e 0 : \"response message should not be empty\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 58
    }
  },
  {
    "path": "src/main/java/nekochan/command/RedoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code RedoCommand} class represents a command that allows the user to redo an undone {@code command}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_UNDOABLE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code RedoCommand} and saves the new state to storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.redo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.save(storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code RedoCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code RedoCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code RedoCommand} was not executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_REDO_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_REDO;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 40
    }
  },
  {
    "path": "src/main/java/nekochan/command/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Response} class represents a response of an executed {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String responseMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Response} with the specified {@code responseMessage} and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code isExit} value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param isExit true if the {@code Command} executed was the {@link ExitCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param responseMessage the feedback message from the {@code Command}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response(boolean isExit, String responseMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.responseMessage \u003d responseMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the message stored in this {@code Response} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the message stored in this {@code Response} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String getResponseMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return responseMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the {@code Command} executed was the {@code ExitCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Command} executed was the {@code ExitCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 40
    }
  },
  {
    "path": "src/main/java/nekochan/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code SearchCommand} class represents a command that allows the user to search for tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The user is able to search for tasks either through their description or"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * their date (if the type of task supports it)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String searchParameter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e results;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code SearchCommand} with the specified {@code searchParameter}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string for which to search for."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public SearchCommand(String searchParameter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.searchParameter \u003d searchParameter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code SearchCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        results \u003d history.search(searchParameter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from executing this {@code SearchCommand}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code SearchCommand}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code DeleteCommand} was not executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_SEARCH_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            responseMessage \u003d Messages.MESSAGE_EMPTY_SEARCH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            responseMessage \u003d Messages.MESSAGE_SEARCH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Task result : results) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                responseMessage \u003d responseMessage.concat(result.toString() + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert responseMessage.length() \u003e 0 : \"response message should not be empty\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 71
    }
  },
  {
    "path": "src/main/java/nekochan/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.IncompleteNekoCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.NekoHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code UndoCommand} class represents a command that allows users to undo a {@code Command}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_EXIT \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final boolean IS_UNDOABLE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code UndoCommand} and saves the new state to file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param history the currently loaded {@link NekoHistory} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(NekoHistory history, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.undo();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.save(storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.isCompleted \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@link Response} from the execution of this {@code UndoCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Response} object containing the result of executing this {@code UndoCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteNekoCommandException if this {@code UndoCommand} was not executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Response getResponse() throws IncompleteNekoCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!super.isCompleted) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteNekoCommandException(Messages.INCOMPLETE_UNDO_COMMAND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String responseMessage \u003d Messages.MESSAGE_UNDO;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Response(IS_EXIT, responseMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 41
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/IncompleteNekoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class IncompleteNekoCommandException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public IncompleteNekoCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoDuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoDuplicateTaskException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoDuplicateTaskException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoException extends RuntimeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(String.format(Messages.ERROR_MESSAGE_HEADER, message));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 10
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoHistoryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoHistoryException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoHistoryException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoSimilarTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoSimilarTaskException extends NekoException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cTask\u003e similarTasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a new NekoSimilarTaskException with the specified {@code message} and list of {@code similarTasks}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param message the detail message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param similarTasks the list of {@link Task} that were found to be similar."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoSimilarTaskException(String message, List\u003cTask\u003e similarTasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.similarTasks \u003d similarTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cTask\u003e getSimilarTask() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return similarTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 25
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoStorageException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoStorageException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoTaskCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoTaskCreationException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoTaskCreationException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/NekoTaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoTaskNotFoundException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoTaskNotFoundException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/exceptions/ParseNekoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ParseNekoCommandException extends NekoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ParseNekoCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/nekochan/model/NekoHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoDuplicateTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoHistoryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoSimilarTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code NekoHistory} class records the states of the {@link TaskList} after each change is enacted on it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NekoHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cTaskList\u003e histories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int version;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code NekoHistory} instance with the specified {@code TaskList} as the original state."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param original the original state of the {@code TaskList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public NekoHistory(TaskList original) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        histories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        histories.add(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        version \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void saveState(TaskList nextState) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (version !\u003d histories.size() - 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            revertState();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        histories.add(nextState);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        version++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void revertState() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        histories.subList(version + 1, histories.size()).clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private TaskList getCurrent() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return histories.get(version);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Saves the currently loaded state to file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the storage instance to use for saving the currently loaded {@code TaskList}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if there was an exception when saving the file to disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void save(Storage storage) throws NekoStorageException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(getCurrent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a new state where the specified {@code task} has been added to the {@code TaskList}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the added {@code Task}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param task the {@code Task} to be added."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the added {@code Task}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoSimilarTaskException if there is a similar task in the currently loaded state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoDuplicateTaskException if there is a duplicate task in the currently loaded state."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task addTask(Task task) throws NekoSimilarTaskException, NekoDuplicateTaskException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            TaskList nextState \u003d getCurrent().addTask(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            saveState(nextState);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoDuplicateTaskException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            revertState();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks the {@code Task} at the specified {@code index} as complete and saves the new state."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the {@code Task} that was marked as complete."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code Task} that was marked as complete."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskNotFoundException if the specified {@code index} is out of range."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task markAsComplete(int index) throws NekoTaskNotFoundException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            TaskList nextState \u003d getCurrent().markAsComplete(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            saveState(nextState);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return nextState.getTask(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoTaskNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            revertState();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the {@code Task} at the specified {@code index} and saves the new state."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the deleted {@code Task}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the deleted {@code Task}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskNotFoundException if the specified {@code index} is out of range."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task deleteTask(int index) throws NekoTaskNotFoundException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // Retrieve the task before it is deleted for command response."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Task deletedTask \u003d getCurrent().getTask(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            TaskList nextState \u003d getCurrent().deleteTask(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            saveState(nextState);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return deletedTask;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoTaskNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            revertState();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a new state where all {@code Task} have been removed from the {@code TaskList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void clearAllTasks() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        saveState(getCurrent().clearList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a list of {@code Task} that matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string for which to search for."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a list of {@code Task} that matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cTask\u003e search(String searchParameter) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return getCurrent().getStream().filter((task) -\u003e task.match(searchParameter)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a list of the string representations of all {@code Task} in the current state."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a list of the string representations of all {@code Task} in the current state."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cString\u003e listAll() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return getCurrent().getStream().map(Task::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the number of {@link Task} in the currently loaded {@code TaskList} state."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the number of {@link Task} in the currently loaded {@code TaskList} state."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int getCurrentTaskCount() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return getCurrent().getTaskCount();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Sets the subsequent {@code TaskList} state as the currently loaded state."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoHistoryException if there are no subsequent states that can be loaded."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo() throws NekoHistoryException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            histories.get(++version);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            version--;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoHistoryException(Messages.HISTORY_REDO_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Sets the previous {@code TaskList} state as the currently loaded state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoHistoryException if there are no previous states that can be loaded."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo() throws NekoHistoryException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            histories.get(--version);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            version++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoHistoryException(Messages.HISTORY_UNDO_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 184
    }
  },
  {
    "path": "src/main/java/nekochan/model/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.parser.DateParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Deadline} class represents a task with a specific deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DEADLINE_DELIMITER \u003d \"by\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final LocalDateTime due;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Deadline(String description, LocalDateTime due) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Deadline(String description, LocalDateTime due, boolean isCompleted) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Deadline setCompleted() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Deadline(description, due, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code Deadline} object with the specified {@code details}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description and deadline of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Deadline} object with the specified details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Deadline createTask(String details) throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_COMMAND_DEADLINE_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String description \u003d details.substring(0, details.lastIndexOf(DEADLINE_DELIMITER)).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String dateTimeString \u003d details.substring(details.lastIndexOf(DEADLINE_DELIMITER) + 2).trim().toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime dateTime \u003d DateParser.parseStringToDateTime(dateTimeString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_DEADLINE_DUE_DATE_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into a {@code Deadline} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Deadline} reconstructed from the encoded string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Deadline decode(String code) throws NekoStorageException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) !\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.DECODE_UNEXPECTED_TYPE_ERROR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content.length !\u003d 4) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(content[3], DateParser.parseStringToDateTime(content[2]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content[1].equals(ENCODED_COMPLETE_FLAG)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            newDeadline.setCompleted();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else if (!content[1].equals(ENCODED_INCOMPLETE_FLAG)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code obj} is a {@code Deadline} and has the same (case insensitive) description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and due datetime as this {@code Deadline}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param obj the reference object with which to compare."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Object} is a {@code Deadline} and are similar."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean isSimilar(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(obj instanceof Deadline)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline other \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other.description.toLowerCase().equals(description.toLowerCase())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 other.due.equals(due);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Deadline deepCopy() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Both description and due are immutable."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Deadline(description, due, isCompleted);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + DateParser.parseLocalDateTimeToString(due) + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"D|%s|%s|%s\", super.isCompleted ? ENCODED_COMPLETE_FLAG : ENCODED_INCOMPLETE_FLAG,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTimeToString(due),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if this {@code Deadline} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string to test against."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code Deadline} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDate searchDate \u003d DateParser.parseStringToDateTime(searchParameter).toLocalDate();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return searchDate.isEqual(due.toLocalDate());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return searchParameter.contains(description) || description.contains(searchParameter);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code obj} is a {@code Deadline} and has the same details."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param obj the reference object with which to compare."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Object} is a {@code Deadline} and has the same details."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isDuplicate(Object obj) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(obj instanceof Deadline)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline other \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other.description.equals(description)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 other.due.equals(due);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 174
    }
  },
  {
    "path": "src/main/java/nekochan/model/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.parser.DateParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Event} class represents an event with a scheduled time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String EVENT_DELIMITER \u003d \"from\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DURATION_DELIMITER \u003d \"for\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String END_TIME_DELIMITER \u003d \"to\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String ALL_DAY_KEYWORD \u003d \"all day\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Event(String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        startDateTime \u003d start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        endDateTime \u003d end;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Event(String description, LocalDateTime start, LocalDateTime end, boolean isCompleted) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        startDateTime \u003d start;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        endDateTime \u003d end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static Event createAllDayEvent(String description, String dateTimeComponent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String start \u003d dateTimeComponent.split(ALL_DAY_KEYWORD)[0].split(DURATION_DELIMITER)[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime startDateTime \u003d DateParser.parseStringToDateTime(start);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Event(description, startDateTime, startDateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static Event createEventUsingEndDateTime(String description, String dateTimeComponent)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String start \u003d dateTimeComponent.split(END_TIME_DELIMITER)[0].trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String end \u003d dateTimeComponent.split(END_TIME_DELIMITER)[1].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime startDateTime \u003d DateParser.parseStringToDateTime(start);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime endDateTime \u003d DateParser.parseStringToDateTime(end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_EVENT_MISSING_END_DATETIME_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static Event createEventUsingDuration(String description, String dateTimeComponent)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String start \u003d dateTimeComponent.split(DURATION_DELIMITER)[0].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            int duration \u003d DateParser.parseDurationToMinutes(dateTimeComponent.split(DURATION_DELIMITER)[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime startDateTime \u003d DateParser.parseStringToDateTime(start);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime endDateTime \u003d startDateTime.plusMinutes(duration);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // Check if the endDateTime should be brought forward by 1 day to prevent over counting of days."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // E.g. 3 days after 1 Jan 00:00 should end at 3 Jan 23:59 instead of 4 Jan 00:00."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean isStartOfNewDay \u003d endDateTime.isEqual(endDateTime.toLocalDate().atStartOfDay());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean isDateOnly \u003d DateParser.isDateOnly(endDateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean isDifferentFromStart \u003d endDateTime.toLocalDate().isAfter(startDateTime.toLocalDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (isDateOnly \u0026\u0026 isStartOfNewDay \u0026\u0026 isDifferentFromStart) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                endDateTime \u003d endDateTime.minusDays(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_EVENT_MISSING_END_DATETIME_ERROR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an {@code Event} object with the specified {@code details}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description and time of the event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Event} object with the specified details."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Event createTask(String details) throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_COMMAND_EVENT_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String description \u003d details.substring(0, details.lastIndexOf(EVENT_DELIMITER)).trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String dateTimeComponent \u003d details.substring(details.lastIndexOf(EVENT_DELIMITER) + 4).trim().toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (dateTimeComponent.contains(ALL_DAY_KEYWORD)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return createAllDayEvent(description, dateTimeComponent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (dateTimeComponent.contains(END_TIME_DELIMITER)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return createEventUsingEndDateTime(description, dateTimeComponent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (dateTimeComponent.contains(DURATION_DELIMITER)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return createEventUsingDuration(description, dateTimeComponent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new NekoTaskCreationException(Messages.PARSE_EVENT_MISSING_END_DATETIME_ERROR);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_EVENT_DATETIME_ERROR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into an {@code Event} object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Event} reconstructed from the encoded string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Event decode(String code) throws NekoStorageException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) !\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.DECODE_UNEXPECTED_TYPE_ERROR);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] content \u003d code.split(\"\\\\|\", 5);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content.length !\u003d 5) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event newEvent \u003d new Event(content[4],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseStringToDateTime(content[2]),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseStringToDateTime(content[3]));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content[1].equals(ENCODED_COMPLETE_FLAG)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            newEvent.setCompleted();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else if (!content[1].equals(ENCODED_INCOMPLETE_FLAG)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Event setCompleted() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Event(description, startDateTime, endDateTime, true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code obj} is an {@code Event} and has the same (case insensitive) description,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * start and end datetime as this {@code Event}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param obj the reference object with which to compare."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Object} is an {@code Event} and are similar."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean isSimilar(Object obj) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(obj instanceof Event)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event other \u003d (Event) obj;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other.description.toLowerCase().equals(description.toLowerCase())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 other.startDateTime.equals(startDateTime)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 other.endDateTime.equals(endDateTime);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Event deepCopy() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Event(description, startDateTime, endDateTime, isCompleted);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (DateParser.isDateOnly(startDateTime) \u0026\u0026 startDateTime.toLocalDate().isEqual(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"[E]\" + super.toString() + \" (on \" + DateParser.parseLocalDateTimeToString(startDateTime)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    + \" for all day)\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"[E]\" + super.toString() + \" (from \" + DateParser.parseLocalDateTimeToString(startDateTime)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    + \" to \" + DateParser.parseLocalDateTimeToString(endDateTime) + \")\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Event}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Event}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"E|%s|%s|%s|%s\", super.isCompleted ? ENCODED_COMPLETE_FLAG : ENCODED_INCOMPLETE_FLAG,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTimeToString(startDateTime),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTimeToString(endDateTime),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if this {@code Event} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param searchParameter the string to test against."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code Event} matches the specified {@code searchParameter}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDate searchDate \u003d DateParser.parseStringToDateTime(searchParameter).toLocalDate();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean isEqualStart \u003d searchDate.isEqual(startDateTime.toLocalDate());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean isEqualEnd \u003d searchDate.isEqual(endDateTime.toLocalDate());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean isBetween \u003d searchDate.isBefore(endDateTime.toLocalDate())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    \u0026\u0026 searchDate.isAfter(startDateTime.toLocalDate());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return isEqualStart || isEqualEnd || isBetween;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return searchParameter.contains(description) || description.contains(searchParameter);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code obj} is an {@code Event} and has the same details."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param obj the reference object with which to compare."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Object} is an {@code Event} and has the same details."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isDuplicate(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(obj instanceof Event)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event other \u003d (Event) obj;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other.description.equals(description)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 other.startDateTime.equals(startDateTime)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 other.endDateTime.equals(endDateTime);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 245
    }
  },
  {
    "path": "src/main/java/nekochan/model/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.Encodable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.Searchable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Task} class provides a skeletal implementation of an immutable object representing a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Implements the {@code Encodable} and {@code Searchable} interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public abstract class Task implements Encodable\u003cTask\u003e, Searchable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected static final String ENCODED_COMPLETE_FLAG \u003d \"Y\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected static final String ENCODED_INCOMPLETE_FLAG \u003d \"N\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String COMPLETED_ICON \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String INCOMPLETE_ICON \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected final boolean isCompleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an immutable instance of a not completed task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskCreationException if the {@code description} is empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected Task(String description) throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an immutable instance of a task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param isCompleted the completion status of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskCreationException if the {@code description} is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected Task(String description, boolean isCompleted) throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (description.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_TASK_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return isCompleted ? COMPLETED_ICON : INCOMPLETE_ICON;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks this {@code Task} as complete."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a new immutable instance of this {@code Task} that is marked as complete."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract Task setCompleted();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    abstract boolean isSimilar(Object obj);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    abstract boolean isDuplicate(Object obj);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new instance of this {@code Task} with the same details."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a new instance of this {@code Task} with the same details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract Task deepCopy();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Task}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Contains the description and completion status of this {@code Task}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Task}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 80
    }
  },
  {
    "path": "src/main/java/nekochan/model/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoDuplicateTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoSimilarTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code TaskList} class is an ordered and immutable collection of {@link Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * This class provides methods to add, delete and mark as complete {@code Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * This class also provides methods to list and remove all {@code Task}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an empty {@code TaskList} instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a new copy of the supplied {@code TaskList} instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param copy the {@code TaskList} to copy."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList(TaskList copy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        copy.tasks.forEach((task) -\u003e tasks.add(task.deepCopy()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code TaskList} containing {@code Task} of the specified {@code list}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list the list of {@code Task} whose contents are to be imported into this {@code TaskList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tasks \u003d list;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds the specified {@code task} to the end of this {@code TaskList}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new immutable {@code TaskList} instance containing the added {@code task}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a new immutable {@code TaskList} instance containing the added {@code task}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoSimilarTaskException if a similar copy of {@code task} exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoDuplicateTaskException if a duplicate copy of {@code task} exists."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList addTask(Task task) throws NekoSimilarTaskException, NekoDuplicateTaskException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Do not add task if there is an exact copy."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean hasDuplicate \u003d tasks.stream().anyMatch((x) -\u003e x.isDuplicate(task));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (hasDuplicate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoDuplicateTaskException(Messages.DUPLICATE_TASK_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Add task but throw an error if there is a similar task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cTask\u003e similars \u003d tasks.stream().filter((x) -\u003e x.isSimilar(task)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean hasSimilars \u003d similars.size() \u003e 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TaskList nextState \u003d new TaskList(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        nextState.tasks.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (hasSimilars) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoSimilarTaskException(Messages.SIMILAR_TASK_ERROR, similars);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return nextState;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new immutable {@code TaskList} instance containing the {@code Task} at the specified {@code index}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * marked as completed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a new immutable {@code TaskList} instance containing the {@code Task} at the specified {@code index}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *         marked as completed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskNotFoundException if the index is out of range."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList markAsComplete(int index) throws NekoTaskNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            TaskList nextState \u003d new TaskList(this);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Task selected \u003d tasks.get(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            nextState.tasks.set(index, selected.setCompleted());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return nextState;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoException(Messages.MISSING_TASK_ERROR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new immutable {@code TaskList} instance where the {@code Task} at the specified {@code index} has been"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * deleted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a new immutable {@code TaskList} instance where the {@code Task} at the specified {@code index} has been"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *         deleted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskNotFoundException if the index is out of range."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList deleteTask(int index) throws NekoTaskNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            TaskList nextState \u003d new TaskList(this);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            nextState.tasks.remove(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return nextState;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskNotFoundException(Messages.MISSING_TASK_ERROR);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new empty {@code TaskList} instance."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a new empty {@code TaskList} instance."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList clearList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the number of {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the number of {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a stream containing the tasks stored in this {@code TaskList}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a stream containing the tasks stored in this {@code TaskList}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Stream\u003cTask\u003e getStream() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this.tasks.stream();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the {@code Task} at the specified {@code index} in this {@code TaskList}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code Task} at the specified {@code index}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskNotFoundException if the {@code index} is out of range."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task getTask(int index) throws NekoTaskNotFoundException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return this.tasks.get(index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskNotFoundException(Messages.MISSING_TASK_ERROR);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 158
    }
  },
  {
    "path": "src/main/java/nekochan/model/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * An enum containing the types of {@link Task} supported by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 10
    }
  },
  {
    "path": "src/main/java/nekochan/model/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code ToDo} class represents the most basic task with no additional parameters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ToDo(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code ToDo} object with the specified {@code details}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code ToDo} object with the specified details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static ToDo createTask(String details) throws NekoTaskCreationException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoTaskCreationException(Messages.PARSE_COMMAND_TODO_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ToDo(details);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into a {@code ToDo} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code ToDo} reconstructed from the encoded string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static ToDo decode(String code) throws NekoStorageException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) !\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.DECODE_UNEXPECTED_TYPE_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] content \u003d code.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content.length !\u003d 3) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo newToDo \u003d new ToDo(content[2]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content[1].equals(ENCODED_COMPLETE_FLAG)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            newToDo.setCompleted();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else if (!content[1].equals(ENCODED_INCOMPLETE_FLAG)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ToDo setCompleted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ToDo(description, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code obj} is a {@code ToDo} and has the same (case insensitive) description as"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * this {@code ToDo}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param obj the reference object with which to compare."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Object} is a {@code ToDo} and has the same (case insensitive) description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean isSimilar(Object obj) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(obj instanceof ToDo)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo other \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other.description.toLowerCase().equals(description.toLowerCase());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ToDo deepCopy() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ToDo(description, isCompleted);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"T|%s|%s\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.isCompleted ? ENCODED_COMPLETE_FLAG : ENCODED_INCOMPLETE_FLAG,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code ToDo}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code ToDo}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return description.contains(searchParameter) || searchParameter.contains(description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code obj} is a {@code ToDo} and has the same details."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param obj the reference object with which to compare."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code Object} is a {@code ToDo} and has the same details."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isDuplicate(Object obj) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(obj instanceof ToDo)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo other \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other.description.equals(description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 142
    }
  },
  {
    "path": "src/main/java/nekochan/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DateParser} class provides methods for parsing date-time and duration related strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Also provides methods for converting {@code LocalDateTime} objects to standardised strings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_WITH_TIME \u003d Arrays.asList(\"d MMM uuuu HH:mm\", \"d-M-uuuu HH:mm\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \"d/M/uuuu HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_DATE_ONLY \u003d Arrays.asList(\"d MMM uuuu\", \"d-M-uuuu\", \"d/M/uuuu\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int HAS_TIME_INDICATOR \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int NULL_TIME_INDICATOR \u003d 30;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int MINUTES_IN_DAY \u003d 1440;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int MINUTES_IN_HOUR \u003d 60;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified {@code input} string into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Does not support storing seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the string to be parsed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code LocalDateTime} object representing the specified date and time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoException if the format of the input is not recognised."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static LocalDateTime parseStringToDateTime(String input) throws NekoException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (input.contains(\":\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_WITH_TIME) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatter formatter \u003d builder.parseCaseInsensitive().appendPattern(format).toFormatter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return LocalDateTime.parse(input, formatter)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                            .withSecond(HAS_TIME_INDICATOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // We continue to try other formats until all fails before we throw an exception."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_DATE_ONLY) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // Since we do not support seconds for date and time based information, we use the second field to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // differentiate between a LocalDateTime with no defined time and one with time defined at midnight."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    DateTimeFormatter formatter \u003d builder.parseCaseInsensitive().appendPattern(format).toFormatter();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return LocalDate.parse(input, formatter).atStartOfDay()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                            .withSecond(NULL_TIME_INDICATOR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // We continue to try other formats until all fails before we throw an exception."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new NekoException(Messages.PARSE_DATETIME_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified {@code input} string into its corresponding duration in minutes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the string to be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the parsed duration in minutes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoException if the format of the input is not recognised."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static int parseDurationToMinutes(String input) throws NekoException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            int minutes \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // Account for and remove days."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input.contains(\"d\") || input.contains(\"D\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                minutes +\u003d MINUTES_IN_DAY * Double.parseDouble(input.split(\"[dD]\")[0].trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input.split(\"[dD]\").length \u003e 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                input \u003d input.split(\"[dD]\")[1].replaceAll(\"^[a-zA-Z ]*\", \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            // Account for and remove hours."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input.contains(\"h\") || input.contains(\"H\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                minutes +\u003d MINUTES_IN_HOUR * Double.parseDouble(input.split(\"[hH]\")[0].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input.split(\"[hH]\").length \u003e 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                input \u003d input.split(\"[hH]\")[1].replaceAll(\"^[a-zA-Z ]*\", \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (input.contains(\"m\") || input.contains(\"M\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                minutes +\u003d Double.parseDouble(input.split(\"[mM]\")[0].trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return minutes;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoException(Messages.PARSE_DATETIME_ERROR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts the specified {@code LocalDateTime} object to a string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param dateTime the {@code LocalDateTime} object to be converted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the string representation of the specified {@code LocalDateTime} object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static String parseLocalDateTimeToString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (dateTime.getSecond() \u003d\u003d NULL_TIME_INDICATOR) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_DATE_ONLY.get(0)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_WITH_TIME.get(0)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the specified {@code LocalDateTime} object represents only a date with no time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param dateTime the {@code LocalDateTime} object to test."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if the {@code LocalDateTime} object represents only a date with no time."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static boolean isDateOnly(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return dateTime.getSecond() \u003d\u003d NULL_TIME_INDICATOR;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 126
    }
  },
  {
    "path": "src/main/java/nekochan/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.CompleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.DeleteAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.ParseNekoCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Parser} class provides methods for parsing user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * An enum containing keywords used by the user for program control."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    enum Keyword {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EXIT(\"exit\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LIST(\"list\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        COMPLETE(\"complete\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EVENT(\"event\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DELETE(\"delete\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UNDO(\"undo\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        REDO(\"redo\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SEARCH(\"search\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private final String input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Keyword(String keyword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            input \u003d keyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * Finds and returns the {@code Keyword} matching the specified input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @param keyword the input to match against."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @return the {@code keyword} corresponding to the specified input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @throws ParseNekoCommandException if there is no matching {@code Keyword}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public static Keyword findKeyword(String keyword) throws ParseNekoCommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Keyword k : values()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (keyword.toLowerCase().equals(k.input)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return k;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseNekoCommandException(Messages.PARSE_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified user input and returns its corresponding {@link Command}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param userInput the user input to be parsed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Command} object to be executed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseNekoCommandException if the user input is not recognised."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Command parse(String userInput) throws ParseNekoCommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] inputs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert inputs.length \u003e 0 : \"inputs should have at least 1 element\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputKeyword \u003d inputs[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Keyword keyword \u003d Keyword.findKeyword(inputKeyword);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case REDO:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case COMPLETE:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new CompleteCommand(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseNekoCommandException(Messages.PARSE_COMMAND_COMPLETE_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (userInput.toLowerCase().contains(\"all\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new DeleteAllCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new DeleteCommand(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseNekoCommandException(Messages.PARSE_COMMAND_DELETE_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.DEADLINE, inputs[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseNekoCommandException(Messages.PARSE_COMMAND_DEADLINE_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.TODO, inputs[1]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseNekoCommandException(Messages.PARSE_COMMAND_TODO_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.EVENT, inputs[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseNekoCommandException(Messages.PARSE_COMMAND_EVENT_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case SEARCH:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new SearchCommand(inputs[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseNekoCommandException(Messages.PARSE_COMMAND_SEARCH_MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseNekoCommandException(Messages.PARSE_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 129
    }
  },
  {
    "path": "src/main/java/nekochan/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.model.task.ToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Storage} class provides persistent local storage for tasks stored in the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The default local file path to be used."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String FILE_PATH \u003d \"nekochan/localData/data.neko\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Storage} object from the specified file path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param filePath the file path to store the local save file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *                 Relative to the user\u0027s home directory."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Saves the specified list of tasks to the local save file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list the {@link TaskList} to be saved."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if the file cannot be written to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void save(TaskList list) throws NekoStorageException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!Files.exists(path.getParent())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean directoriesCreated \u003d path.getParent().toFile().mkdirs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (!directoriesCreated) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new NekoStorageException(Messages.STORAGE_ERROR_FOLDER_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            list.getStream().forEach((item) -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    writer.write(item.encode() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    throw new NekoStorageException(Messages.STORAGE_ERROR_UNABLE_TO_WRITE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_UNABLE_TO_WRITE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a list of tasks loaded from the local save file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a list of tasks loaded from the local save file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NekoStorageException if the file does not exist or its content corrupted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cTask\u003e load() throws NekoStorageException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            File history \u003d new File(path.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Scanner sc \u003d new Scanner(history);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            List\u003cTask\u003e temporaryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Task loadedTask;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027E\u0027:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d Event.decode(line);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027D\u0027:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d Deadline.decode(line);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027T\u0027:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d ToDo.decode(line);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                assert loadedTask !\u003d null : \"loaded task should not be null\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                temporaryList.add(loadedTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return temporaryList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_CORRUPT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new NekoStorageException(Messages.STORAGE_ERROR_MISSING_SAVE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 118
    }
  },
  {
    "path": "src/main/java/nekochan/ui/Clui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Clui} class manages program input and output."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Clui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DIVIDER \u003d \"________________________________________________________\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Clui} instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Clui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string containing the specified content where each line is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * indented by the specified indent. The returned string always contains a newline character at the end."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * If provided a negative indent, an indent of 0 is applied."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param content the content to indent."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param indent  the amount of spaces to indent by."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string containing the specified content where each line is indented by the specified indent."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String prependIndent(String content, int indent) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String spaces \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c indent; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            spaces +\u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] contentArray \u003d content.split(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (String s : contentArray) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            result +\u003d spaces + s + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Formats and prints the specified content."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param content the content to be printed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void print(String content) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(content, 5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the default welcome message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(Messages.MESSAGE_WELCOME, 5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Reads in user input until the next line separator."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the user input that was read."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 74
    }
  },
  {
    "path": "src/main/java/nekochan/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String ERROR_STYLE \u003d \"-fx-background-color: #FF9100; -fx-background-radius: 10px\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialog.setText(removeNewline(text));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Apply circle mask to display pictures."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Circle mask \u003d new Circle(displayPicture.getFitHeight() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        mask.setCenterX(displayPicture.getFitHeight() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        mask.setCenterY(displayPicture.getFitWidth() / 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        displayPicture.setClip(mask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static DialogBox getNekoDialog(String text, Image image) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new DialogBox(text, image).flip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static DialogBox getErrorDialog(String text, Image image) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DialogBox node \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return node.flip().highlightError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private DialogBox flip() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private DialogBox highlightError() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialog.setStyle(ERROR_STYLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String removeNewline(String content) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (content.endsWith(\"\\n\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return content.substring(0, content.length() - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return content;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 80
    }
  },
  {
    "path": "src/main/java/nekochan/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.NekoChan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.Response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String USER_IMAGE_LOCATION \u003d \"/images/User.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String BOT_IMAGE_LOCATION \u003d \"/images/Bot.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private NekoChan nekoChan;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // Images from https://www.pngguru.com"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // License: PNGGuru is an open community for users to share PNG cliparts,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // all PNG cliparts in PNGGuru are for Non-Commercial Use, no attribution required."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // Image from https://www.pngguru.com/free-transparent-background-png-clipart-kwdio"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(USER_IMAGE_LOCATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // Image from https://www.pngguru.com/free-transparent-background-png-clipart-mnsxw"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Image botImage \u003d new Image(this.getClass().getResourceAsStream(BOT_IMAGE_LOCATION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Initiates an instance of NekoChan for logic processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            nekoChan \u003d new NekoChan(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoStorageException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            print(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            nekoChan \u003d new NekoChan(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            greet();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Retrieves user input and executes it. Prints a dialog box to echo the user input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and another dialog box containing the chat bot response."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        printInput(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Response response \u003d nekoChan.getResponse(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            print(response.getResponseMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (response.shouldExit()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                // Adapted from https://stackoverflow.com/a/27334614"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                PauseTransition pause \u003d new PauseTransition((Duration.seconds(2)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                pause.setOnFinished((event) -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                pause.play();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (NekoException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            printError(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void printInput(String input) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void print(String response) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert response.length() \u003e 0 : \"response message should not be empty\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getNekoDialog(response, botImage));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void printError(String message) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert message.length() \u003e 0 : \"error message should not be empty\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getErrorDialog(message, botImage));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void greet() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getNekoDialog(Messages.MESSAGE_WELCOME, botImage));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 113
    }
  },
  {
    "path": "src/main/java/nekochan/util/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String ERROR_MESSAGE_HEADER \u003d \"Gomen nasai~ %s\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_ADD_COMMAND \u003d \"Add command was not completed.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_LIST_COMMAND \u003d \"List command was not completed.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_SEARCH_COMMAND \u003d \"Search command was not completed.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_DELETE_COMMAND \u003d \"Delete command was not completed.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_COMPLETE_COMMAND \u003d \"Complete command was not completed.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_DELETE_ALL_COMMAND \u003d \"Delete all command was not completed.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_EXIT_COMMAND \u003d \"Exit command was not completed.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_REDO_COMMAND \u003d \"Redo command was not completed.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INCOMPLETE_UNDO_COMMAND \u003d \"Undo command was not completed.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_COMPLETE_MISSING_ARGUMENT \u003d \"What did you complete exactly?\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_DELETE_MISSING_ARGUMENT \u003d \"What do you want to remove exactly?\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_DEADLINE_MISSING_ARGUMENT \u003d \"Are you hiding something from me?\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_TODO_MISSING_ARGUMENT \u003d \"I know your life is empty \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"but your todo can\u0027t be empty.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_EVENT_MISSING_ARGUMENT \u003d \"Are you going somewhere without me?\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_SEARCH_MISSING_ARGUMENT \u003d \"Neko-chan doesn\u0027t have the \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"answer to everything.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_COMMAND_UNKNOWN \u003d \"Wakarimasen~\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_DATETIME_ERROR \u003d \"Neko-chan can\u0027t understand what you\u0027re saying...\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_TASK_DESCRIPTION_ERROR \u003d \"That\u0027s really descriptive...\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_DEADLINE_DUE_DATE_ERROR \u003d \"So you never did plan on doing it huh...\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_EVENT_DATETIME_ERROR \u003d \"Does this thing ever end???\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String PARSE_EVENT_MISSING_END_DATETIME_ERROR \u003d \"Something\u0027s missing, \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"oh right I lost track of time.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INVALID_TASK_TYPE_ERROR \u003d \"Neko-chan doesn\u0027t understand.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String DECODE_UNEXPECTED_TYPE_ERROR \u003d \"Something doesn\u0027t seem right...\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MISSING_TASK_ERROR \u003d \"Neko-chan doesn\u0027t know that much yet.\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String DUPLICATE_TASK_ERROR \u003d \"Neko-chan already know this!\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String SIMILAR_TASK_ERROR \u003d \"But Neko-chan found something similar:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String STORAGE_ERROR_UNABLE_TO_WRITE \u003d \"Neko-chan doesn\u0027t know how to write.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String STORAGE_ERROR_FOLDER_ERROR \u003d \"Neko-chan got lost somewhere in your folders.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String STORAGE_ERROR_MISSING_SAVE \u003d \"Neko-chan thinks she lost her memory...\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \" Let me start afresh.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String STORAGE_ERROR_CORRUPT \u003d \"There\u0027s something wrong with my memory...\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String HISTORY_REDO_LIMIT_EXCEEDED \u003d \"Neko-chan can\u0027t tell the future!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String HISTORY_UNDO_LIMIT_EXCEEDED \u003d \"Neko-chan has told you all she knows!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Konnichinyaa!\\nWhat can Neko-chan do for you?\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_ADD \u003d \"Hai hai~ Neko-chan has added this task:\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"Sugoi! You don\u0027t have any tasks left to do.\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_LIST \u003d \"Here\u0027s everything Neko-chan knows:\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Ja ne!\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"Hai! Neko-chan has removed this task:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_DELETE_ALL \u003d \"Neko-chan has cleared all your tasks.\\nYou sure are efficient!\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_COMPLETE \u003d \"Yay! Neko-chan has marked this task as complete:\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_SEARCH \u003d \"Here\u0027s everything Neko-chan found:\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_EMPTY_SEARCH \u003d \"Neko-chan couldn\u0027t find anything for you.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_UNDO \u003d \"You\u0027re lucky Neko-chan can reverse the time.\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_REDO \u003d \"So this is how the future looks like.\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String MESSAGE_TASK_COUNT \u003d \"Neko-chan now knows %d %s.\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static String getTotalTaskMessage(int count) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(MESSAGE_TASK_COUNT, count, count \u003e 1 ? \"things\" : \"thing\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 69
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"130.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" lineSpacing\u003d\"1.0\" maxWidth\u003d\"275.0\" minHeight\u003d\"-Infinity\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" style\u003d\"-fx-background-color: #ffccde; -fx-background-radius: 10px;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"nekochan.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"Infinity\" prefHeight\u003d\"555.0\" prefWidth\u003d\"385.0\" style\u003d\"-fx-background-color: #00e1bf50;\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 26
    }
  },
  {
    "path": "src/test/java/nekochan/model/task/ConcreteTaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ConcreteTaskStub extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    ConcreteTaskStub(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    ConcreteTaskStub(String description, boolean isCompleted) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ConcreteTaskStub setCompleted() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ConcreteTaskStub(description, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task deepCopy() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ConcreteTaskStub(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean isSimilar(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean isDuplicate(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 42
    }
  },
  {
    "path": "src/test/java/nekochan/model/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateOnly_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"return book by 20-03-2019\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][\\u2718] return book (by: 20 Mar 2019)\", deadline.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDate_throwsException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Submit homework\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_DEADLINE_DUE_DATE_ERROR));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_throwsException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_DEADLINE_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"D|N|1 Jan 2020 11:59|Description\", deadline.encode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.decode(\"D|N|1 Jan 2020 11:59|Description\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][\\u2718] Description (by: 1 Jan 2020 11:59)\", deadline.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_throwsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|1 Jan 2020 11:59|Description\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|N\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_throwsException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|X|Description\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_throwsException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.DECODE_UNEXPECTED_TYPE_ERROR));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void isSimilar_similarDeadline_true() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d1 \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d2 \u003d Deadline.createTask(\"description by 1 Jan 2020 11:59\").setCompleted();;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(d1.isSimilar(d2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void isSimilar_differentDate_false() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d1 \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d2 \u003d Deadline.createTask(\"description by 2 Jan 2020 11:59\").setCompleted();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(d1.isSimilar(d2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals_sameDeadline_true() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d1 \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d2 \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\").setCompleted();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(d1.isDuplicate(d2));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals_similarDeadline_false() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d1 \u003d Deadline.createTask(\"Description by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline d2 \u003d Deadline.createTask(\"description by 1 Jan 2020 11:59\").setCompleted();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(d1.isDuplicate(d2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 110
    }
  },
  {
    "path": "src/test/java/nekochan/model/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_usingDates_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.createTask(\"Description from 20/03/2019 to 21/03/2019\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (from 20 Mar 2019 to 21 Mar 2019)\", event.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_usingDuration_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.createTask(\"Description from 20/03/2019 12:00 for 3h 30min \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (from 20 Mar 2019 12:00 to 20 Mar 2019 15:30)\", event.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_allDayDuration_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.createTask(\"Description from 20/03/2019 for all day\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (on 20 Mar 2019 for all day)\", event.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDate_throwsException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event event \u003d Event.createTask(\"Submit homework\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_EVENT_DATETIME_ERROR));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_throwsException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event event \u003d Event.createTask(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_EVENT_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.createTask(\"Description from 1/01/2020 12:00 to 2/01/2020 12:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"E|N|1 Jan 2020 12:00|2 Jan 2020 12:00|Description\", event.encode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_dateOnlyEvent_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.createTask(\"Description from 1/01/2020 to 2/01/2020\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"E|N|1 Jan 2020|2 Jan 2020|Description\", event.encode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_allDayEvent_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.createTask(\"Description from 1/01/2020 for all day\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"E|N|1 Jan 2020|1 Jan 2020|Description\", event.encode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.decode(\"E|N|1 Jan 2020 12:00|2 Jan 2020 12:00|Description\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (from 1 Jan 2020 12:00 to 2 Jan 2020 12:00)\", event.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_dateOnlyEvent_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.decode(\"E|N|1 Jan 2020|2 Jan 2020|Description\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (from 1 Jan 2020 to 2 Jan 2020)\", event.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_allDayEvent_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event event \u003d Event.decode(\"E|N|1 Jan 2020|1 Jan 2020|Description\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (on 1 Jan 2020 for all day)\", event.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_throwsException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event event \u003d Event.decode(\"E|1 Jan 2020|2 Jan 2020|Description\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event event \u003d Event.decode(\"E|N|1 Jan 2020|2 Jan 2020\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_throwsException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event event \u003d Event.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_throwsException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event event \u003d Event.decode(\"D|X|Description\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.DECODE_UNEXPECTED_TYPE_ERROR));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void isSimilar_similarDeadline_true() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e1 \u003d Event.createTask(\"Description from 20/03/2019 to 21/03/2019\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e2 \u003d Event.createTask(\"description from 20/03/2019 to 21/03/2019\").setCompleted();;;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(e1.isSimilar(e2));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void isSimilar_differentDate_false() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e1 \u003d Event.createTask(\"Description from 20/03/2019 to 22/03/2019\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e2 \u003d Event.createTask(\"description from 20/03/2019 to 21/03/2019\").setCompleted();;;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(e1.isSimilar(e2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals_sameDeadline_true() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e1 \u003d Event.createTask(\"Description from 20/03/2019 to 21/03/2019\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e2 \u003d Event.createTask(\"Description from 20/03/2019 to 21/03/2019\").setCompleted();;;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(e1.isDuplicate(e2));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals_similarDeadline_false() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e1 \u003d Event.createTask(\"Description from 20/03/2019 to 21/03/2019\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Event e2 \u003d Event.createTask(\"description from 20/03/2019 to 21/03/2019\").setCompleted();;;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(e1.isDuplicate(e2));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 146
    }
  },
  {
    "path": "src/test/java/nekochan/model/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ConcreteTaskStub task \u003d new ConcreteTaskStub(\"Description\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[\\u2718] Description\", task.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ConcreteTaskStub task \u003d new ConcreteTaskStub(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_TASK_DESCRIPTION_ERROR));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setCompleted_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ConcreteTaskStub task \u003d new ConcreteTaskStub(\"Description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ConcreteTaskStub completedTask \u003d task.setCompleted();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[\\u2713] Description\", completedTask.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 35
    }
  },
  {
    "path": "src/test/java/nekochan/model/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoStorageException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoTaskCreationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateOnly_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.createTask(\"return book\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[T][\\u2718] return book\", todo.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_throwsException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.createTask(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_TODO_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.createTask(\"Description\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"T|N|Description\", todo.encode());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.decode(\"T|N|Description\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[T][\\u2718] Description\", todo.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_throwsException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|Description\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_throwsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|N\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_throwsException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|X|Description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.STORAGE_ERROR_CORRUPT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_throwsException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(NekoStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.DECODE_UNEXPECTED_TYPE_ERROR));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void isSimilar_similarDeadline_true() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo t1 \u003d ToDo.createTask(\"Return Book\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo t2 \u003d ToDo.createTask(\"return book\").setCompleted();;;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(t1.isSimilar(t2));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals_sameDeadline_true() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo t1 \u003d ToDo.createTask(\"return book\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo t2 \u003d ToDo.createTask(\"return book\").setCompleted();;;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(t1.isDuplicate(t2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals_similarDeadline_false() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo t1 \u003d ToDo.createTask(\"Return Book\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo t2 \u003d ToDo.createTask(\"return book\").setCompleted();;;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(t1.isDuplicate(t2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 95
    }
  },
  {
    "path": "src/test/java/nekochan/parser/DateParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DateParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_slashWithTime_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1/1/1999 12:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 12, 0), ldt);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_hyphenWithTime_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1-1-1999 12:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(ldt, LocalDateTime.of(1999, 1, 1, 12, 0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_naturalWithTime_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1 Jan 1999 12:00\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 12, 0), ldt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_naturalLowercaseWithTime_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1 jan 1999 12:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 12, 0), ldt);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_slashWithoutTime_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1/1/1999\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 0, 0, 30), ldt);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_hyphenWithoutTime_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1-1-1999\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 0, 0, 30), ldt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_naturalWithoutTime_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1 Jan 1999\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 0, 0, 30), ldt);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseStringToDateTime_naturalLowercaseWithoutTime_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String dateString \u003d \"1 jan 1999\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LocalDateTime ldt \u003d DateParser.parseStringToDateTime(dateString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 1, 0, 0, 30), ldt);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_short_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1d 2h 3m\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1563, duration);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_long_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1day 2hours 3minutes\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1563, duration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_longCaseInsensitive_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1Day 2Hours 3Minutes\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1563, duration);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_longSpaceInsensitive_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1 Day 2 Hours  3Minutes\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1563, duration);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_dayOnly_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1 Day\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1440, duration);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_hourOnly_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1 Hour\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(60, duration);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_minuteOnly_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"5 Minute\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(5, duration);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_dayMinuteOnly_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1 Day 5 Minute\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1445, duration);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_dayHourOnly_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1 Day 1 Hour\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(1500, duration);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseDurationToMinutes_hourminuteOnly_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String inputString \u003d \"1 hour 1 minute\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int duration \u003d DateParser.parseDurationToMinutes(inputString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(61, duration);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 136
    }
  },
  {
    "path": "src/test/java/nekochan/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package nekochan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.CompleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.DeleteAllCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.command.SearchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.NekoException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.exceptions.ParseNekoCommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import nekochan.util.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_lowercase_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"exit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotNull(c);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_uppercase_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"EXIT\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotNull(c);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_sentenceCase_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"Exit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotNull(c);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_exit_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"exit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof ExitCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_complete_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"complete 1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof CompleteCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_completeNoIndex_throwsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"complete\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_COMPLETE_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_completeNonInteger_throwsException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"complete 1.2\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_COMPLETE_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deleteSingle_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"delete 1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deleteAll_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"delete all\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof DeleteAllCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deleteAllCaseInsensitive_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"delete AlL\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof DeleteAllCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deleteNoIndex_throwsException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"delete\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_DELETE_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deleteNonInteger_throwsException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"delete 1.1\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_DELETE_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deadline_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"deadline description by 1/2/2020\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_deadlineNoDetails_throwsException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"deadline\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_DEADLINE_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_todo_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"todo description\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_todoNoDetails_throwsException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"todo\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_TODO_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_event_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"event description from 2/2/2020 for all day\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_eventNoDetails_throwsException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"event\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_EVENT_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_search_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandString \u003d \"search something\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(c instanceof SearchCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_searchNoParameter_throwsException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NekoException thrown \u003d assertThrows(ParseNekoCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String commandString \u003d \"search\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Command c \u003d Parser.parse(commandString);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(Messages.PARSE_COMMAND_SEARCH_MISSING_ARGUMENT));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 177
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline return book by 14 Aug 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event celebrate birthday from 22 Aug 2020 for all day"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event CS2103T lecture from 28 Aug 2020 16:00 to 28 Aug 2020 18:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event weekend from 29 Aug 2020 for 2 days"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done -3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event missing end time from 10 Sept 2020"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event missing time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline missing duedate"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 1.5"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "del %systemdrive%%homepath%\\nekochan\\localData\\data.neko"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "java -classpath ..\\bin nekochan.NekoChan \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "mv $HOME/nekochan/localData/data.neko $HOME/nekochan/localData/data.neko.temp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "# exclude compilation of GUI related files"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "if ! ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  find ../src/main/java/nekochan -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  sed \u0027/.*DialogBox.*/d\u0027 sources.txt \u003e sources1.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  sed \u0027/.*MainWindow.*/d\u0027 sources1.txt \u003e sources2.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  javac -cp ../src -Xlint:none -d ../bin @sources2.txt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "java -classpath ../bin nekochan.CliWrapper \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "# cleanup temporary files"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "find . -name \"sources*.txt\" -delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "mv $HOME/nekochan/localData/data.neko.temp $HOME/nekochan/localData/data.neko"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 14,
      "-": 37
    }
  }
]
