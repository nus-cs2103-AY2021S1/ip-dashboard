[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "seanjyjy": 2
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        duke.echo();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Duke is the name of this program. It acts as a CLI app that reads and save"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * the user inputs. You can use it to record down tasks and marking the progress"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * of it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage.retrieve(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Activates the duke bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void echo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui.greetings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                isExit \u003d c.getExitStatus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                ui.printException(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "seanjyjy": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the add command of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Mainly: event, deadline, todo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String ADDED_NOTIFICATION \u003d \"Got it. I\u0027ve added this duke.task:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public AddCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throws InvalidFormatDeadlineException, InvalidFormatEventException, InvalidFormatDateException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        addTask(inputArr[0], inputArr[1], ui, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the given task into the task list. Expected format for the date in message is YYYY-MM-DD HHMM or "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * YYYY-MM-DD HHMM. If type is of todo, date can be omitted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type Type of task that is being entered (todo, event, deadline)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param message Details of the task that the user entered."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDeadlineException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatEventException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDateException Throws an exception when the format of \u0027message\u0027 is wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void addTask(String type, String message, Ui ui, TaskList tasks)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throws InvalidFormatDeadlineException, InvalidFormatEventException, InvalidFormatDateException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] dateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (Parser.isTODO(type)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new ToDo(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (Parser.isDeadline(type)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateTime \u003d message.split(\" /by \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDeadlineException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new Deadline(dateTime[0], Parser.formatDateTime(dateTime[1]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (Parser.isEvent(type)){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            dateTime \u003d message.split(\" /at \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (dateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatEventException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task \u003d new Event(dateTime[0], Parser.formatDateTime(dateTime[1]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui.messageFormatter(() -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(ADDED_NOTIFICATION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            printNumTask(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 84
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the bye command of the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an ByeCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ByeCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        ui.goodBye();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        storage.record(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        setExitStatus(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 30
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatDeadlineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.InvalidFormatEventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the command of the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_ERR \u003d \"Sorry something went wrong. duke.Duke crashed X.X\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    protected String[] inputArr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a Command object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Command(String[] inputArr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.inputArr \u003d inputArr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checks the exit status of the Duke program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return true if the exit status is true, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public boolean getExitStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Set the exit status of the Duke program depending on the input \u0027status\u0027."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param status boolean value to set the exit status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void setExitStatus(boolean status) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        isExit \u003d status;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Prints the error message when duke crashes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static void printErr() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println(KEYWORD_ERR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Display out the number of task in the user\u0027s list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks the task object containing the list of task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void printNumTask(TaskList tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.print(String.format(\"Now you have %d tasks in the list.\\n\", tasks.size()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Mainly for polymorphism."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFormatDeadlineException, "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatEventException, InvalidFormatDateException, UnknownCommandException { "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return; "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 79
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"Invalid input for delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String DELETE_NOTIFICATION \u003d \"Noted. I\u0027ve removed this duke.task:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DeleteCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        deleteTask(parseInt(inputArr[1]),ui,tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Deletes the task at that index in the list. If the index \u0027pos\u0027 less than of equals to 0 or greater than the size"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * of the list, a message will printed, notifying the user of the invalid input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param pos Index of the task to be deleted in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void deleteTask(int pos, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (pos \u003c\u003d 0 || pos \u003e tasks.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e System.out.println(INVALID_INPUT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(pos - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            tasks.remove(pos - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(DELETE_NOTIFICATION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                printNumTask(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 57
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"Invalid input for done\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DoneCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        marking(parseInt(inputArr[1]), ui, tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Mark the task at that index \u0027pos\u0027 of the list. If the index \u0027pos\u0027 less than of equals to 0 or greater than the "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * size of the list, a message will printed, notifying the user of the invalid input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param pos Index of the task to be marked in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void marking(int pos, Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (pos \u003c\u003d 0 || tasks.size() \u003c pos) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e System.out.println(INVALID_INPUT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(pos - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e task.markAsDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the find command of the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String FIND_SUCCESS \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public FindCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        findTasks(tasks, inputArr[1], ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Find and displays the list of task based on the user\u0027s input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object that contains the list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param keyword The task that the user is looking for."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void findTasks(TaskList tasks, String keyword, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String description \u003d task.getDescription().toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (description.contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                s.append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // this means no available search"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (s.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e System.out.printf(\"No available task matches %s\\n\", keyword));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(FIND_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(s.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 56
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates the add command of the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String EMPTY_MSG \u003d \"Your list is empty!!!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SHOW_TASK \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates an ListCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param inputArr Array of length 2 that contains information of the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 0, contains the type of command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *                 At index 1, contains the message of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ListCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        showListTasks(tasks, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Printing out all the task in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void showListTasks(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e System.out.println(EMPTY_MSG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            ui.messageFormatter(() -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(SHOW_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                for(int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    System.out.println(i + \". \" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates an unknown command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public UnknownCommand(String[] inputArr) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(inputArr);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * To throw the unknown command exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param ui Object that deals with interactions with the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param storage Object that deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws UnknownCommandException Throws an unknown command exception when user\u0027s input is not recognized."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws UnknownCommandException{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        throw new UnknownCommandException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTextException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class EmptyTextException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public EmptyTextException(String text) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(String.format(\" ☹ OOPS! You must fill in the text for %s\", text));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatByeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatByeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatByeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! Did you mean bye? (Note: There should not be anything behind bye)\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDateException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! A proper date format would be YYYY-MM-DD HHMM (e.g. 2019-10-15 1600) or \" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \"YYYY-MM-DD (e.g. 2019-10-15)\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDeadlineException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! A proper deadline format would be like, \" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \"e.g. deadline \\\u0027duke.task name\\\u0027 /by \\\u0027YYYY-MM-DD HHMM or YYYY-MM-DD\\\u0027\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDeleteException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDeleteException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! A proper delete format would be like e.g. delete \" +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \"\\\u0027an integer that is between 1(if list is not empty) to the number of items in the list\\\u0027\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatDoneException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatDoneException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! A proper done format would be like +\" + \" e.g. done \" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \"\\\u0027an integer that is between 1(if list is not empty) to the number of items in the list\\\u0027\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatEventException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatEventException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! A proper event format would be like, e.g. event \\\u0027event name\\\u0027 /at \\\u0027YYYY-MM-DD HHMM or \" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \"YYYY-MM-DD\\\u0027\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatFindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatFindException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! A proper find format would be like, e.g. find \\\u0027keyword\\\u0027 \" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                \"(Note that only 1 keyword is allowed.)\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFormatListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class InvalidFormatListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public InvalidFormatListException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(\" ☹ OOPS! Did you mean list? (Note: There should not be anything behind list)\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String unsureString \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String listingString \u003d \"Here are the list of duke.commands available:\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s1 \u003d \"1. list\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s2 \u003d \"2. bye\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s3 \u003d \"3. todo \\\u0027duke.task name\\\u0027 (e.g. todo duke.task 1)\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s4 \u003d \"4. deadline \\\u0027duke.task name\\\u0027 /by \\\u0027any date format\\\u0027 \" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"(e.g. deadline project /by YYYY-MM-DD HHMM or YYYY-MM-DD)\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s5 \u003d \"5. event \\\u0027event name\\\u0027 /at \\\u0027any date format\\\u0027 \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            \"(e.g. event project /at YYYY-MM-DD HHMM or YYYY-MM-DD)\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s6 \u003d \"6. delete ___ (e.g. delete 1)  *Note that it should be a value more than 0*\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s7 \u003d \"7. done ___ (e.g. done 1)  *Note that it should be a value more than 0*\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String s8 \u003d \"8. find ___ (e.g. find book) *Note that only 1 keyword is allowed*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(unsureString + listingString + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 21
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates reading the user\u0027s input and making sense of it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String KEYWORD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the user\u0027s string input is a number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param str the inputted user\u0027s index for tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s string input is a number, false otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isNumber(String str) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int num \u003d parseInt(str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type todo."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Boolean value of true if user\u0027s inputted type is todo, false otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static boolean isTODO(String type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_TODO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Boolean value of true if user\u0027s inputted type is deadline, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static boolean isDeadline(String type) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_DEADLINE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Boolean value of true if user\u0027s inputted type is event, false otherwise."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static boolean isEvent(String type) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_EVENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s inputted type is done, false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isValidDone(String type) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_DONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type bye."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s inputted type is bye, false otherwise."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isEnd(String type) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_BYE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s inputted type is list, false otherwise."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isList(String type) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_LIST);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type task(deadline or todo or event)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s inputted type is task, false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isTask(String type) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isDeadline(type) || isTODO(type) || isEvent(type);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type delete."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s inputted type is delete, false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isDelete(String type) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_DELETE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if the type of command is of type find."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param type The inputted user\u0027s type."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return boolean value of true if user\u0027s inputted type is find, false otherwise."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static boolean isFind(String type ){ "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return type.equals(KEYWORD_FIND); "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formats the user\u0027s input timing into a LocalDateTime format."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s The inputted user\u0027s timing."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A LocalDateTime object that contains the information of the timing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDateException If the inputted user\u0027s timing is not of the correct format, "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * YYYY-MM-DD HHMM or YYYY-MM-DD HMMM, an exception will be thrown to notify the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static LocalDateTime formatDateTime(String s) throws InvalidFormatDateException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] dateFormat \u003d s.split(\" \",2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] date \u003d dateFormat[0].split(\"-\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (dateFormat.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // case where he nvr input in the time"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            time \u003d \"2359\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            time \u003d dateFormat[1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // case where he inputs in the time"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (date.length !\u003d 3 || time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int year \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int day \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            throw new InvalidFormatDateException();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Making sense of the user\u0027s input and outputting the relevant commands to the input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s The inputted user\u0027s command."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A command object that executes the user\u0027s command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatByeException Throws an InvalidFormatByeException when the format of Bye is incorrect."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatListException Throws an InvalidFormatListException when the format of List is incorrect."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDoneException Throws an InvalidFormatDoneException when the format of Done is incorrect."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws EmptyTextException Throws an EmptyTextException when the user did not specify anything after the command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws InvalidFormatDeleteException Throws an InvalidFormatDeleteException when the format of Delete is "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * incorrect."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public static Command parse(String s) throws UnknownCommandException, InvalidFormatByeException, "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatListException, InvalidFormatDoneException, EmptyTextException, InvalidFormatDeleteException, "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            InvalidFormatFindException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String[] inputArr \u003d s.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        inputArr[0] \u003d inputArr[0].toLowerCase();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (isEnd(inputArr[0])) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatByeException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ByeCommand(inputArr);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (isList(inputArr[0])) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatListException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new ListCommand(inputArr);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (isValidDone(inputArr[0])) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1 || !isNumber(inputArr[1])) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDoneException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new DoneCommand(inputArr);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (isTask(inputArr[0])) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new EmptyTextException(inputArr[0]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new AddCommand(inputArr);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (isDelete(inputArr[0])) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if the input is valid"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatDeleteException();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new DeleteCommand(inputArr);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else if (isFind(inputArr[0])) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatFindException();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            String[] inputArr2 \u003d inputArr[1].split(\" \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (inputArr2.length \u003e 1) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                throw new InvalidFormatFindException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new FindCommand(inputArr);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            return new UnknownCommand(inputArr);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 227
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the storing and retrieving of information into the hard-disk"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    // might use it at the end"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String CREATE_FILEPATH \u003d \"Creating file path ... ... ... ... ... ... ... ... ... ...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String CREATE_CSV \u003d \"Creating file todoList.csv ... ... ... ... ... ... ... ...\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SAVE_INFO \u003d \"Saving information ... ... ... ... ... ... ... ... ... ...\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SAVED \u003d \"Saved  ... ... ... ... ... ... ... ... ... ... ... ... ... \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Checking if a particular task is completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param s A string encoding whether a task is completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Returns true if the task is completed, false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private boolean isTaskDone(String s) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return !s.equals(\"0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param path The directory that to be created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createFilePath(Path path) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        //System.out.println(String.format(\"%s does not exist...\", path.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Files.createDirectories(path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        //System.out.println(CREATE_FILEPATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a CSV file for the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param file The CSV file to be created."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void createCSV(File file) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        //System.out.println(CREATE_CSV);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Recording down the list of tasks that the user have during this session."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param file The CSV file to record down the information."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private void savingFileInfo(File file, TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // System.out.println(SAVE_INFO);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            bufferedWriter.write(tasks.get(i).formatStyling());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        //System.out.println(SAVED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * When the user exits, records the data back into the user\u0027s file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void record(TaskList tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Path path \u003d Paths.get(dir, \"duke.Duke\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            //System.out.println(String.format(\"Saving file information into %s\", path.toString()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if path exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                createFilePath(path);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Path filePath \u003d Paths.get(dir, \"duke.Duke\", \"todoList.csv\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // checking if file exist"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                createCSV(file);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            // saving file"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            savingFileInfo(file, tasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            Command.printErr();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the user\u0027s data and load into the system."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param tasks Object contains the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void retrieve(TaskList tasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        String dir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        Path path \u003d Paths.get(dir, \"duke.Duke\", \"todoList.csv\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (path.toFile().exists()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                BufferedReader bufferedReader \u003d Files.newBufferedReader(path);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    String[] info \u003d line.split(\",\", 4);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    // todo format type description done"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    // event format type at description done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    // deadline format type by description done"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    if (Parser.isTODO(info[0])) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        tasks.add(new ToDo(info[1], isTaskDone(info[2])));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    } else if (Parser.isEvent(info[0])) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        tasks.add(new Event(info[2], info[1], isTaskDone(info[3])));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    } else if (Parser.isDeadline(info[0])) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                        tasks.add(new Deadline(info[2], info[1], isTaskDone(info[3])));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                    line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                Command.printErr();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 141
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the deadline task that user has inputted."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final DateTimeFormatter FormatDateTime \u003d DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a deadline object the containing details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param by LocalDateTime format of the time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a deadline object the containing details of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param by String format of the time. Either YYYY-MM-DD HHMM or YYYY-MM-DD(Will be reformatted with 2359 as HHMM)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"deadline,%s%s\", by, super.formatStyling());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(FormatDateTime) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the event task that user has inputted."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final LocalDateTime at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final DateTimeFormatter FormatDateTime \u003d DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a event object the containing details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param at LocalDateTime format of the time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a event object the containing details of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param at String format of the time. Either YYYY-MM-DD HHMM or YYYY-MM-DD(Will be reformatted with 2359 as HHMM)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"event,%s%s\", at, super.formatStyling());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(FormatDateTime) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the task that user has inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TASK_MARKED_BEFORE \u003d \"This duke.task has already been marked!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String TASK_MARKED \u003d \"Nice! I\u0027ve marked this duke.task as done:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Damith C. Rajapakse"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html with minor modifications"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a task object the containing details of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays a cross if task is not done, a tick otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Byte encoding strings of the symbols tick or X."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(TASK_MARKED_BEFORE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(TASK_MARKED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(this);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\",%s,%d\\n\", description, getTaskStatus());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * If a task is completed, return 1 else 0."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return An integer coded for the boolean status of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private int getTaskStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return isDone ? 1 : 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the details of the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A string representing the details of the task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "seanjyjy": 57
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the todo task that user has inputted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a todo object the containing details of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Creates a todo object the containing details of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param isDone Boolean value of whether a task is completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Returns a proper styling to be recorded into CSV."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A format to be recorded into CSV."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String formatStyling() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return String.format(\"todo%s\", super.formatStyling());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 41
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class that simulates containing all the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private ArrayList\u003cTask\u003e listTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Return the number of tasks in the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return Integer value of the size of the list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listTasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Retrieves the task at that index \u0027n\u0027 of the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param n Integer value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return A task at that index \u0027n\u0027."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Task get(int n) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return listTasks.get(n);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Adds the tasks into the list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param t Task to be added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.add(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Removes the task as that index \u0027n\u0027 of the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param n Integer value."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void remove(int n) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        listTasks.remove(n);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 54
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " * Class the simulates the reaction of duke to the user\u0027s input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SPACER \u003d \"               \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String LOGO \u003d SPACER + \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String LINE \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String OPENING_MSG \u003d \" *** Opening and loading relevant documents into duke.Duke ***\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String GOODBYE_MSG \u003d \"Bye ^.^, Hope to see you again soon!!!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String HELLO_DUKE \u003d \"Hello! I\u0027m duke.Duke ^.^\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String QUESTION \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void greetings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        messageFormatter(() -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(OPENING_MSG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(LOGO);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        messageFormatter(() -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(HELLO_DUKE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            System.out.println(QUESTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Saying goodbye to user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void goodBye() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        messageFormatter(() -\u003e System.out.println(GOODBYE_MSG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Prints the error \u0027msg\u0027."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param msg Error message to be printed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void printException(String msg) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        messageFormatter(() -\u003e System.out.println(msg));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Formatter to format any message. Easily customizable"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @param func message to be wrapped around the formatter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void messageFormatter(Runnable func) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        func.run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * Reads in the user\u0027s input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     * @return String representing the user\u0027s input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 76
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    Parser p;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        p \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class FormatDateTime {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void testFormatDateTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                LocalDateTime obj \u003d LocalDateTime.of(2020, 8, 25, 16, 23);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                assertEquals(obj, p.formatDateTime(\"2020-08-25 1623\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            } catch (InvalidFormatDateException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDateException in the method FormatDateTime\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidFormatDate_Exception() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDateException.class, () -\u003e p.formatDateTime(\"2020/20/13 1600\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the DateTimeException in the method FormatDateTime (receives InvalidFormatDateException)\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidDateTime_Exception() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDateException.class, () -\u003e p.formatDateTime(\"2020-30-30 1600\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    class Parse {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // missing on how to test created objects"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the UnknownCommandException in the method Parse\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void testUnknownCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(UnknownCommandException.class, () -\u003e p.parse(\"blah\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatByeException in the method Parse\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidFormatBye_Exception() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatByeException.class, () -\u003e p.parse(\"bye 2\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatListException in the method Parse\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidFormatList_Exception() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatListException.class, () -\u003e p.parse(\"list 2\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDoneException in the method Parse\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidFormatDone_Exception() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDoneException.class, () -\u003e p.parse(\"done here\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the EmptyTextException in the method Parse\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_EmptyText_Exception() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(EmptyTextException.class, () -\u003e p.parse(\"todo\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDeleteException in the method Parse\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidFormatDelete_Exception() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatDeleteException.class, () -\u003e p.parse(\"delete\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        @DisplayName(\"Testing the InvalidFormatDeleteException in the method Parse\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        public void write_InvalidFormatFind_Exception() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            assertThrows(InvalidFormatFindException.class, () -\u003e p.parse(\"find hello world\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 97
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Jonathan Cook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused from https://www.baeldung.com/java-testing-system-out-println"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        task \u003d new Task(\"hello world\", false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"Nice! I\u0027ve marked this duke.task as done:\\n[\\u2713] hello world\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(str, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void formatStyling() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \",hello world,0\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(str, task.formatStyling());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "seanjyjy": 13
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    TaskList task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i ++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            task.add(new Task(\"hello world \"+ i));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testSize() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(3, task.size());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testGet() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(new Task(\"hello world 2\"), task.get(2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testAdd() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        // add again to test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task.add(new Task(\"hello world 3\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(4, 4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    public void testRemove() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        task.remove(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 43
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String LINE \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String SPACER \u003d \"               \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    private static final String LOGO \u003d SPACER + \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "            + SPACER + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Jonathan Cook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused from https://www.baeldung.com/java-testing-system-out-println"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @DisplayName(\"formatter for input message\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testMessageFormatter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.messageFormatter(() -\u003e System.out.println(\"hello world\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d LINE + \"\\n\" + \"hello world\\n\" + LINE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(str, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @DisplayName(\"user\u0027s login greetings\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testGreetings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.greetings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d LINE + \"\\n\" + \" *** Opening and loading relevant documents into duke.Duke ***\\n\" + LOGO + \"\\n\" "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                + LINE+ \"\\n\"+ \"\\n\" + LINE + \"\\n\" + \"Hello! I\u0027m duke.Duke ^.^\\n\" + \"What can I do for you?\\n\" + LINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(str, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @DisplayName(\"user\u0027s logout message\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testGoodBye() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.goodBye();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d LINE + \"\\n\" + \"Bye ^.^, Hope to see you again soon!!!\\n\" + LINE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(str, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @DisplayName(\"error message\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testPrintException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.printException(\"ERROR\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d LINE + \"\\n\" + \"ERROR\\n\" + LINE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(str, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "seanjyjy": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "todo duke.task 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "toDo duke.task 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline duke.task 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Duke /by today 2:00am"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Alpha /by 2020-08-23 0400"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project Beta/by 2020-08-23"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "deadline finish project2 Charlie/at today 2:01am"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event duke.task 4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event project meeting Donkey/at Mon 2-4pm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event finish project Eerie/at 2020-08-23 0400"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event finish project Faster/at 2020-08-23"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "event project meeting Delta/by Wednesday 3-4pm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "find project"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "list 2"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "bye 2"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "seanjyjy": 3
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "seanjyjy": 8
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/Main.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/ui/Ui.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/parser/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/storage/Storage.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/tasklist/TaskList.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/task/ToDo.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/ByeCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/DeleteCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/ListCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/UnknownCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/Command.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/AddCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/FindCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/commands/DoneCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatListException.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatFindException.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatByeException.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/EmptyTextException.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDoneException.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDeleteException.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDeadlineException.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatEventException.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/InvalidFormatDateException.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/UnknownCommandException.java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanjyjy"
        },
        "content": "../src/main/java/duke/exception/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "seanjyjy": 29
    }
  }
]
