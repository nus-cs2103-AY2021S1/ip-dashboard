[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"    mainClassName \u003d \"seedu.duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"liuyxxy":18}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":"Duke Task Scheduler is an app that beats your arse to do your stuff. Try it out, won\u0027t you?"},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"1. [Features](#features)"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"2. [Usage](#usage)"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"    * [`list`](#list---listing-tasks)"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    * [`sort`](#sort---sorting-list)"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"    * [`done`](#done---marking-tasks-as-done)"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    * [`todo`](#todo---adding-a-todo-to-the-list)"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    * [`deadline`](#deadline---adding-a-deadline-to-the-list)"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    * [`event`](#event---adding-an-event-to-the-list)"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    * [`find`](#find---finding-tasks-that-contain-the-given-word)"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    * [`bye`](#bye---say-goodbye-to-the-bot)"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"### A Cool Chatbot!"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"Ever wanted more snark in your life? Try out our app now. Face a disgusted profile pic, where "},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"the bot judges you for your life."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"### CLI Commands!"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"We don\u0027t know why you would ever want to text commands, but hey, here you go! Type all you want."},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"### Free Snark!"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"Because we all need that little bit of snark in our lives. Come and get judged by the bot!"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"### `list` - Listing tasks"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"Lists your current tasks!"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"`list`"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"\u003e a list containing your tasks"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"### `sort` - Sorting list"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"Sort your list by time, or by completion status!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"`sort by date` or `sort by done`"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"\u003e sorted list of your tasks"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"### `done` - Marking tasks as done"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"Change the completion status of your task!"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":58,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":59,"author":{"gitId":"liuyxxy"},"content":"* `done [task number]`"},{"lineNumber":60,"author":{"gitId":"liuyxxy"},"content":"* `done 1`"},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":62,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":63,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":64,"author":{"gitId":"liuyxxy"},"content":"\u003e message confirming the change in status of the task"},{"lineNumber":65,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":66,"author":{"gitId":"liuyxxy"},"content":"### `todo` - Adding a todo to the list"},{"lineNumber":67,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":68,"author":{"gitId":"liuyxxy"},"content":"Add a simple responsibility!"},{"lineNumber":69,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":70,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":71,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":72,"author":{"gitId":"liuyxxy"},"content":"* `todo [task description]`"},{"lineNumber":73,"author":{"gitId":"liuyxxy"},"content":"* `todo sigh`"},{"lineNumber":74,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":75,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":76,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":77,"author":{"gitId":"liuyxxy"},"content":"\u003e message confirming the addition of the task"},{"lineNumber":78,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":79,"author":{"gitId":"liuyxxy"},"content":"### `deadline` - Adding a deadline to the list"},{"lineNumber":80,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":81,"author":{"gitId":"liuyxxy"},"content":"Add a harder responsibility with a deadline!"},{"lineNumber":82,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":83,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":84,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":85,"author":{"gitId":"liuyxxy"},"content":"* `deadline [task description] /by [time]`"},{"lineNumber":86,"author":{"gitId":"liuyxxy"},"content":"* `deadline sigh more /by 23 Mar 2021 1200`"},{"lineNumber":87,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":88,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":89,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":90,"author":{"gitId":"liuyxxy"},"content":"\u003e message confirming the addition of the task"},{"lineNumber":91,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":92,"author":{"gitId":"liuyxxy"},"content":"### `event` - Adding an event to the list"},{"lineNumber":93,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":94,"author":{"gitId":"liuyxxy"},"content":"Add a harder responsibility with a start and end time!"},{"lineNumber":95,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":96,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":97,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":98,"author":{"gitId":"liuyxxy"},"content":"* `event [task description] /at [time] to [time]`"},{"lineNumber":99,"author":{"gitId":"liuyxxy"},"content":"* `event sigh even more /at 01 Jan 2020 0000 to 31 Dec 2020 2359`"},{"lineNumber":100,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":101,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":102,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":103,"author":{"gitId":"liuyxxy"},"content":"\u003e message confirming the addition of the task"},{"lineNumber":104,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":105,"author":{"gitId":"liuyxxy"},"content":"### `find` - Finding tasks that contain the given word"},{"lineNumber":106,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":107,"author":{"gitId":"liuyxxy"},"content":"Find something that you\u0027re trying to remember!"},{"lineNumber":108,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":109,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":110,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":111,"author":{"gitId":"liuyxxy"},"content":"* `find [word]`"},{"lineNumber":112,"author":{"gitId":"liuyxxy"},"content":"* `find sigh`"},{"lineNumber":113,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":114,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":115,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":116,"author":{"gitId":"liuyxxy"},"content":"\u003e list containing all tasks that contain that word"},{"lineNumber":117,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":118,"author":{"gitId":"liuyxxy"},"content":"### `bye` - Say goodbye to the bot"},{"lineNumber":119,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":120,"author":{"gitId":"liuyxxy"},"content":"Finally done with everything? Say bye!"},{"lineNumber":121,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":122,"author":{"gitId":"liuyxxy"},"content":"Example of usage: "},{"lineNumber":123,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":124,"author":{"gitId":"liuyxxy"},"content":"`bye`"},{"lineNumber":125,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":126,"author":{"gitId":"liuyxxy"},"content":"Expected outcome:"},{"lineNumber":127,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":128,"author":{"gitId":"liuyxxy"},"content":"\u003e program exits"},{"lineNumber":129,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":130,"author":{"gitId":"liuyxxy"},"content":""}],"authorContributionMap":{"-":14,"liuyxxy":116}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import java.io.PrintStream;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import java.time.DateTimeException;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.command.Command;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":" * Runs the Duke program, where user types in commands to add, delete, and mark tasks as done."},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"public class Duke {"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    private Storage storage;"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    private TaskList tasklist;"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"     * Duke constructor that sets up the required classes."},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"    public Duke() {"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"        this.storage \u003d  new Storage();"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"            this.tasklist \u003d new TaskList(storage.load());"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"            this.ui.showLoadingError();"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"            this.tasklist \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"            this.ui.showError(e.getMessage());"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"            this.tasklist \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"     * Runs the actual program."},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"    public void run() {"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"        this.ui.start();"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"        boolean isExit \u003d false;"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"        while (!isExit) {"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"                String line \u003d this.ui.getUserCommand();"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":"                Command c \u003d new Parser().parse(line);"},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"                c.execute(this.tasklist, this.ui);"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"            } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"                this.ui.showError(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"            } catch (DateTimeException e) {"},{"lineNumber":58,"author":{"gitId":"liuyxxy"},"content":"                this.ui.showError(\"Can\u0027t read your date man. Put it like this ok? --\u003e 25 Mar 2020 1930\");"},{"lineNumber":59,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":"        this.storage.save(this.tasklist, this.ui);"},{"lineNumber":62,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":64,"author":{"gitId":"liuyxxy"},"content":"    public static void main(String[] args) {"},{"lineNumber":65,"author":{"gitId":"liuyxxy"},"content":"        new Duke().run();"},{"lineNumber":66,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":68,"author":{"gitId":"liuyxxy"},"content":"    public String getResponse(String input) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        //@@author Ernest Friedman-Hill"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        //Reused from https://stackoverflow.com/questions/8708342/redirect-console-output-to-string-in-java"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        //with minor modifications"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ByteArrayOutputStream str \u003d new ByteArrayOutputStream();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PrintStream printStr \u003d new PrintStream(str);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        PrintStream oldOut \u003d System.out;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        System.setOut(printStr);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        boolean isExit \u003d false;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            Command c \u003d new Parser().parse(input);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            c.execute(this.tasklist, this.ui);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            isExit \u003d c.isExit();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        } catch (DukeException e) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            this.ui.showError(e.getMessage());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (isExit) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            this.storage.save(this.tasklist, this.ui);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            System.exit(0);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        System.out.flush();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        System.setOut(oldOut);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        //@@author"},{"lineNumber":95,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":96,"author":{"gitId":"liuyxxy"},"content":"        return str.toString();"},{"lineNumber":97,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":99,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":27,"liuyxxy":73}},{"path":"src/main/java/seedu/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Main;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"//@@author Jeffry Lum"},{"lineNumber":7,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Launcher {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"-":11,"liuyxxy":5}},{"path":"src/main/java/seedu/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.command.*;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeNotSureException;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" * Takes care of parsing user commands."},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"     * Returns the command that the user has inputted."},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"     * @param input User command inputted."},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"     * @return Command the user wants"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeException If the command is invalid"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    public Command parse(String input) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"        String endCommand \u003d \"bye\";"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"        String listCommand \u003d \"list\";"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        String doneCommand \u003d \"done\";"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"        String deleteCommand \u003d \"delete\";"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"        String toDoCommand \u003d \"todo\";"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        String deadlineCommand \u003d \"deadline\";"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        String eventCommand \u003d \"event\";"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"        String findCommand \u003d \"find\";"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"        String sortCommand \u003d \"sort\";"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"        String helpCommand \u003d \"help\";"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        if (input.equals(listCommand)) {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"            return new ListCommand();"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"        } else if (input.equals(endCommand)) {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"            return new ByeCommand();"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"        } else if (input.equals(helpCommand)) {"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"            return new HelpCommand();"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"            String[] words \u003d input.split(\" \", 2);"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"            if (words[0].equals(doneCommand)) {"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"                return new DoneCommand(words);"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"            } else if (words[0].equals(deleteCommand)) {"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"                return new DeleteCommand(words);"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"            } else if (words[0].equals(findCommand)) {"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"                return new FindCommand(words);"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"            } else if (words[0].equals(toDoCommand)) {"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"                return new AddTodo(words);"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"            } else if (words[0].equals(deadlineCommand)) {"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"                return new AddDeadline(words);"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"            } else if (words[0].equals(eventCommand)) {"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"                return new AddEvent(words);"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"            } else if (words[0].equals(sortCommand)) {"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"                return new SortCommand(words);"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":"            } else { // user typed a command not in duke"},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"                throw new DukeNotSureException(\"Man I don\u0027t know what you want? :s I\u0027m not very smart ok??\");"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":57}},{"path":"src/main/java/seedu/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeStorageException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.ToDo;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"import java.util.Locale;"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":" * Represents a storage space for the program output."},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"duke.txt\";"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"    private static DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\", Locale.ENGLISH);"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"    private static String TICK \u003d \"\\u2713\";"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"    private static String CROSS \u003d \"\\u2718\";"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"    public final String path;"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    public Storage() {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"        this.path \u003d DEFAULT_STORAGE_FILEPATH;"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"     * Loads the tasks from the textfile so that Duke can access the tasks"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"     * @return List containing the tasks"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"     * @throws IOException When the path is incorrect"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeException When the text file contains lines that are not supposed to be there."},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, DukeException {"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"        File f \u003d new File(this.path);"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"        f.createNewFile();"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"        assert f.exists() : \"duke.txt should have been created or already exists\";"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"        ArrayList\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"        assert ls.size() \u003d\u003d 0 : \"Should be a new list of tasks.\";"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":"        while (s.hasNext()) {"},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"            String line \u003d s.nextLine();"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"            String[] arr \u003d line.split(\"\\\\*\");"},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"            String task \u003d arr[0];"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"            assert task.equals(\"E\") || task.equals(\"T\") || task.equals(\"D\")"},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"                    : \"Should have a prefix before each task in the text file.\";"},{"lineNumber":58,"author":{"gitId":"liuyxxy"},"content":"            switch (task) {"},{"lineNumber":59,"author":{"gitId":"liuyxxy"},"content":"                case \"E\": { // case where the task is an event"},{"lineNumber":60,"author":{"gitId":"liuyxxy"},"content":"                    boolean status \u003d arr[1].equals(TICK);"},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":"                    String todo \u003d arr[2];"},{"lineNumber":62,"author":{"gitId":"liuyxxy"},"content":"                    String[] times \u003d arr[3].split(\" to \");"},{"lineNumber":63,"author":{"gitId":"liuyxxy"},"content":"                    LocalDateTime startTime \u003d LocalDateTime.parse(times[0], FORMATTER);"},{"lineNumber":64,"author":{"gitId":"liuyxxy"},"content":"                    LocalDateTime endTime \u003d LocalDateTime.parse(times[1], FORMATTER);"},{"lineNumber":65,"author":{"gitId":"liuyxxy"},"content":"                    ls.add(new Event(todo, startTime, endTime, status));"},{"lineNumber":66,"author":{"gitId":"liuyxxy"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"liuyxxy"},"content":"                case \"T\": {"},{"lineNumber":69,"author":{"gitId":"liuyxxy"},"content":"                    boolean status \u003d arr[1].equals(TICK);"},{"lineNumber":70,"author":{"gitId":"liuyxxy"},"content":"                    String todo \u003d arr[2];"},{"lineNumber":71,"author":{"gitId":"liuyxxy"},"content":"                    ls.add(new ToDo(todo, status));"},{"lineNumber":72,"author":{"gitId":"liuyxxy"},"content":"                    break;"},{"lineNumber":73,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"liuyxxy"},"content":"                case \"D\": {"},{"lineNumber":75,"author":{"gitId":"liuyxxy"},"content":"                    boolean status \u003d arr[1].equals(TICK);"},{"lineNumber":76,"author":{"gitId":"liuyxxy"},"content":"                    String todo \u003d arr[2];"},{"lineNumber":77,"author":{"gitId":"liuyxxy"},"content":"                    LocalDateTime deadline \u003d LocalDateTime.parse(arr[3], FORMATTER);"},{"lineNumber":78,"author":{"gitId":"liuyxxy"},"content":"                    ls.add(new Deadline(todo, deadline, status));"},{"lineNumber":79,"author":{"gitId":"liuyxxy"},"content":"                    break;"},{"lineNumber":80,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"liuyxxy"},"content":"                default: {"},{"lineNumber":82,"author":{"gitId":"liuyxxy"},"content":"                    throw new DukeStorageException(\"Gee somehow your duke text file got corrupted. Seriously?\");"},{"lineNumber":83,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"liuyxxy"},"content":"        return ls;"},{"lineNumber":87,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":89,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"liuyxxy"},"content":"     * Writes the tasks from the current running Duke and saves it in a text file"},{"lineNumber":91,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The list of tasks of the current Duke."},{"lineNumber":92,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The Ui of the current Duke."},{"lineNumber":93,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"liuyxxy"},"content":"    public void save(TaskList ls, Ui ui) {"},{"lineNumber":95,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"liuyxxy"},"content":"            String tasks \u003d \"\";"},{"lineNumber":97,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":98,"author":{"gitId":"liuyxxy"},"content":"            for (Task t : ls.getList()) {"},{"lineNumber":99,"author":{"gitId":"liuyxxy"},"content":"                String check \u003d \"\";"},{"lineNumber":100,"author":{"gitId":"liuyxxy"},"content":"                if (t.isComplete()) {"},{"lineNumber":101,"author":{"gitId":"liuyxxy"},"content":"                    check \u003d TICK;"},{"lineNumber":102,"author":{"gitId":"liuyxxy"},"content":"                } else {"},{"lineNumber":103,"author":{"gitId":"liuyxxy"},"content":"                    check \u003d CROSS;"},{"lineNumber":104,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":105,"author":{"gitId":"liuyxxy"},"content":"                String toAdd \u003d t.getType() + \"*\" + check + \"*\" + t.toString();"},{"lineNumber":106,"author":{"gitId":"liuyxxy"},"content":"                String addition \u003d \"\";"},{"lineNumber":107,"author":{"gitId":"liuyxxy"},"content":"                if (t.getTime() \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitId":"liuyxxy"},"content":"                    addition \u003d \"\\n\";"},{"lineNumber":109,"author":{"gitId":"liuyxxy"},"content":"                } else if (t.getType().equals(\"D\")) {"},{"lineNumber":110,"author":{"gitId":"liuyxxy"},"content":"                    addition \u003d \"*\" + t.getTime().format(FORMATTER) + \"\\n\";"},{"lineNumber":111,"author":{"gitId":"liuyxxy"},"content":"                } else {"},{"lineNumber":112,"author":{"gitId":"liuyxxy"},"content":"                    addition \u003d \"*\" + t.getTime().format(FORMATTER) + \" to \""},{"lineNumber":113,"author":{"gitId":"liuyxxy"},"content":"                            + t.getEndTime().format(FORMATTER) + \"\\n\";"},{"lineNumber":114,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"liuyxxy"},"content":"                tasks \u003d tasks + toAdd + addition;"},{"lineNumber":116,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"liuyxxy"},"content":"            FileWriter fw \u003d new FileWriter(this.path);"},{"lineNumber":118,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":119,"author":{"gitId":"liuyxxy"},"content":"            fw.write(tasks + System.lineSeparator());"},{"lineNumber":120,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":121,"author":{"gitId":"liuyxxy"},"content":"            fw.close();"},{"lineNumber":122,"author":{"gitId":"liuyxxy"},"content":"        } catch (IOException e) {"},{"lineNumber":123,"author":{"gitId":"liuyxxy"},"content":"            ui.showError(\"Whoops! Some kind of error :/ see here: \" + e.getMessage());"},{"lineNumber":124,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":126,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":128,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":129,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":129}},{"path":"src/main/java/seedu/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" * Class that represents the list of tasks."},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    private ArrayList\u003cTask\u003e ls;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"        this.ls \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    public TaskList(ArrayList\u003cTask\u003e ls) {"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"        this.ls \u003d ls;"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    public void add(Task task) {"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"        this.ls.add(task);"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    public void remove(int i) {"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"        this.ls.remove(i);"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"    public int size() {"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        return this.ls.size();"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"    public int indexOf(Task t) {"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"        return this.ls.indexOf(t);"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"    public Task get(int i) {"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"        return this.ls.get(i);"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"        return this.ls;"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":45}},{"path":"src/main/java/seedu/duke/command/AddDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeCommandException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeDateTimeException;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import java.time.DateTimeException;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"import java.util.Locale;"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":" * Class that represents adding a task with a deadline."},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"public class AddDeadline extends Command {"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    public static DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\", Locale.ENGLISH);"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    public AddDeadline(String[] words) {"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"     * Adds the task to the list of current tasks."},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeDateTimeException If the user inputs a wrong format of the date."},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeCommandException If the user did not write anything after the command."},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeDateTimeException, DukeCommandException {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"            String[] input \u003d words[1].split(\" /by \");"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"            assert input.length \u003e 0 : \"Input should not be empty.\";"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"            LocalDateTime day \u003d LocalDateTime.parse(input[1], FORMATTER);"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"            Deadline newDL \u003d new Deadline(input[0], day, false);"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"            ls.add(newDL);"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"            String thing \u003d \"Alright then, add more things to your ever-growing list of tasks:\\n\""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"                    + newDL.getStatus().replaceAll(\"(?m)^\", \"\\t\")"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"                    + \"\\nNow you have \" + ls.size() + \" tasks in the list.\";"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(thing);"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeCommandException(\"Write something after the command, gee.\");"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeDateTimeException(\"Can\u0027t read your date man. Put it like this ok? --\u003e 25 Mar 2020 1930\");"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":50}},{"path":"src/main/java/seedu/duke/command/AddEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeCommandException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeDateTimeException;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import java.time.DateTimeException;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"import java.util.Locale;"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":" * Class that represents adding an event task."},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"public class AddEvent extends Command {"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    private static DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\", Locale.ENGLISH);"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    public AddEvent(String[] words) {"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"     * Adds the task to the list of current tasks."},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeDateTimeException If the user inputs a wrong format of the date."},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeCommandException If the user did not write anything after the command."},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeDateTimeException, DukeCommandException {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"            String[] input \u003d words[1].split(\" /at \");"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"            assert input.length \u003e 0 : \"Input should not be empty.\";"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"            String [] times \u003d input[1].split(\" to \");"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"            LocalDateTime startTime \u003d LocalDateTime.parse(times[0], FORMATTER);"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"            LocalDateTime endTime \u003d LocalDateTime.parse(times[1], FORMATTER);"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"            Event newE \u003d new Event(input[0], startTime, endTime, false);"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"            ls.add(newE);"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"            String thing \u003d \"Alright then, add more things to your ever-growing list of tasks:\\n\""},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"                    + newE.getStatus().replaceAll(\"(?m)^\", \"\\t\")"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"                    + \"\\nNow you have \" + ls.size() + \" tasks in the list.\";"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(thing);"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeCommandException(\"Write something after the command, gee.\");"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeDateTimeException(\"Can\u0027t read your date man. Put it like this ok? --\u003e 25 Mar 2020 1930\");"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":51}},{"path":"src/main/java/seedu/duke/command/AddTodo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeCommandException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" * Class that represents adding a todo task."},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"public class AddTodo extends Command {"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    public AddTodo(String[] words) {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     * Adds the task to the list of current tasks."},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     * @exception DukeCommandException If nothing is written after the command."},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeCommandException {"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"            ToDo newTD \u003d new ToDo(words[1], false);"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"            ls.add(newTD);"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"            String thing \u003d \"Alright then, add more things to your ever-growing list of tasks:\\n\""},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"                    + newTD.getStatus().replaceAll(\"(?m)^\", \"\\t\")"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"                    + \"\\nNow you have \" + ls.size() + \" tasks in the list.\";"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(thing);"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeCommandException(\"Write something after the command, gee.\");"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":35}},{"path":"src/main/java/seedu/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" * A command that represents shutting down Duke."},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    public ByeCommand() {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"        super();"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"     * Checks if this command shuts down Duke."},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"     * @return Boolean that represents if Duke should be shut down."},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    public boolean isExit() {"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"        return true;"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        ui.bye();"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":27}},{"path":"src/main/java/seedu/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" * Class that represents user commands."},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    protected String[] words;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    public Command() {}"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"     * Overloaded constructor for commands that have followups, eg. delete, find."},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     * @param words The rest of the user input, apart from the command."},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    public Command(String[] words) {"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"        this.words \u003d words;"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    public boolean isExit() {"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        return false;"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"    public abstract void execute(TaskList ls, Ui ui) throws DukeException;"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":28}},{"path":"src/main/java/seedu/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeNotSureException;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" * A command that deletes a task."},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    public DeleteCommand(String[] words) {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     * Deletes the task from the list of current tasks."},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeNotSureException If the given user input does not correspond to a task in the list."},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeNotSureException {"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"            int number \u003d Integer.parseInt(words[1]);"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"            int originalSize \u003d ls.size();"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"            Task oldTask \u003d ls.get(number - 1);"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"            ls.remove(number - 1);"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"            assert ls.size() \u003c originalSize : \"Should have removed the task.\";"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"            String thing \u003d \"Running away from your responsibilities huh. Deleted:\""},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"                    + \"\\n\" + oldTask.getStatus().replaceAll(\"(?m)^\", \"\\t\")"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"                    + \"\\nNow you have \" + ls.size() + \" tasks in the list.\";"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(thing);"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeNotSureException(\"This task doesn\u0027t seem to exist? Pick a proper task, good god.\");"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeNotSureException(\"I need a number, not whatever you wrote. :s\");"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":41}},{"path":"src/main/java/seedu/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeNotSureException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" * Class that represents marking a task as done."},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    public DoneCommand(String[] words) {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     * Marks the given task as done."},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeNotSureException If the given number does not correspond to a task in the list."},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeNotSureException {"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"            int number \u003d Integer.parseInt(words[1]);"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"            Task oldTask \u003d ls.get(number - 1);"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"            oldTask.checkTask();"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult((\"Did you really finish it? Eh, good for you I guess. Marked:\" + \"\\n\""},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"                    + oldTask.getStatus()));"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeNotSureException(\"This task doesn\u0027t seem to exist? Pick a proper task, good god.\");"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":34}},{"path":"src/main/java/seedu/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeNotSureException;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":" * Class that represents the command to find a task."},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    public FindCommand(String[] words) {"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     * Find the tasks that match the given keyword."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"     * @exception DukeNotSureException If the user does not type anything after the command."},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeNotSureException {"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"            String keyword \u003d words[1];"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"            ArrayList\u003cTask\u003e matches \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"            for (Task task : ls.getList()) {"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"                if (task.getName().contains(keyword)) {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"                    matches.add(task);"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(\"Alright here\u0027s what I can find:\");"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"            if (matches.size() \u003d\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"                ui.printResult(\"Nothing, like your conscience.\");"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"            for (Task task : matches) {"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"                ui.printResult(((ls.indexOf(task) + 1) + \". \" + task.getStatus()));"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeNotSureException(\"Type something to find, will you???\");"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":49}},{"path":"src/main/java/seedu/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"public class HelpCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    public HelpCommand() {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"     * Returns an instruction list of possible commands in Duke."},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) {"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"        String str \u003d \"Did you seriously forget all the commands? Wow. Fine, here it is: \\n\""},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"                + \"1. list: to get your list of tasks \\n\""},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"                + \"2. sort by date/sort by done: to sort your list by deadlines or stuff you\u0027ve done already \\n\""},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"                + \"3. done [task number]: to mark your stuff as done. eg. done 1 \\n\""},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"                + \"4. todo [task description]: to add a todo. eg. todo read book \\n\""},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"                + \"5. deadline [task description] /by [time]:\""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"                        + \"to add a deadline. eg. deadline read book /by 25 Mar 2020 1200 \\n\""},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"                + \"6. event [task description] /at [time] to [time]: \\n\""},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"                        + \"to add an event that happens at a certain time.\""},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"                        + \"eg. event read book /at 25 Mar 2020 1200 to 25 Mar 2020 1400 \\n\""},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"                + \"7. find [keyword]: finds a certain word in your task list. eg. find book \\n\""},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"                + \"8. bye: you\u0027re finally done and want to bid farewell to me, thank goodness.\";"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        ui.printResult(str);"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":32}},{"path":"src/main/java/seedu/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" * Class that represents the list command."},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    public ListCommand() {"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"        super();"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"     * Lists the current tasks in the task list."},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) {"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"        ui.printResult(\"Don\u0027t you dare run away from your responsibilities: \");"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        if (ls.size() \u003d\u003d 0) {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(\"Nothing here. Good for you, for now.\");"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"        for (Task task : ls.getList()) {"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"            ui.printResult(((ls.indexOf(task) + 1) + \". \" + task.getStatus()));"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":32}},{"path":"src/main/java/seedu/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.command;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.comparator.TaskCompareDate;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.comparator.TaskCompareDone;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeCommandException;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeNotSureException;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"public class SortCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    public SortCommand(String[] words) {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"        super(words);"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     * Sorts the tasklist according to the completion status of tasks."},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current tasklist."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    public void sortByDone(TaskList ls) {"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        TaskCompareDone taskComparator \u003d new TaskCompareDone();"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"        Collections.sort(ls.getList(), taskComparator);"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"     * Sorts the tasklist according to the dates of tasks."},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current tasklist."},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"    public void sortByDate(TaskList ls) {"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        TaskCompareDate taskComparator \u003d new TaskCompareDate();"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"        Collections.sort(ls.getList(), taskComparator);"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"     * Executes the sort command and prints out the new sorted list."},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"     * @param ls The current list of tasks."},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"     * @param ui The ui that takes of printing output."},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeCommandException If the user did not write anything after the command."},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"     * @throws DukeNotSureException If the user did not specify the sorting method."},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"    public void execute(TaskList ls, Ui ui) throws DukeCommandException, DukeNotSureException {"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"            String[] input \u003d words[1].split(\"by \");"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"            assert input.length \u003e 0 : \"Input should not be empty.\";"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"            String requirement \u003d input[1];"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"            switch (requirement) {"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"                case \"done\": {"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"                    sortByDone(ls);"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"                    break;"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"                case \"date\": {"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"                    sortByDate(ls);"},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"                    break;"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"                default: {"},{"lineNumber":58,"author":{"gitId":"liuyxxy"},"content":"                    throw new DukeNotSureException(\"What do you even want?? Sort your stuff properly.\");"},{"lineNumber":59,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":62,"author":{"gitId":"liuyxxy"},"content":"            ListCommand makeList \u003d new ListCommand();"},{"lineNumber":63,"author":{"gitId":"liuyxxy"},"content":"            makeList.execute(ls, ui);"},{"lineNumber":64,"author":{"gitId":"liuyxxy"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"liuyxxy"},"content":"            throw new DukeCommandException(\"Write something after the command, gee.\");"},{"lineNumber":66,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":68}},{"path":"src/main/java/seedu/duke/comparator/TaskCompareDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.comparator;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" * Comparator for comparing the deadlines of each task."},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"public class TaskCompareDate implements Comparator\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"     * Compares two tasks according to the starting times of each task."},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"     * @param t1 The first task to be compared."},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"     * @param t2 The second task to be compared."},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than, equal to,"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"     * or greater than the second."},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    public int compare(Task t1, Task t2) {"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"        if (t1.getType() \u003d\u003d \"T\") {"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"            return -1;"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        } else if (t1.getType() \u003d\u003d \"E\") {"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"            if (t2.getType() \u003d\u003d \"T\" || t1.getTime().isAfter(t2.getTime())) {"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"                return 1;"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"            } else if (t2.getType() \u003d\u003d \"D\" || t1.getTime().isBefore(t2.getTime())) {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"                return -1;"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"            } else {"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"                return 0;"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"            if (t2.getType() \u003d\u003d \"T\" || t2.getType() \u003d\u003d \"E\" || t1.getTime().isAfter(t2.getTime())) {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"                return 1;"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"            } else if (t1.getTime().isBefore(t2.getTime())) {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"                return -1;"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"            } else {"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"                return 0;"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":39}},{"path":"src/main/java/seedu/duke/comparator/TaskCompareDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.comparator;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" * Comparator for comparing the completion status of each task."},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"public class TaskCompareDone implements Comparator\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"     * Compares two tasks according to the type of task they are, and their completion status."},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"     * @param t1 The first task to be compared."},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"     * @param t2 The second task to be compared."},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than, equal to,"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"     * or greater than the second."},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    public int compare(Task t1, Task t2) {"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"        if (t1.isComplete() \u0026\u0026 !t2.isComplete()) {"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"            return -1;"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"        } else if (!t1.isComplete() \u0026\u0026 t2.isComplete()) {"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"            return 1;"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"            if (t1.getName() \u003d\u003d \"T\") {"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"                return -1;"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"            } else if (t1.getName() \u003d\u003d \"E\") {"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"                if (t2.getName() \u003d\u003d \"T\") {"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"                    return 1;"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"                } else if (t2.getName() \u003d\u003d \"D\") {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"                    return -1;"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"                } else {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"                    return 0;"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"            } else {"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"                if (t2.getName() \u003d\u003d \"T\" || t2.getName() \u003d\u003d \"E\") {"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"                    return 1;"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"                } else {"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"                    return 0;"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"                }"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":45}},{"path":"src/main/java/seedu/duke/exception/DukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":" * Exception that encapsulates what happens when there is an exception in user command inputs."},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"public class DukeCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    public DukeCommandException(String message) {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":10}},{"path":"src/main/java/seedu/duke/exception/DukeDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":" * Exception that encapsulates what happens when there is an error in the date and time format of tasks."},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"public class DukeDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    public DukeDateTimeException(String message) {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":10}},{"path":"src/main/java/seedu/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":" * Exception for Duke program."},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"        super((\"ERROR!! \" + message));"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":10}},{"path":"src/main/java/seedu/duke/exception/DukeNotSureException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":" * Exception that encapsulates what happens when there is an error in user input."},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"public class DukeNotSureException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    public DukeNotSureException(String message) {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":10}},{"path":"src/main/java/seedu/duke/exception/DukeStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.exception;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":" * Exception that encapsulates what happens when there is an error in handling the text file."},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"public class DukeStorageException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"    public DukeStorageException(String message) {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":10}},{"path":"src/main/java/seedu/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.task;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" * Class that represents a task that has a deadline."},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    private LocalDateTime time;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    public Deadline(String name, LocalDateTime time, boolean status) {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"        super(name, status);"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"        this.time \u003d time;"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * Returns what the current task is and its status."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     * @return String representing the task."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    public String getStatus() {"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"        return \"[D]\" + super.getStatus() + \" (by: \""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"                + this.time.format(DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\")) + \")\";"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"     * Gets the deadline of the task."},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"     * @return DateTime object that represents the deadline."},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"        return this.time;"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"    public LocalDateTime getEndTime() {"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"        return null;"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"     * Returns the type of the task."},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"     * @return String that represents the type of the task."},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"    public String getType() {"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"        return \"D\";"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":49}},{"path":"src/main/java/seedu/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.task;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" * Class that represents an event task."},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    private LocalDateTime startTime;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    private LocalDateTime endTime;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    public Event(String name, LocalDateTime startTime, LocalDateTime endTime, boolean status) {"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"        super(name, status);"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     * Returns what the current task is and its status."},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"     * @return String representing the task."},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    public String getStatus() {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        return \"[E]\" + super.getStatus() + \" (at: \""},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"                + this.startTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\")) + \" to \""},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"                + this.endTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\")) + \")\";"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"     * Gets the starting time of the task."},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"     * @return DateTime object that represents the start time."},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"        return this.startTime;"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"     * Returns the ending time of the task, if any."},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"     * @return LocalDateTime object that is the ending time of the task, if any."},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"    public LocalDateTime getEndTime() {"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"        return this.endTime;"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"     * Returns the type of the task."},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"     * @return String that represents the type of the task."},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"    public String getType() {"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"        return \"E\";"},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":56}},{"path":"src/main/java/seedu/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.task;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":" * Class that represents the tasks the user can add to their list."},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    protected String name;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    public Task(String name, boolean status) {"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"        this.name \u003d name;"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"        this.isDone \u003d status;"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"     * Returns what the current task is and its status."},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"     * @return String representing the task."},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    public String getStatus() {"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"        return this.isDone ? (\"[\\u2713] \" + toString()) : (\"[\\u2718] \" + toString());"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"     * Checks if the current task has been marked as done."},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"    public void checkTask() {"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"        this.isDone \u003d !this.isDone;"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"     * Returns the current task name."},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"     * @return String representing the name of the task."},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"        return this.name;"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"     * Returns the type of the task."},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"     * @return String representing the type of task."},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"    public abstract String getType();"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"     * Returns the deadline of the task, if any."},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"     * @return LocalDateTime object that is the deadline of the task, if any."},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"    public abstract LocalDateTime getTime();"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"     * Returns the ending time of the task, if any."},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"     * @return LocalDateTime object that is the ending time of the task, if any."},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"    public abstract LocalDateTime getEndTime();"},{"lineNumber":58,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":59,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"liuyxxy"},"content":"     * Returns the state of the current task."},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":"     * @return Boolean representing the current state of the task."},{"lineNumber":62,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"liuyxxy"},"content":"    public boolean isComplete() {"},{"lineNumber":64,"author":{"gitId":"liuyxxy"},"content":"        return this.isDone;"},{"lineNumber":65,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":67,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"liuyxxy"},"content":"     * Returns the name of the task."},{"lineNumber":69,"author":{"gitId":"liuyxxy"},"content":"     * @return String representing the name of the task."},{"lineNumber":70,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"liuyxxy"},"content":"    public String getName() {"},{"lineNumber":72,"author":{"gitId":"liuyxxy"},"content":"        return this.name;"},{"lineNumber":73,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":74}},{"path":"src/main/java/seedu/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.task;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":" * Class that represents a todo task."},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    public ToDo(String name, boolean status) {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"        super(name, status);"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    public String getStatus() {"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"        return \"[T]\" + super.getStatus();"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"    public String getType() {"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        return \"T\";"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"        return null;"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"    public LocalDateTime getEndTime() {"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"        return null;"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":34}},{"path":"src/main/java/seedu/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"//@@author Jeffry Lum"},{"lineNumber":20,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Changes the background color of the dialogue box."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param box DialogBox to be changed."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static void styleBox(DialogBox box) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        box.dialog.setStyle(\"-fx-background-color: #f2dfeb;\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private void flip() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        styleBox(db);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        db.flip();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return db;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"-":53,"liuyxxy":18}},{"path":"src/main/java/seedu/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.Duke;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"//@@author Jeffry Lum"},{"lineNumber":13,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A GUI for Duke using FXML."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Main extends Application {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void start(Stage stage) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            stage.setScene(scene);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            stage.setTitle(\"Duke Task Scheduler\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            stage.show();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"},{"lineNumber":37,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"-":26,"liuyxxy":11}},{"path":"src/main/java/seedu/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.Duke;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"//@@author Jeffry Lum"},{"lineNumber":13,"author":{"gitId":"-"},"content":"//Reused from https://se-education.org/guides/tutorials/javaFxPart4.html with minor modifications"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Image userProfile \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Image dukeProfile \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private String introMessage \u003d (\"Hey I\u0027m Duke...\\n\" + \"What do you wanna do?\\n\" + \"I ain\u0027t got all day.\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void initialize() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":41,"author":{"gitId":"-"},"content":"                DialogBox.getDukeDialog(introMessage, dukeProfile));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private void handleUserInput() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"-"},"content":"                DialogBox.getUserDialog(input, userProfile),"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                DialogBox.getDukeDialog(response, dukeProfile));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":"//@@author"}],"authorContributionMap":{"-":47,"liuyxxy":11}},{"path":"src/main/java/seedu/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke.ui;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import java.io.InputStream;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":" * Class that represents the interface of Duke."},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    private final Scanner in;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"    public Ui() {"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"        this(System.in);"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    public Ui(InputStream in) {"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"     * Prints the starting introduction of Duke."},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"    public void start() {"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        printResult(\"Hey I\u0027m Duke...\\n\""},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"                + \"What do you wanna do?\\n\""},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"                + \"I ain\u0027t got all day.\");"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"     * Prints an error message when the text file does not load properly."},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"    public void showLoadingError() {"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"        System.out.println(\"Whoops! Some kind of error :/ see here: \");"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"     * Prints a goodbye message when Duke is shut down."},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"    public void bye() {"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":"        String byeText \u003d \"Running away huh??\";"},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"        printResult(byeText);"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"     * Gets the next line of the user input."},{"lineNumber":47,"author":{"gitId":"liuyxxy"},"content":"     * @return String that contains the next line of the user input."},{"lineNumber":48,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"liuyxxy"},"content":"    public String getUserCommand() {"},{"lineNumber":50,"author":{"gitId":"liuyxxy"},"content":"        return this.in.nextLine();"},{"lineNumber":51,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":53,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"liuyxxy"},"content":"     * Prints out any errors."},{"lineNumber":55,"author":{"gitId":"liuyxxy"},"content":"     * @param error String representing the error message."},{"lineNumber":56,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"liuyxxy"},"content":"    public void showError(String error) {"},{"lineNumber":58,"author":{"gitId":"liuyxxy"},"content":"        System.out.println(error);"},{"lineNumber":59,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":61,"author":{"gitId":"liuyxxy"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"liuyxxy"},"content":"     * Prints out any results from the user commands."},{"lineNumber":63,"author":{"gitId":"liuyxxy"},"content":"     * @param lines String representing the output from Duke."},{"lineNumber":64,"author":{"gitId":"liuyxxy"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"liuyxxy"},"content":"    public void printResult(String lines) {"},{"lineNumber":66,"author":{"gitId":"liuyxxy"},"content":"        System.out.println(lines);"},{"lineNumber":67,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":69,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":69}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" style\u003d\"-fx-max-height: \u0026quot;Infinity\u0026quot;;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-color: ffffff;\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" textFill\u003d\"#060136\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"            \u003copaqueInsets\u003e"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"                \u003cInsets /\u003e"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"            \u003c/opaqueInsets\u003e"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"            \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"                \u003cFont name\u003d\"American Typewriter\" size\u003d\"16.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"            \u003c/font\u003e"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"         \u003cpadding\u003e"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"         \u003c/padding\u003e"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        \u003c/Label\u003e"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"                \u003cInsets right\u003d\"5.0\" /\u003e"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"    \u003c/children\u003e"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"    \u003cpadding\u003e"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":"    \u003c/padding\u003e"},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"    \u003copaqueInsets\u003e"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"        \u003cInsets /\u003e"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":"    \u003c/opaqueInsets\u003e"},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"liuyxxy":37}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type something here, won\u0027t you?\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"            \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"                \u003cFont name\u003d\"American Typewriter\" size\u003d\"16.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"            \u003c/font\u003e"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"        \u003c/TextField\u003e"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: f2dfeb;\" text\u003d\"Send\" textFill\u003d\"#7a2525\"\u003e"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"         \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"            \u003cFont name\u003d\"American Typewriter\" size\u003d\"14.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"            \u003ccontent\u003e"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: dfe8f2;\" /\u003e"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"            \u003c/content\u003e"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"    \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"liuyxxy":27}},{"path":"src/test/java/seedu/duke/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"public class ByeCommandTest {"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    public void isExit() {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"        assertEquals(true, new ByeCommand().isExit());"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":13}},{"path":"src/test/java/seedu/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"    public void parseTest_exceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"        try {"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"            assertEquals(0, new Parser().parse(\"delete\"));"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"        } catch (Exception e) {"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":"            assertEquals(\"I need a number, not whatever you wrote. :s\", e.getMessage());"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":18}},{"path":"src/test/java/seedu/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"liuyxxy"},"content":"import seedu.duke.task.ToDo;"},{"lineNumber":9,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":10,"author":{"gitId":"liuyxxy"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"liuyxxy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"liuyxxy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"liuyxxy"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"liuyxxy"},"content":"import java.util.Locale;"},{"lineNumber":15,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":17,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":18,"author":{"gitId":"liuyxxy"},"content":"public class StorageTest {"},{"lineNumber":19,"author":{"gitId":"liuyxxy"},"content":"    public static DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy kkmm\", Locale.ENGLISH);"},{"lineNumber":20,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":21,"author":{"gitId":"liuyxxy"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"liuyxxy"},"content":"    public void TaskListOperationsTest() {"},{"lineNumber":23,"author":{"gitId":"liuyxxy"},"content":"        ArrayList\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"liuyxxy"},"content":"        ls.add(new ToDo(\"test todo\", false));"},{"lineNumber":25,"author":{"gitId":"liuyxxy"},"content":"        ls.add(new Deadline(\"test deadline\", LocalDateTime.parse(\"02 Dec 2019 1800\", FORMATTER), false));"},{"lineNumber":26,"author":{"gitId":"liuyxxy"},"content":"        ls.add(new Event(\"test event\", LocalDateTime.parse(\"02 Mar 2020 1800\", FORMATTER)"},{"lineNumber":27,"author":{"gitId":"liuyxxy"},"content":"                , LocalDateTime.parse(\"02 Mar 2020 1900\", FORMATTER), false));"},{"lineNumber":28,"author":{"gitId":"liuyxxy"},"content":"        TaskList tl \u003d new TaskList(ls);"},{"lineNumber":29,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":30,"author":{"gitId":"liuyxxy"},"content":"        assertEquals(3, tl.size());"},{"lineNumber":31,"author":{"gitId":"liuyxxy"},"content":"        tl.add(new ToDo(\"test todo 2\", false));"},{"lineNumber":32,"author":{"gitId":"liuyxxy"},"content":"        assertEquals(4, tl.size());"},{"lineNumber":33,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":34,"author":{"gitId":"liuyxxy"},"content":"        tl.remove(3);"},{"lineNumber":35,"author":{"gitId":"liuyxxy"},"content":"        assertEquals(3, tl.size());"},{"lineNumber":36,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":37,"author":{"gitId":"liuyxxy"},"content":"        String actual \u003d tl.get(0).getStatus();"},{"lineNumber":38,"author":{"gitId":"liuyxxy"},"content":"        String expected \u003d \"[T][\\u2718] test todo\";"},{"lineNumber":39,"author":{"gitId":"liuyxxy"},"content":"        assertEquals(actual, expected);"},{"lineNumber":40,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"liuyxxy"},"content":""},{"lineNumber":42,"author":{"gitId":"liuyxxy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"liuyxxy"},"content":"    public void loadTest() throws IOException, DukeException {"},{"lineNumber":44,"author":{"gitId":"liuyxxy"},"content":"        assertEquals(new ArrayList\u003cTask\u003e(), new Storage().load());"},{"lineNumber":45,"author":{"gitId":"liuyxxy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"liuyxxy"},"content":"}"}],"authorContributionMap":{"liuyxxy":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"liuyxxy"},"content":"list"},{"lineNumber":2,"author":{"gitId":"liuyxxy"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"liuyxxy"},"content":"list"},{"lineNumber":4,"author":{"gitId":"liuyxxy"},"content":"deadline return book /by Sunday"},{"lineNumber":5,"author":{"gitId":"liuyxxy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":6,"author":{"gitId":"liuyxxy"},"content":"list"}],"authorContributionMap":{"liuyxxy":6}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"liuyxxy"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java ../src/main/java/Task.java  ../src/main/java/Event.java ../src/main/java/ToDo.java ../src/main/java/Deadline.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"liuyxxy":1}}]
