[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Main class where the program is run. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a Duke object. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.taskList \u003d storage.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Runs the program until termination. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.showGreeting();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                command.execute(taskList, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                storage.save(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                ui.show(\"\\t \" + ex.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 44,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_ADD_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that adds a task to the taskList when executed. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** The task to be added. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param toAdd The task to be added to the taskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public AddCommand(Task toAdd) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Adds the task specified in the constructor to the taskList and displays"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * the added task with a relevant message to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList that the task is being added to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui that displays the message to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.show(String.format(\"%s\\t\\t%s\\n\\t %s\", MESSAGE_ADD_TASK, toAdd.toString(), taskList.tasksRemaining()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that displays the goodbye message to the user when executed. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns true to indicate that the program is exiting. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays the goodbye message to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui that displays the goodbye message to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a user command. Each individual command should extend"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * from this abstract class and implement the execute method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Executes the command. This method will be implemented by the child classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui involved to show messages to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Represents whether the program is exiting."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return False by default."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_DELETE_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that deletes a task when executed. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskDeleted The index of the task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DeleteCommand(int taskDeleted) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.taskIndex \u003d taskDeleted;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Deletes the task as specified by the constructor and displays the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * with a relevant message to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui involved to show messages to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws NoSuchTaskException If the taskDeleted is out of bounds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Task taskDeleted \u003d taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.show(String.format(\"%s\\t\\t%s\\n\\t %s\", MESSAGE_DELETE_TASK,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                taskDeleted.toString(), taskList.tasksRemaining()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_DONE_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that marks a task as done when executed. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskIndex The index of the task to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Marks the task, as specified by the taskIndex in the constructor, as done and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * displays the task with a relevant message to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui involved to show messages to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws NoSuchTaskException If the taskIndex is out of bounds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Task taskDone \u003d taskList.markTaskAsDone(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.show(String.format(\"%s\\t\\t%s\", MESSAGE_DONE_TASK, taskDone.toString()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_FIND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_FIND_NO_MATCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that displays all tasks that match the user\u0027s search word"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * when executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private String searchWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a FindCommand with the specified search word."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param searchWord The search word that the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public FindCommand(String searchWord) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.searchWord \u003d searchWord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays all tasks whose description contains the user\u0027s search word."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui involved to show messages to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (Task task : allTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (task.getDescription().contains(searchWord)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (matchedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            ui.show(MESSAGE_FIND_NO_MATCH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            String message \u003d MESSAGE_FIND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            ui.show(ListCommand.tasksToString(matchedTasks, message));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that lists out all tasks when executed. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays all tasks to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui involved to show messages to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String response \u003d MESSAGE_LIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.show(tasksToString(taskList.getTasks(), response));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Converts an ArrayList of tasks to a string which starts with the initialString"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * and the tasks are numbered starting from 1."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param tasks The ArrayList of tasks to be converted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param initialString The initial String that should be at the start of the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String starting with the initialString followed by the numbered list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static String tasksToString(ArrayList\u003cTask\u003e tasks, String initialString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        StringBuilder str \u003d new StringBuilder(initialString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            str.append(\"\\t \").append(i + 1).append(\".\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    .append(tasks.get(i).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                str.append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/TodayCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_TODAY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the command that displays all tasks happening today to the user when executed. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TodayCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays all tasks happening today to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The taskList involved."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param ui The ui involved to show messages to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime now \u003d LocalDate.now().atStartOfDay();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToday \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.getTasks().forEach(task -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                if (event.getAt().isSameDate(new DukeDateTime(now, false))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    tasksToday.add(event);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                if (deadline.getBy().isSameDate(new DukeDateTime(now, false))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    tasksToday.add(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        // todo: sort tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.show(tasksTodayString(tasksToday));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private String tasksTodayString(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String response \u003d MESSAGE_TODAY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return ListCommand.tasksToString(tasks, response);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 49
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeDateTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_INVALID_DATE_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input an invalid date or time format. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DukeDateTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a DukeDateTimeParseException with a relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DukeDateTimeParseException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Wrapper exception for all exceptions related to Duke. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DukeException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a DukeException with the specified detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param message The detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyDueDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_EMPTY_DUE_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input a deadline without the due date. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EmptyDueDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an EmptyDueDateException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public EmptyDueDateException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_EMPTY_DUE_DATE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyEventDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_EMPTY_EVENT_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input an event without the date or time. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EmptyEventDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an EmptyEventDateException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public EmptyEventDateException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_EMPTY_EVENT_DATE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptySearchWordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_EMPTY_SEARCH_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input find without a search word. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EmptySearchWordException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an EmptySearchWordException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public EmptySearchWordException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_EMPTY_SEARCH_WORD);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyTaskDeletedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_EMPTY_TASK_DELETED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input delete without the task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EmptyTaskDeletedException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an EmptyTaskDeletedException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public EmptyTaskDeletedException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_EMPTY_TASK_DELETED);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_EMPTY_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input a task without the description. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EmptyTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an EmptyTaskDescriptionException with the relevant detail message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskType The task type that the user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public EmptyTaskDescriptionException(String taskType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(String.format(MESSAGE_EMPTY_TASK_DESCRIPTION, taskType));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyTaskDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_EMPTY_TASK_DONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input done without the task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EmptyTaskDoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs the EmptyTaskDoneException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "   public EmptyTaskDoneException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "       super(MESSAGE_EMPTY_TASK_DONE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "   }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_INVALID_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the user input an invalid command. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs the InvalidCommandException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the file path is invalid. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class InvalidFilePathException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an InvalidFilePathException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public InvalidFilePathException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_INVALID_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the task input by the user is invalid. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an InvalidTaskException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public InvalidTaskException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_INVALID_TASK);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/NoSuchTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_NO_SUCH_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that the task input by the user does not exist. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class NoSuchTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a NoSuchTaskException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public NoSuchTaskException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "       super(MESSAGE_NO_SUCH_TASK);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_STORAGE_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that there is a problem saving the file. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class StorageException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a StorageException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public StorageException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_STORAGE_EXCEPTION);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskListTranslatorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_TASKLIST_TRANSLATOR_EXCEPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Thrown to indicate that there is a problem translating the file contents to a TaskList. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TaskListTranslatorException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a TaskListTranslatorException with the relevant detail message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public TaskListTranslatorException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(MESSAGE_TASKLIST_TRANSLATOR_EXCEPTION);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 12
    }
  },
  {
    "path": "src/main/java/duke/parsers/DukeDateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a parser that parses String inputs in the accepted formats into a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": " * {@link DukeDateTime} object. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DukeDateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String[] PATTERNS \u003d {\"d/M/yyyy\", \"d MMM yyyy\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"d MMMM yyyy\", \"d-M-yyyy\", \"yyyy-M-d\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String[] PATTERNS_WITH_TIME \u003d {\"d/M/yyyy H:mm\", \"d/M/yyyy h:mm a\", \"d/M/yyyy Hmm\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"d MMM yyyy H:mm\", \"d MMM yyyy h:mm a\", \"d MMM yyyy Hmm\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"d MMMM yyyy H:mm\", \"d MMMM yyyy h:mm a\", \"d MMMM yyyy Hmm\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"d-M-yyyy H:mm\", \"d-M-yyyy h:mm a\", \"d-M-yyyy Hmm\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"yyyy-M-d H:mm\", \"yyyy-M-d h:mm a\", \"yyyy-M-d Hmm\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Parses the specified input into a {@link DukeDateTime} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param input The user input of the date and/or time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The DukeDateTime object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws DukeDateTimeParseException If the user input is not in an accepted format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static DukeDateTime parse(String input) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        int index \u003d patternWithTimeIndex(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(input,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    DateTimeFormatter.ofPattern(PATTERNS_WITH_TIME[index]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new DukeDateTime(dateTime, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            index \u003d patternIndex(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(input,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                        DateTimeFormatter.ofPattern(PATTERNS[index]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                LocalDateTime dateTime \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                return new DukeDateTime(dateTime, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static int patternWithTimeIndex(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c PATTERNS_WITH_TIME.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                LocalDateTime.parse(input, DateTimeFormatter.ofPattern(PATTERNS_WITH_TIME[i]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static int patternIndex(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c PATTERNS.length; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                LocalDate.parse(input, DateTimeFormatter.ofPattern(PATTERNS[i]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 72
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.TodayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.EmptyDueDateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.EmptyEventDateException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.EmptySearchWordException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.EmptyTaskDeletedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.EmptyTaskDescriptionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.EmptyTaskDoneException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.InvalidTaskException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a parser that parses user inputs into the relevant commands. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Parses the user input into the relevant command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param userInput The user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The command that corresponds to the user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws EmptyTaskDescriptionException If the user inputs a task without the description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws DukeDateTimeParseException If the user inputs the date or time in a wrong format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws EmptyTaskDoneException If the user inputs done without a task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws EmptyTaskDeletedException If the user inputs deleted without a task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws EmptyDueDateException If the user inputs deadline without a due date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws EmptyEventDateException If the user inputs an event without the date and/or time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws EmptySearchWordException If the user inputs find without a search word."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static Command parse(String userInput) throws EmptyTaskDescriptionException, DukeDateTimeParseException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            EmptyTaskDoneException, EmptyTaskDeletedException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            EmptyDueDateException, EmptyEventDateException, EmptySearchWordException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String[] arr \u003d userInput.strip().split(\" \", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        switch (arr[0].strip().toLowerCase()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseBye();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyTaskDoneException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseDone(arr[1].strip());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyTaskDescriptionException(arr[0].strip());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseAdd(arr[0].strip(), arr[1].strip());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyTaskDeletedException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseDelete(arr[1].strip());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseToday();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptySearchWordException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return parseFind(arr[1].strip().toLowerCase());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static Command parseToday() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new TodayCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static AddCommand parseAdd(String commandName, String arguments)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throws EmptyTaskDescriptionException, DukeDateTimeParseException,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            EmptyEventDateException, EmptyDueDateException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new EmptyTaskDescriptionException(commandName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            task \u003d new Todo(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            String[] parsed \u003d arguments.split(\" /by \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (arguments.startsWith(\"/by\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyTaskDescriptionException(commandName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (parsed.length \u003c 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyDueDateException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            task \u003d new Deadline(parsed[0], DukeDateTimeParser.parse(parsed[1]));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            String[] parsed \u003d arguments.split(\" /at \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (arguments.startsWith(\"/at\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyTaskDescriptionException(commandName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            if (parsed.length \u003c 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            task \u003d new Event(parsed[0], DukeDateTimeParser.parse(parsed[1]));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"Invalid command scenario has been handled earlier.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static DoneCommand parseDone(String taskDone) throws InvalidTaskException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            int index \u003d Integer.parseInt(taskDone) - 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static DeleteCommand parseDelete(String taskDeleted) throws InvalidTaskException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            int index \u003d Integer.parseInt(taskDeleted) - 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static FindCommand parseFind(String searchWord) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new FindCommand(searchWord);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static ListCommand parseList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static ByeCommand parseBye() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 154
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.TaskListTranslatorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the storage of the system that handles reading and writing to files. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a Storage object with the default file path. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a Storage object with the specified file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param filePath The file path of the file where the tasks are stored."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws InvalidFilePathException If the file path is invalid (does not end with \".txt\")."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Storage(String filePath) throws InvalidFilePathException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new InvalidFilePathException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Loads the file contents."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The {@link TaskList} containing the tasks in the file or an empty {@link TaskList}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * if the file does not exist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws TaskListTranslatorException If the file contents are in an invalid format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public TaskList load() throws TaskListTranslatorException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return TaskListTranslator.decode(Files.readAllLines(path));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new AssertionError(\"A non-existent file scenario has been handled earlier.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Saves a {@link TaskList} into the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The {@link TaskList} to be saved."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws StorageException If there is a problem writing to the file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void save(TaskList taskList) throws StorageException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            List\u003cString\u003e encodedTaskList \u003d TaskListTranslator.encode(taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Files.write(path, encodedTaskList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new StorageException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 78
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListTranslator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.TaskListTranslatorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.parsers.DukeDateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the translator that handles the conversion of {@link TaskList} to a List of Strings. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TaskListTranslator {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Decodes a List of Strings into a TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param lines The list of Strings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The taskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws TaskListTranslatorException If the lines have an invalid format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static TaskList decode(List\u003cString\u003e lines) throws TaskListTranslatorException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                Task task \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                String[] parsed \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                switch (parsed[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    task \u003d new Todo(parsed[2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    task \u003d new Deadline(parsed[2], DukeDateTimeParser.parse(parsed[3]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    task \u003d new Event(parsed[2], DukeDateTimeParser.parse(parsed[3]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                if (parsed[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    assert task !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new TaskListTranslatorException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Encodes a {@link TaskList} into a list of Strings to be saved into a file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param taskList The {@link TaskList}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The list of Strings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static List\u003cString\u003e encode(TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            strings.add(task.toFileString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 69
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the list of tasks. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an empty taskList. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Gets the ArrayList of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return the ArrayList of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Adds a task to the list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Marks a task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The task that was marked as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws NoSuchTaskException If there is no task corresponding the the index specified."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Task markTaskAsDone(int index) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new NoSuchTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Deletes a task from the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @throws NoSuchTaskException If there is no task corresponding to the index specified."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Task deleteTask(int index) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return tasks.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            throw new NoSuchTaskException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the total number of tasks in the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The total number of tasks in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int numOfTasks() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the message detailing the number of tasks in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The message detailing the number of tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String tasksRemaining() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return String.format(\"Now you have %d tasks in the list\", numOfTasks());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 80
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a deadline. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** The due date of this object. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    protected DukeDateTime by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a Deadline with a description and a due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param description The description of this deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param by The due date of this deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Deadline(String description, DukeDateTime by) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Gets the due date of this deadline object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The due date of this deadline object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DukeDateTime getBy() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this deadline in the format that it should be saved"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * in the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this deadline in the appropriate format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, by);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this deadline to be displayed to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this deadline to be displayed to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.toString() + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 47
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents an event. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** The date and/or time of the event. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    protected DukeDateTime at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs an Event object with the specified description and date and/or time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param description The description of this event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param at The date and/or time of this event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Event(String description, DukeDateTime at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the date and/or time of this event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The date and/or time of this event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DukeDateTime getAt() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this event in the format that it should be saved in the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this event in the appropriate format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this event to be displayed to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this event to be displayed to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.toString() + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a task. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** The description of this task. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Represents whether the task is done or not. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs the task with the specified description. isDone is by default false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param description The description of this task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Marks this taks as done. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this task in the format to be saved in the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this task in the appropriate format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return String.format(\"? | %d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this task to be displayed to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this task to be displayed to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 54
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a todo. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a Todo object with the specified description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param description The description of this todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this todo in the format it should be saved in the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this todo in the appropriate format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this todo to be displayed to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return the String representation of this todo to be displayed to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 31
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_BYE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_GREETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static duke.utils.Messages.MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents the Ui of the system that handles user interaction. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static String LINE \u003d \"\\t\" + \"_\".repeat(75);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a Ui object. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays a line to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private void showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.out.println(MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays the greeting to the user. Called when the user first runs the program. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void showGreeting() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.out.println(MESSAGE_GREETING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays the goodbye message to the user. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.out.println(MESSAGE_BYE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Displays the specified message to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param message The message to be displayed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void show(String message) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Reads the user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The user input as a String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return \"bye\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 66
    }
  },
  {
    "path": "src/main/java/duke/utils/DukeDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "/** Represents a wrapper class over {@link LocalDateTime} such that some objects may not have time. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DukeDateTime implements Comparable\u003cDukeDateTime\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private boolean containsTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Constructs a DukeDateTime object with the specified dateTime and whether it contains a time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param dateTime The LocalDateTime involved. If time is not involved, this dateTime will represent"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *                 the equivalent DateTime at midnight."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param containsTime True if this object contains a time and false otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public DukeDateTime(LocalDateTime dateTime, boolean containsTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        this.containsTime \u003d containsTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Returns the String representation of this DukeDateTime object, including time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * only if time is involved."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return The String representation of this DukeDateTime object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return containsTime"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                ? dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                : dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Tests if another DukeDateTime object is of the same date as this object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param other The other DukeDateTime object to be compared with."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return True if they are of the same date and false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public boolean isSameDate(DukeDateTime other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        return dateTime.getYear() \u003d\u003d other.dateTime.getYear()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 dateTime.getMonthValue() \u003d\u003d other.dateTime.getMonthValue()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \u0026\u0026 dateTime.getDayOfMonth() \u003d\u003d other.dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    /** Compares this DukeDateTime object with another DukeDateTime object in chronological order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @param o The other DukeDateTime object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * @return -1 if this object is before, 1 if this is after and 0 if this object is at the same"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     * time as the other object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public int compareTo(DukeDateTime o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        if (dateTime.isBefore(o.dateTime)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } else if (dateTime.isAfter(o.dateTime)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 62
    }
  },
  {
    "path": "src/main/java/duke/utils/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        + \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_GREETING \u003d \"\\t Hello! I\u0027m Duke\\n\\t What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"\\t Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_ADD_TASK \u003d \"\\t Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK \u003d \"\\t Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_DONE_TASK \u003d \"\\t Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_FIND_NO_MATCH \u003d \"\\t There are no tasks that matches your search word.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"\\t Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_LIST \u003d \"\\t Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_TODAY \u003d \"\\t Here are your tasks today:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"OOPS! Invalid date / time format!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_EMPTY_DUE_DATE \u003d \"OOPS! The due date of deadline cannot be empty!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_EMPTY_EVENT_DATE \u003d \"OOPS! The date / time of event cannot be empty!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_EMPTY_SEARCH_WORD \u003d \"OOPS! Your search word cannot be empty.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_DELETED \u003d \"OOPS! Task deleted cannot be empty!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_DESCRIPTION \u003d \"OOPS! The description of a %s cannot be empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_EMPTY_TASK_DONE \u003d \"OOPS! Task done cannot be empty!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"OOPS! I\u0027m sorry but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"OOPS! File paths must end with .txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK \u003d \"OOPS! Invalid task found.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_TASK \u003d \"OOPS! No such task exists!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_STORAGE_EXCEPTION \u003d \"OOPS! Error saving file.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static final String MESSAGE_TASKLIST_TRANSLATOR_EXCEPTION \u003d \"OOPS! Error reading from file.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 37
    }
  },
  {
    "path": "src/test/data/StorageTest/invalidData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "some rubbish"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 1
    }
  },
  {
    "path": "src/test/data/StorageTest/validData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "T | 0 | todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "D | 0 | deadline | 23 Aug 2020 9:00 PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "E | 1 | event | 23 Aug 2020"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 3
    }
  },
  {
    "path": "src/test/java/duke/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(todo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        addCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(LINE + \"\\t Got it. I\u0027ve added this task:\\n\\t\\t\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + todo.toString()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\n\\t \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + taskList.tasksRemaining()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + LINE, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 45
    }
  },
  {
    "path": "src/test/java/duke/commands/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ByeCommand command \u003d new ByeCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(new TaskList(), new Ui());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Bye. Hope to see you again soon!\\n\" + LINE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 37
    }
  },
  {
    "path": "src/test/java/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DeleteCommand command \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(taskList, new Ui());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Noted. I\u0027ve removed this task:\\n\\t\\t\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + todo.toString()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\n\\t \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + taskList.tasksRemaining()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + LINE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            DeleteCommand command \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            command.execute(new TaskList(), new Ui());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NoSuchTaskException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! No such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 59
    }
  },
  {
    "path": "src/test/java/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_validInput_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"description\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DoneCommand command \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(taskList, new Ui());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Nice! I\u0027ve marked this task as done:\\n\\t\\t\" + todo.toString() + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            DoneCommand command \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            command.execute(new TaskList(), new Ui());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NoSuchTaskException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! No such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 55
    }
  },
  {
    "path": "src/test/java/duke/commands/FindCommandtest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class FindCommandtest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_noMatch_showNoMatchFound() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        FindCommand command \u003d new FindCommand(\"word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(new TaskList(), new Ui());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t There are no tasks that matches your search word.\\n\" + LINE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_hasMatch_showMatchedTasks() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        FindCommand command \u003d new FindCommand(\"word\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo matched \u003d new Todo(\"has word\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo unmatched \u003d new Todo(\"no\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(matched);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(unmatched);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(taskList, new Ui());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\t Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\t 1.\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + matched.toString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 56
    }
  },
  {
    "path": "src/test/java/duke/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_emptyList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(new TaskList(), new Ui());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Here are the tasks in your list:\\n\\n\" + LINE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void execute_nonEmptyList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"description\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(taskList, new Ui());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\t 1.[T][\\u2718] description\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + LINE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 51
    }
  },
  {
    "path": "src/test/java/duke/commands/TodayCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TodayCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime todayNoTime \u003d LocalDate.now().atStartOfDay();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime todayWithTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime tomorrow \u003d todayNoTime.plusDays(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"deadline1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                new DukeDateTime(todayNoTime, false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"deadline2\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                new DukeDateTime(todayWithTime, true));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline3 \u003d new Deadline(\"deadline3\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                new DukeDateTime(tomorrow, false));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TodayCommand command \u003d new TodayCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        command.execute(taskList, new Ui());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Here are your tasks today:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\t 1.\" + deadline1.toString() + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\t 2.\" + deadline2.toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + LINE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 59
    }
  },
  {
    "path": "src/test/java/duke/parsers/DukeDateTimeParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DukeDateTimeParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_validInputWithTime_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime expected \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String[] dateTimes \u003d {\"23/8/2020 1:00 PM\", \"23 Aug 2020 1300\", \"23 August 2020 13:00\", \"23-8-2020 1:00 PM\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (String dateTime : dateTimes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            DukeDateTime dukeDateTime \u003d DukeDateTimeParser.parse(dateTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(0, dukeDateTime.compareTo(expected));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_validInputWithoutTime_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime expected \u003d new DukeDateTime(LocalDate.parse(\"2020-08-23\").atStartOfDay(), false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String[] dateTimes \u003d {\"23/8/2020\", \"23 Aug 2020\", \"23 August 2020\", \"23-8-2020\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (String dateTime : dateTimes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            DukeDateTime dukeDateTime \u003d DukeDateTimeParser.parse(dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(0, dukeDateTime.compareTo(expected));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            String input \u003d \"23/13/2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            DukeDateTime dukeDateTime \u003d DukeDateTimeParser.parse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! Invalid date / time format!\", e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 45
    }
  },
  {
    "path": "src/test/java/duke/parsers/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_bye_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command commandWithWhiteSpace \u003d Parser.parse(\"    bye   \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command commandWithCaps \u003d Parser.parse(\"Bye\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof ByeCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(commandWithWhiteSpace instanceof ByeCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(commandWithCaps instanceof ByeCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_list_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof ListCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_done_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"done 1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof DoneCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_doneWithEmptyTask_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"done\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (EmptyTaskDoneException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! Task done cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_doneWithInvalidTask_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"done task\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! Invalid task found.\", e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_delete_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"delete 2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_deleteWithEmptyTask_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (EmptyTaskDeletedException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! Task deleted cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_deleteWithInvalidTask_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"delete task\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! Invalid task found.\", e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_deadline_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"deadline return book /by 23/8/2020 1:00 PM\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_deadlineWithInvalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"deadline return book /by some-date\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! Invalid date / time format!\", e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_deadlineWithDescriptionButNoDate_exceptionThrown() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"deadline return book\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (EmptyDueDateException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! The due date of deadline cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_deadlineWithNoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"deadline /by 23/8/2020\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (EmptyTaskDescriptionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! The description of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_todo_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"todo task\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_todoWithEmptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"todo    \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (EmptyTaskDescriptionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_event_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"event meeting /at 23/8/2020\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof AddCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_today_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"today\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof TodayCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Parser.parse(\"hello\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! I\u0027m sorry but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_find_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Command command \u003d Parser.parse(\"find something\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertTrue(command instanceof FindCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void parse_findWithEmptySearchWord_exceptionThrown() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(EmptySearchWordException.class,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                () -\u003e Parser.parse(\"find\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 164
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.TaskListTranslatorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.parsers.DukeDateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public static Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"data/StorageTest\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private static final String NON_EXISTENT_FILE_NAME \u003d \"ThisFileDoesNotExist.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(InvalidFilePathException.class, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                new Storage(TEST_DATA_FOLDER + \"/\" + \"InvalidFileName\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void load_invalidFormat_exceptionThrown() throws TaskListTranslatorException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Storage storage \u003d new Storage(TEST_DATA_FOLDER + \"/\" + \"invalidData.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertThrows(TaskListTranslatorException.class, storage::load);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void load_validFormat_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Storage storage \u003d new Storage(TEST_DATA_FOLDER + \"/\" + \"validData.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d storage.load();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String[] expected \u003d {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"[T][\\u2718] todo\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"[D][\\u2718] deadline (by: 23 Aug 2020 9:00 PM)\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"[E][\\u2713] event (at: 23 Aug 2020)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(expected[i], tasks.get(i).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void load_nonExistentFile_returnsEmptyTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Storage storage \u003d new Storage(TEST_DATA_FOLDER + \"/\" + NON_EXISTENT_FILE_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d storage.load();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(0, taskList.numOfTasks());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void save_taskList_success() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                DukeDateTimeParser.parse(\"23/8/2020 9:00 PM\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(\"event\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                DukeDateTimeParser.parse(\"23/8/2020\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Storage storage \u003d new Storage(testFolder.resolve(\"temp.txt\").toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        List\u003cString\u003e expected \u003d Files.readAllLines(Paths.get(TEST_DATA_FOLDER + \"/validData.txt\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        List\u003cString\u003e actual \u003d Files.readAllLines(testFolder.resolve(\"temp.txt\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertIterableEquals(expected, actual);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 84
    }
  },
  {
    "path": "src/test/java/duke/storage/TaskListTranslatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.parsers.DukeDateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TaskListTranslatorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private List\u003cString\u003e lines \u003d Arrays.asList("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"T | 0 | todo\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"D | 0 | deadline | 23 Aug 2020 9:00 PM\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            \"E | 1 | event | 23 Aug 2020\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void decode_NonEmptyInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d TaskListTranslator.decode(lines);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String[] expected \u003d {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"[T][\\u2718] todo\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"[D][\\u2718] deadline (by: 23 Aug 2020 9:00 PM)\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"[E][\\u2713] event (at: 23 Aug 2020)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(expected[i], tasks.get(i).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void decode_emptyInput_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d TaskListTranslator.decode(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(0, taskList.numOfTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testEncode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                DukeDateTimeParser.parse(\"23/8/2020 9:00 PM\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(\"event\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                DukeDateTimeParser.parse(\"23/8/2020\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(lines, TaskListTranslator.encode(taskList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 60
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testGetTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(\"event\", dateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline\", dateTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e(Arrays.asList(todo, event, deadline));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertIterableEquals(expected, taskList.getTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void markTaskAsDone_validInput_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Task task \u003d taskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(todo, task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void markTaskAsDone_outOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Task task \u003d taskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NoSuchTaskException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! No such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void deleteTask_validInput_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Task task \u003d taskList.deleteTask(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(todo, task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void deleteTask_outOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            Task task \u003d taskList.deleteTask(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        } catch (NoSuchTaskException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "            assertEquals(\"OOPS! No such task exists!\", e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testNumOfTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(\"event\", dateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline\", dateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(3, taskList.numOfTasks());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testTasksRemaining() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(\"event\", dateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline\", dateTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"Now you have 3 tasks in the list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, taskList.tasksRemaining());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 99
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testGetBy() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime by \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(by, deadline.getBy());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testToFileString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime by \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"D | 0 | \" + description + \" | 23 Aug 2020 1:00 PM\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, deadline.toFileString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime by \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"[D][\\u2718] \" + description + \" (by: 23 Aug 2020 1:00 PM)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, deadline.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toFileString_markedAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime by \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"D | 1 | \" + description + \" | 23 Aug 2020 1:00 PM\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, deadline.toFileString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toString_markedAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime by \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"[D][\\u2713] \" + description + \" (by: 23 Aug 2020 1:00 PM)\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, deadline.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 58
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import duke.utils.DukeDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testGetAt() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime at \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(at, event.getAt());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testToFileString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime at \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"E | 0 | \" + description + \" | 23 Aug 2020 1:00 PM\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, event.toFileString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime at \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"[E][\\u2718] \" + description + \" (at: 23 Aug 2020 1:00 PM)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, event.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toFileString_markedAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime at \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"E | 1 | \" + description + \" | 23 Aug 2020 1:00 PM\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, event.toFileString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toString_markedAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime at \u003d new DukeDateTime(LocalDateTime.parse(\"2020-08-23T13:00\"), true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"[E][\\u2713] \" + description + \" (at: 23 Aug 2020 1:00 PM)\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, event.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 57
    }
  },
  {
    "path": "src/test/java/duke/tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testToFileString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"T | 0 | \" + description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, todo.toFileString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"[T][\\u2718] \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, todo.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toFileString_markedAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"T | 1 | \" + description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, todo.toFileString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toString_markedAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String description \u003d \"description\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"[T][\\u2713] \" + description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, todo.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 42
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final ByteArrayOutputStream OUT_CONTENT \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final PrintStream ORIGINAL_OUT \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final InputStream ORIGINAL_IN \u003d System.in;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    private final String LINE \u003d \"\\t\" + \"_\".repeat(75) + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(new PrintStream(OUT_CONTENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setOut(ORIGINAL_OUT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setIn(ORIGINAL_IN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testShowLine() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(LINE, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testShowGreeting() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.showGreeting();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"Hello from\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                logo +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                \"\\t Hello! I\u0027m Duke\\n\\t What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "                LINE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testShowBye() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + \"\\t Bye. Hope to see you again soon!\\n\" + LINE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testShow() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String message \u003d \"\\t test message\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        ui.show(message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d LINE + message + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, OUT_CONTENT.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void readCommand_nonEmptyInput_returnInput() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String input \u003d \"test command\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setIn(new ByteArrayInputStream(input.getBytes()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(input, ui.readCommand());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void readCommand_emptyInput_returnBye() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        System.setIn(new ByteArrayInputStream(input.getBytes()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(\"bye\", ui.readCommand());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 91
    }
  },
  {
    "path": "src/test/java/duke/utils/DukeDateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "public class DukeDateTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toString_dateWithTime_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020-08-23T13:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime dukeDateTime \u003d new DukeDateTime(dateTime, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"23 Aug 2020 1:00 PM\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, dukeDateTime.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void toString_dateWithoutTime_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDate.parse(\"2020-08-23\").atStartOfDay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime dukeDateTime \u003d new DukeDateTime(dateTime, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        String expected \u003d \"23 Aug 2020\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(expected, dukeDateTime.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void isSameDate_sameDates_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime dateTime1 \u003d LocalDate.parse(\"2020-08-23\").atStartOfDay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime dateTime2 \u003d LocalDateTime.parse(\"2020-08-23T13:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime first \u003d new DukeDateTime(dateTime1, false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime second \u003d new DukeDateTime(dateTime2, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(true, first.isSameDate(second));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void isSameDate_differentDates_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime dateTime1 \u003d LocalDate.parse(\"2020-09-21\").atStartOfDay();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime dateTime2 \u003d LocalDateTime.parse(\"2020-08-23T13:00\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime first \u003d new DukeDateTime(dateTime1, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime second \u003d new DukeDateTime(dateTime2, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(false, first.isSameDate(second));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    public void testCompareTo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime first \u003d LocalDate.parse(\"2020-08-23\").atStartOfDay();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        LocalDateTime second \u003d LocalDateTime.parse(\"2020-08-23T09:00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime firstDuke \u003d new DukeDateTime(first, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        DukeDateTime secondDuke \u003d new DukeDateTime(second, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(-1, firstDuke.compareTo(secondDuke));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(1, secondDuke.compareTo(firstDuke));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "        assertEquals(0, firstDuke.compareTo(firstDuke));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 57
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "T | 0 | do something"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "D | 1 | buy groceries | 24 Aug 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "E | 0 | meeting | 24 Aug 2020 3:00 pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "D | 0 | return book | 06 Sep 2020"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "D | 0 | finish CS2103 | 25 Aug 2020 11:59 pm"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 6
    }
  },
  {
    "path": "text-ui-test/data/testData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "T | 0 | do something"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "D | 1 | buy groceries | 24 Aug 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "E | 0 | meeting | 24 Aug 2020 3:00 pm"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "deadline return book /by 6 September 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "event party /at 7/10/2020 4:00 pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "deadline finish CS2103 /by 25-8-2020 2359"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "find book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "deadline finish something /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "event /at 1/1/2020"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "event concert /at 13/13/2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "find"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "done task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "delete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "delete task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "hello"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "# write initial data into file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "cp ./data/testData.txt ./data/duke.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dianneloh9"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "dianneloh9": 8,
      "-": 36
    }
  }
]
