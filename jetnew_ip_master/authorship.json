[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 19,
      "-": 46
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "T|1|eat chicken"
      }
    ],
    "authorContributionMap": {
      "jetnew": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    LocalDate taskBy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    Deadline(String taskName, LocalDate taskBy) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.taskBy \u003d taskBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return \"[D]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + this.taskBy.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return \"D|\" + (this.isDone ? \"1\" : \"0\") + \"|\" + this.taskName + \"|\" + this.taskBy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Loads the file format String representation of Deadline task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return Deadline loaded from file format representation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static Deadline fromFileFormat(String fileFormatString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] tokens \u003d fileFormatString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Deadline loaded \u003d new Deadline(tokens[2], LocalDate.parse(tokens[3]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            loaded.setDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return loaded;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 39
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 45
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Duke is a chatbot that allows users to send input to perform tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    // GUI variables"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    // Pre-set images"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/chatbot.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates a new Duke chatbot."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Duke() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates a new Duke chatbot and load tasks from storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param filePath path to the storage file to load tasks from"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Load task list from saved file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Create task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String reply(String userInput) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userCommand \u003d userTokens[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // Validate command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Parser.validateCommand(userCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            return \"Sorry, that looks like an invalid command! \" + e.getMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        switch (userCommand) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Exit the program"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                return \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // List the tasks available in taskList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                return taskList.listTasks();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return taskList.searchKeyword(Parser.parseFind(userInput));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return \"Sorry, I can\u0027t perform find for you! \" + e.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Create a to-do task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    String message \u003d taskList.addTask(Parser.parseTodo(userInput));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    storage.save(taskList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return message;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return \"Sorry, I can\u0027t add that todo! \" + e.getMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Create a deadline task (contains \"/by\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    String message \u003d taskList.addTask(Parser.parseDeadline(userInput));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    storage.save(taskList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return message;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return \"Sorry, I can\u0027t add that deadline! \" + e.getMessage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Create a event task (contains \"/at\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    String message \u003d taskList.addTask(Parser.parseEvent(userInput));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    storage.save(taskList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return message;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return \"Sorry, I can\u0027t add that event! \" + e.getMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Mark the identified task as done"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    String message \u003d taskList.setDone(Parser.parseDone(userInput));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    storage.save(taskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return message;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return \"Sorry, I can\u0027t mark that as done! \" + e.getMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            // Delete a task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    String message \u003d taskList.deleteTask(Parser.parseDelete(userInput));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    storage.save(taskList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return message;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    return \"Sorry, I can\u0027t delete that task! \" + e.getMessage();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Runs main conversation loop with Duke chatbot."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // Introduction messages"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke! I\u0027m a chatbot-based To-Do list manager.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        System.out.println(\"My available commands are: todo, deadline, event, done, list, delete, bye\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        System.out.println(\"What can I do for you today? :)\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // Main conversation loop"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            System.out.println(reply(sc.nextLine()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        });"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        });"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        );"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return reply(input);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 252,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    LocalDate taskAt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    Event(String taskName, LocalDate taskAt) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.taskAt \u003d taskAt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + this.taskAt.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return \"E|\" + (this.isDone ? \"1\" : \"0\") + \"|\" + this.taskName + \"|\" + this.taskAt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Loads the file format String representation of Event task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return Event loaded from file format representation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static Event fromFileFormat(String fileFormatString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] tokens \u003d fileFormatString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Event loaded \u003d new Event(tokens[2], LocalDate.parse(tokens[3]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            loaded.setDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return loaded;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 39
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 10
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parse a user input string as a delete command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput - String representation of user input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return integer index of the task in the task list to be deleted"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static String parseFind(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userCommand \u003d userTokens[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Parser.validateCommand(userCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String keyword \u003d userTokens[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parse a user input string as a delete command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput - String representation of user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return integer index of the task in the task list to be deleted"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static int parseDelete(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Parser.validateIdentifier(userInput, userTokens);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Integer.parseInt(userTokens[1]) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parse a user input string as a done command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput - String representation of user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return integer index of the task in the task list to be marked as done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static int parseDone(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Parser.validateIdentifier(userInput, userTokens);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return Integer.parseInt(userTokens[1]) - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parse a user input string as a event command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput - String representation of user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return Event task created from user command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static Event parseEvent(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userCommand \u003d userTokens[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userTask \u003d String.join(\" \", Arrays.copyOfRange(userTokens, 1, userTokens.length));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Parser.validateEvent(userCommand, userTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] taskTokens \u003d userTask.split(\" /at \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String taskName \u003d taskTokens[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        LocalDate taskAt \u003d LocalDate.parse(taskTokens[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Event(taskName, taskAt);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parse a user input string as a deadline command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput - String representation of user input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return Deadline task created from user command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static Deadline parseDeadline(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userCommand \u003d userTokens[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userTask \u003d String.join(\" \", Arrays.copyOfRange(userTokens, 1, userTokens.length));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Parser.validateDeadline(userCommand, userTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] taskTokens \u003d userTask.split(\" /by \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String taskName \u003d taskTokens[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        LocalDate taskBy \u003d LocalDate.parse(taskTokens[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Deadline(taskName, taskBy);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Parse a user input string as a todo command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput - String representation of user input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return Todo task created from user command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static Todo parseTodo(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] userTokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userCommand \u003d userTokens[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String userTask \u003d String.join(\" \", Arrays.copyOfRange(userTokens, 1, userTokens.length));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Parser.validateTask(userCommand, userTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return new Todo(userTask);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Validate a command from the user and throws an exception if invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userCommand - String representation of user\u0027s command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static void validateCommand(String userCommand) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        List\u003cString\u003e validCommands \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                Arrays.asList(\"bye\", \"list\", \"done\", \"todo\", \"deadline\", \"event\", \"delete\", \"find\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!validCommands.contains(userCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DukeException(\"Invalid command: \" + userCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Validate a task from the user and throws an exception if invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userCommand - String representation of user\u0027s command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userTask    - String representation of user\u0027s task"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static void validateTask(String userCommand, String userTask) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (userTask.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DukeException(\"Empty task: \" + userCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Validate a deadline from the user and throws an exception if invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userCommand - String representation of user\u0027s command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userTask    - String representation of user\u0027s task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static void validateDeadline(String userCommand, String userTask) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        validateTask(userCommand, userTask);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!userTask.contains(\"/by\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DukeException(\"Invalid deadline missing \u0027/by\u0027: \" + userTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Validate a event from the user and throws an exception if invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userCommand - String representation of user\u0027s command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userTask    - String representation of user\u0027s task"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static void validateEvent(String userCommand, String userTask) throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        validateTask(userCommand, userTask);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (!userTask.contains(\"/at\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DukeException(\"Invalid event missing \u0027/at\u0027: \" + userTask);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    // TODO: Implement validation for identifier commands, e.g. \u0027done 1\u0027, \u0027delete 2\u0027"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Validate an identifier from the user and throws an exception if invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userInput  - String representation of user\u0027s input"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param userTokens - String array of user\u0027s input separated by spaces"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static void validateIdentifier(String userInput, String[] userTokens) throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (userTokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DukeException(\"Invalid identifier, requires 2 tokens: \" + userInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            Integer.parseInt(userTokens[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            throw new DukeException(\"Invalid identifier, requires integer: \" + userInput);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 161
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // Create /data folder if does not exist"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (f.getParentFile().mkdirs()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            System.out.println(\"Folders created.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        // Create /data/duke.txt if does not exist"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (f.createNewFile()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            System.out.println(\"File created: \" + f.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Saves the list of tasks to disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param taskList - TaskList object to be saved to disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        for (Task t : taskList.tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            fw.write(t.toFileFormat() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Loads the list of tasks from disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @return TaskList object loaded from disk"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            String fileFormatString \u003d s.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            String[] fileTokens \u003d fileFormatString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            switch (fileTokens[0]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    taskList.add(Event.fromFileFormat(fileFormatString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    taskList.add(Deadline.fromFileFormat(fileFormatString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    taskList.add(Todo.fromFileFormat(fileFormatString));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 69
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": " * Task represents a task to be done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    Task(String taskName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Mark the task as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Returns a ticked check-box if done else cross"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return (this.isDone ? \"[✓] \" : \"[✘] \") + this.taskName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public abstract String toFileFormat();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Return true if task name contains keyword else false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return this.taskName.contains(keyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 35
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /* Constructor for loading past task list from storage. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.tasks \u003d taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /* Constructor for initialising new task list. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * List tasks to system output."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String listTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            message +\u003d \"You have no remaining tasks! Cheers!\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            message +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                message +\u003d i + 1 + \".\" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Add a task to list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"  \" + tasks.get(tasks.size() - 1) + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Set the task with given index as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param id index of task to be marked as done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String setDone(int id) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        this.tasks.get(id).setDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"  \" + tasks.get(id) + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Delete the task with given index from the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param id index of task to be deleted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String deleteTask(int id) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Task deletedTask \u003d this.tasks.remove(id);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"Noted. I have removed this task:\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        message +\u003d \"  \" + deletedTask + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Search the list of tasks for tasks that contain a keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param keyword keyword that task names must contain"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String searchKeyword(String keyword) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            message +\u003d \"You have no remaining tasks to search from!\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            message +\u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                if (tasks.get(i).containsKeyword(keyword)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                    message +\u003d i + 1 + \".\" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetnew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 89
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    Todo(String taskName) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return \"T|\" + (this.isDone ? \"1\" : \"0\") + \"|\" + this.taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * Load a todo task from the storage file format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     * @param fileFormatString storage file format string representation of the todo task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetnew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    static Todo fromFileFormat(String fileFormatString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        String[] tokens \u003d fileFormatString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Todo loaded \u003d new Todo(tokens[2]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetnew"
        },
        "content": "            loaded.setDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        return loaded;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 30
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        System.out.println(\"Unable to load from past storage! Created a new storage.\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 5
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 10
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void parseDone() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        int result \u003d Parser.parseDone(\"done 2\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertEquals(result, 1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    void parseTodo() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        Todo result \u003d Parser.parseTodo(\"eat\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetnew"
        },
        "content": "        assertEquals(result.taskName, \"eat\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetnew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetnew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetnew": 17
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetnew"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetnew"
        },
        "content": "deadline return book /by 2020-08-26"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetnew"
        },
        "content": "event project meeting /at 2020-08-27"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetnew"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetnew"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetnew"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetnew"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetnew"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetnew"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetnew"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jetnew": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetnew"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jetnew": 1,
      "-": 20
    }
  }
]
