[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 24
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "b5297ff5-5137-4a30-8671-73e6572c5d7c|T|false|wash clothes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "aa905931-8343-4f90-b280-67374a65f096|D|false|wash car|2011-12-11"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "b6b14887-2a6a-4df4-9e92-d00f8d90f95d|T|false|nothing"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Main class of the Duke bot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initialises a new Duke bot instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.loadFromStorage(storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Runs the bot until an exit command is issued."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.sayHi();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                Command c \u003d Parser.parse(ui.readNextCommand());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 47,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Exception that is thrown by the bot when encountered with invalid actions from the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new exception instance"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param message Error message to be shown to the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Utility class to parse user\u0027s input and convert the input into executable commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Parses user\u0027s input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param inputCommand Input command from the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return An executable command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If command provided is invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] inputArr \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String commandArg \u003d inputArr.length \u003d\u003d 2 ? inputArr[1] : null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        CommandType op;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            op \u003d CommandType.valueOf(inputArr[0].toUpperCase()); // type of operation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            op \u003d CommandType.INVALID;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        switch (op) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new AddCommand(op, commandArg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new DoneCommand(commandArg);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new DeleteCommand(commandArg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new FindCommand(commandArg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case INVALID: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        default:    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khoodehui": 48
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Utility class to read and write data from and to the hard disk."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    File dataDirectory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    String dataDirectoryPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    File dataFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    String dataFilePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initialises a new Storage object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataDirectoryPath \u003d Paths.get(\"data\").toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataDirectory \u003d new File(dataDirectoryPath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataFilePath \u003d Paths.get(\"data\", \"duke.txt\").toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void alertDirectoryNotFound() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        System.out.println(\"Cannot access data directory.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void alertCorruptedData() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        System.out.println(\"Data file is corrupted.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Populates a TaskList with data saved in the hard disk. If the data directory or file does not exist,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * it will be created."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskList List to be populated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void loadData(TaskList taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        dataDirectory.mkdirs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        boolean toLoadFromDataFile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            toLoadFromDataFile \u003d !dataFile.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            alertDirectoryNotFound();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            toLoadFromDataFile \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (toLoadFromDataFile) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(dataFilePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    String[] taskData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    String taskType \u003d taskData[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    Task task \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            task \u003d new ToDo(taskData[0], Boolean.parseBoolean(taskData[2]), taskData[3]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            task \u003d new Deadline(taskData[0], Boolean.parseBoolean(taskData[2]), taskData[3], taskData[4]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            task \u003d new Event(taskData[0], Boolean.parseBoolean(taskData[2]), taskData[3], taskData[4]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    taskList.addTask(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                alertCorruptedData();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void appendData(String data)  {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            FileWriter writer \u003d new FileWriter(dataFilePath, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            writer.write(data);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            alertCorruptedData();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void overwriteData(String data) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            FileWriter writer \u003d new FileWriter(dataFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            writer.write(data);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            alertCorruptedData();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void saveTodo(ToDo task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String line \u003d task.getUniqueId() + \"|\" + task.getTaskType() + \"|\" + task.isDone() + \"|\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + task.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        appendData(line);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void saveDeadline(Deadline task)  {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String line \u003d task.getUniqueId() + \"|\" + task.getTaskType() + \"|\" + task.isDone() + \"|\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + task.getDescription() + \"|\" + task.getTime() + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        appendData(line);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void saveEvent(Event task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String line \u003d task.getUniqueId() + \"|\" + task.getTaskType() + \"|\" + task.isDone() + \"|\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + task.getDescription() + \"|\" + task.getTime() + \"\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        appendData(line);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void doneTask(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(dataFilePath));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            StringBuilder newData \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                if (line.contains(task.getUniqueId())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    line \u003d line.replaceFirst(\"false\", \"true\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                newData.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            overwriteData(newData.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            alertCorruptedData();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(dataFilePath));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            StringBuilder newData \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                if (!line.contains(task.getUniqueId())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    newData.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            overwriteData(newData.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            alertCorruptedData();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 160
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Utility class that handles interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initialises a new Ui object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Show a greeting message to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void sayHi() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String logo \u003d \",--.                           ,--. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \"|  |-.  ,---. ,--.--. ,---.  ,-|  | \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \"| .-. \u0027| .-. ||  .--\u0027| .-. :\u0027 .-. | \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \"| `-\u0027 |\u0027 \u0027-\u0027 \u0027|  |   \\\\   --.\\\\ `-\u0027 | \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + \" `---\u0027  `---\u0027 `--\u0027    `----\u0027 `---\u0027  \\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder message \u003d new StringBuilder(\"Hi I\u0027m\\n\").append(logo).append(\"Please give me something to do.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Shows a farewell message to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void sayBye() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(\"Come back soon!! I\u0027m always bored...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Shows an error message from a DukeException to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param e Exception containing the error message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Outputs a message to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param message Message to be shown to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void botOutput(String message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String divider \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void botOutput(StringBuilder message) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        botOutput(message.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Reads a command from the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Command read from the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String readNextCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "       return sc.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 69
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an add task command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    CommandType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    String taskContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new AddCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskType Type of the task to be created."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskContent Contents of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public AddCommand(CommandType taskType, String taskContent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskContent \u003d taskContent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Executes the command and creates the respective tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the tasks fails to create."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskContent \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"You have to tell me what\u0027s your task!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case TODO: {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            ToDo todo \u003d new ToDo(taskContent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            todo.generateUniqueId();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            tasks.addTask(todo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            storage.saveTodo(todo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            task \u003d todo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case DEADLINE: {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String[] taskContentArr \u003d taskContent.split(\" /by \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (taskContentArr.length \u003c 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                throw new DukeException(\"You need to tell me when this task is due!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Deadline deadline \u003d new Deadline(taskContentArr[0], taskContentArr[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            deadline.generateUniqueId();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            tasks.addTask(deadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            storage.saveDeadline(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            task \u003d deadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case EVENT: {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            String[] taskContentArr \u003d taskContent.split(\" /at \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (taskContentArr.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                throw new DukeException(\"You need to tell me when this event is happening!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Event event \u003d new Event(taskContentArr[0], taskContentArr[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            event.generateUniqueId();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            tasks.addTask(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            storage.saveEvent(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            task \u003d event;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder message \u003d new StringBuilder(\"Alright! I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        message.append(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        message.append(\"\\nNow you have \").append(tasks.size()).append(\" task(s) in your list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(message);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    } "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 76
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Wrapper class for all types of Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the is a problem with the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Checks whether the command is an exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Whether is command is an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 29
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Enum class to encapsulate the different types of commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    TODO, DEADLINE, EVENT, LIST, DONE, DELETE, FIND, BYE, INVALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khoodehui": 9
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a delete task command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final int taskIdx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new DeleteCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskIdx Index of the task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If no task index is provided, or if the format provided is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DeleteCommand(String taskIdx) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.taskIdx \u003d Integer.parseInt(taskIdx);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Invalid arguments provided!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Deletes the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the provided index is not associated with a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskIdx \u003e tasks.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"No task with this ID!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Task task \u003d tasks.getTask(taskIdx);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.deleteTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.deleteTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(\"Noted. I\u0027ve removed this task:\\n\" + task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a command to mark a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final int taskIdx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new DoneCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param taskIdx Index of the task to mark as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If no task index is provided, or if the format provided is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public DoneCommand(String taskIdx) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.taskIdx \u003d Integer.parseInt(taskIdx);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"Invalid arguments provided!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If the provided index is not associated with a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskIdx \u003e tasks.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"No task with this ID!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Task task \u003d tasks.getTask(taskIdx);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.markAsDone(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.doneTask(tasks.getTask(taskIdx));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(\"Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initiates the termination of the bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.sayBye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 26
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a find command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a new FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param keyword Keyword for the search."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException If no keyword is provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public FindCommand(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new DukeException(\"You have to tell me what to search for!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Searches and lists tasks with description containing the keyword."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(tasks.listTasksWithKeyword(keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 38
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an invalid command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Throws an exception that is to be caught by the bot."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws DukeException To signify an invalid command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        throw new DukeException(\"Sorry I don\u0027t know what this means!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a command to list out the current tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Lists out the current tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.botOutput(tasks.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 21
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private LocalDate taskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private LocalTime taskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param by Time that the deadline is due by."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] dateArguments \u003d by.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskDate \u003d LocalDate.parse(dateArguments[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (dateArguments.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"HH[:]mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                taskTime \u003d LocalTime.parse(dateArguments[1], dtf);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            System.out.println(\"Date and time format is invalid.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Create a Deadline from existing data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param uniqueId Unique Id of the deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone Deadline completion status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param by Time that the deadline is due by."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Deadline(String uniqueId, boolean isDone, String description, String by) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(uniqueId, isDone, description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"D\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] dateArguments \u003d by.split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskDate \u003d LocalDate.parse(dateArguments[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (dateArguments.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"HH[:]mm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                taskTime \u003d LocalTime.parse(dateArguments[1], dtf);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            System.out.println(\"Date and time format is invalid.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String formatTaskTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String output \u003d taskDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskTime !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            output +\u003d \", \" + taskTime.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formatTaskTime() + \")\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 84
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing an event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private LocalDate taskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private LocalTime taskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param at Time that the event is happening at."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"E\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] dateArguments \u003d at.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskDate \u003d LocalDate.parse(dateArguments[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (dateArguments.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"HH[:]mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                taskTime \u003d LocalTime.parse(dateArguments[1], dtf);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            System.out.println(\"Date and time format is invalid.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Create an Event from existing data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param uniqueId Unique Id of the event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone Event completion status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param at Time that the event is happening at."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Event(String uniqueId, boolean isDone, String description, String at) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super (uniqueId, isDone, description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.taskType \u003d \"E\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String[] dateArguments \u003d at.split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            taskDate \u003d LocalDate.parse(dateArguments[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (dateArguments.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"HH[:]mm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                taskTime \u003d LocalTime.parse(dateArguments[1], dtf);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            System.out.println(\"Date and time format is invalid.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private String formatTaskTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String output \u003d taskDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (taskTime !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            output +\u003d \", \" + taskTime.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formatTaskTime() + \")\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 85
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Wrapper class for all types of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    protected String uniqueId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new Task object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a Task from existing data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param uniqueId Unique Id of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone Task completion status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Task(String uniqueId, boolean isDone, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.uniqueId \u003d uniqueId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or cross symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Generates a unique id for the task. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void generateUniqueId() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.uniqueId \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setUniqueId(String uniqueId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.uniqueId \u003d uniqueId;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getUniqueId() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return this.uniqueId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 75
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class the holds the tasks provided by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a task list from existing data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param storage Storage object that will load the data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void loadFromStorage(Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        storage.loadData(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void markAsDone(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    } "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Task getTask(int taskIdx) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return tasks.get(taskIdx - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Finds and list tasks with description containing the keyword."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param keyword Keyword for the search."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String listTasksWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                output.append(i).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        output.deleteCharAt(output.length() - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return \"No tasks added yet!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            output.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        output.deleteCharAt(output.length() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 85
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class representing a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a brand new ToDo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        taskType \u003d \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a ToDo from existing data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param uniqueId Unique Id of the todo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param isDone todo completion status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public ToDo(String uniqueId, boolean isDone, String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(uniqueId, isDone, description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        taskType \u003d \"T\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 31
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseDone_noArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DukeException e \u003d assertThrows(DukeException.class, () -\u003e Parser.parse(\"done\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String expectedMessage \u003d \"Invalid arguments provided!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(e.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseDelete_noArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DukeException e \u003d assertThrows(DukeException.class, () -\u003e Parser.parse(\"delete\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String expectedMessage \u003d \"Invalid arguments provided!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(e.getMessage(), expectedMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseBye_validCommand_isExit() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertTrue(c.isExit());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void parseUnknownCommand_invalidCommand() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Command c \u003d Parser.parse(\"nvieovne\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertTrue(c instanceof InvalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 1,
      "-": 36
    }
  }
]
