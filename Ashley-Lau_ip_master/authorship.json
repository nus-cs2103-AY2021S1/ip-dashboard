[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 17,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class that initiates the Duke object. Contains methods to run the duke bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * the appropriate Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // path of the data to be stored"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final Path path \u003d Paths.get(\".\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for Duke object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            this.storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            tasks \u003d new TaskList(storage.getCurrentTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ui.errorMessage(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getGreetingMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return ui.welcomeMessage(tasks.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Sets a timeout for the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @author Shilo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Adapted https://gist.github.com/Shilo/207c7ba4a604b7811b77ff17be8580f3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param runnable Function to be executed after the timeout."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param delay Delay in ms."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static void setTimeout(Runnable runnable, int delay) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Thread.sleep(delay);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Gets the expected response of the bot given the input command by the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Controls the interaction between different classes to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * achieve the bot behavior. Bot stops when \"bye\" command is entered and saving the current"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * task list in the process."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param input Command of the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String response from the bot."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String output \u003d c.executeCommand(tasks, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                setTimeout(()-\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }, 1000);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return ui.errorMessage(e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 84,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFx.html with modifications."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Function to start the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param stage Stage object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stage.setTitle(\"Duke Application\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 39
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafxstyle.DialogBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFx.html with modifications."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/handsomeMan.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/handsomeMan2.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getGreetingMessage(), dukeImage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 56
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class that initiates the Parser object. Reads command in string given by the user and returns"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * the appropriate Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Reads command in string given by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the appropriate Command object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Throws InvalidCommandException if the command is unknown."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param fullCommand String which contains the command from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return Command object of the given command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidCommandException If command is not recognisable."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidCommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String command \u003d tempArray[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new ByeCommand(fullCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(LIST_COMMAND)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(FIND_COMMAND)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (isTask(command)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new AddCommand(fullCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        throw new InvalidCommandException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isTask(String command) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return isDeadlineCommand(command) || isToDoCommand(command) || isEventCommand(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isDeadlineCommand(String command) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return command.equals(DEADLINE_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isToDoCommand(String command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return command.equals(TODO_COMMAND);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isEventCommand(String command) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return command.equals(EVENT_COMMAND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 77
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class that initiates the Storage. Reads the task from the hardware of the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * and saves the task into the hardware the the bye command is given by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String EVENT_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String DEADLINE_COMMAND \u003d \"D\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final String TODO_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private List\u003cString\u003e tasksInString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor which creates the file if the file is not present."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Throws IOException if the given path is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param path Path to store and read the file which contains the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Storage(Path path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            // create directory if directory does not exist"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Path parentPath \u003d path.getParent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Files.createDirectories(parentPath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            // create file if file do not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Files.createFile(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            this.tasksInString \u003d Files.readAllLines(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(\"There is an error with the path you set\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Reads the users hardware to retrieve the list of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the task list in a ArrayList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return taskList Task of the user stored in a ArrayList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidTimeException If format of the time given stored in task list is wrong."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ArrayList\u003cTask\u003e getCurrentTasks() throws InvalidTimeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (String line: tasksInString) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String[] task \u003d line.split(\"#\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String command \u003d task[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            boolean isDone \u003d task[1].equals(\"done\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String description \u003d task[2];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (command.equals(TODO_COMMAND)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList.add(new ToDo(description, isDone));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (command.equals(EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                LocalDateTime date \u003d Time.getFormattedTime(task[3]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList.add(new Event(description, isDone, date));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (command.equals(DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                LocalDateTime date \u003d Time.getFormattedTime(task[3]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList.add(new Deadline(description, isDone, date));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Saves the task in a certain format in the users hardware."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the task list in a ArrayList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String isTaskDone \u003d currentTask.isTaskDone() ? \"done\" : \"notDone\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String description \u003d currentTask.getDescription();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (currentTask instanceof ToDo) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    currentLine +\u003d \"T#\" + isTaskDone + \"#\" + description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (currentTask instanceof Event) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    currentLine +\u003d \"E#\" + isTaskDone + \"#\" + description + \"#\" + ((Event) currentTask).getBy();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (currentTask instanceof Deadline) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    currentLine +\u003d \"D#\" + isTaskDone + \"#\" + description + \"#\" + ((Deadline) currentTask).getBy();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                string.append(currentLine);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    string.append(\"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fw.write(string.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 125
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.TaskCompletedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate a TaskList object. This class contains various methods to interact with the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * user\u0027s task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void markTaskAsDone(int index) throws TaskCompletedException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.get(index).markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Task getSpecificTask(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int getTaskListLength() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Finds task in the current taskList that matches the input keyword."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Return TaskList containing the matching tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param keyword Input keyword from the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return TaskList of the matching tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public TaskList findTask(String keyword) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                matchingTask.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new TaskList(matchingTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Prints out all items in the list and its corresponding status."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String of the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (taskList.size() \u003d\u003d i + 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                string.append(i + 1).append(\". \").append(taskList.get(i).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                string.append(i + 1).append(\". \").append(taskList.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 78
    }
  },
  {
    "path": "src/main/java/duke/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class that provides methods to convert time in a certain format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts the given time from string to a LocalDate time object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param dateString Time in string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return LocalDateTime of the given time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidTimeException If format of the input time given by the user is wrong."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static LocalDateTime getFormattedTime(String dateString) throws InvalidTimeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return LocalDateTime.parse(dateString, formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidTimeException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts the LocalDate time object to a string for easy saving into hardware."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String format of the time to save."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static String convertTimeToSave(LocalDateTime time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return time.format(formatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts the LocalDate time object into a formatted string to display the time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * in a nicer format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String of formatted time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static String toString(LocalDateTime time) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return time.format(formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 52
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate the Ui object. Contains various methods to handle different duke.commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Formats the message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param words Words to be concatenated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @return String formatted message of the given words."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private String messageFormatter(String ... words) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Stream\u003cString\u003e stream \u003d Stream.of(words);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        stream.forEachOrdered(string::append);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        string.append(\"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Prints out the current tasks in list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String welcomeMessage(String taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(\"Hello! I\u0027m Duke! Welcome back!\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"Here are the tasks in your list:\\n\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String byeMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String listMessage(String taskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(\"Here are the tasks in your list:\\n\", taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String errorMessage(String error) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(error);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Prints the done message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param message Prints out the current task that is completed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String markAsDoneMessage(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(\"Nice! I\u0027ve marked this task as done:\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Prints the delete message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param task Prints out the current deleted task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param size Number of tasks in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String deleteMessage(String task, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(\"Noted. I\u0027ve removed this task:\\n\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                task, \"\\nNow you have \", String.valueOf(size), \" tasks in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Prints the the added task message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param task Prints out the added task in list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param size Number of tasks in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String taskMessage(String task, int size) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return messageFormatter(\"Got it. I\u0027ve added this task:\\n\", task,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"\\nNow you have \", String.valueOf(size), \" tasks in the list.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Prints the task that suits the input keyword message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Prints out the task that suits the input keyword."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param size Number of tasks in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String findTaskMessage(String taskList, int size) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return messageFormatter(\"There are not matching task in your list!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return messageFormatter(\"There are \", String.valueOf(size),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    \" matching tasks in your list:\\n\", taskList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 94
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidDeadlineFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidEventFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidToDoFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class that contains duke.commands that can add task to the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Handles cases for event, todo and deadline commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public AddCommand(String fullCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Executes event, todo or deadline commands and makes sure that the format of the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * string is correct."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Throws InvalidCommandException if the command is unknown."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Task list which contains the current task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param ui Ui object to interact with the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param storage Storage object to read or save the task list in the hardware."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidToDoFormatException If todo command format is wrong."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidDeadlineFormatException If deadline command format is wrong."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidTimeException If format of the input time given by the user is wrong."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidCommandException If command does not match event, todo or deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidEventFormatException If event command format is wrong."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidToDoFormatException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            InvalidDeadlineFormatException, InvalidTimeException, InvalidCommandException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            InvalidEventFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assert Parser.isToDoCommand(tempArray[0]) || Parser.isEventCommand(tempArray[0])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                || Parser.isDeadlineCommand(tempArray[0]) : \"Invalid Command\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (Parser.isToDoCommand(tempArray[0])) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidToDoFormatException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String task \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ToDo newToDoTask \u003d new ToDo(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            taskList.addTask(newToDoTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return ui.taskMessage(newToDoTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (Parser.isEventCommand(tempArray[0])) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidEventFormatException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String eventAndDate \u003d fullCommand.substring(6);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String[] eventDateArray \u003d eventAndDate.trim().split(\" /at \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (eventDateArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidEventFormatException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Event newEventTask \u003d new Event(eventDateArray[0], Time.getFormattedTime(eventDateArray[1]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            taskList.addTask(newEventTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return ui.taskMessage(newEventTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (Parser.isDeadlineCommand(tempArray[0])) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidDeadlineFormatException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String deadlineAndDate \u003d fullCommand.substring(9);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String[] deadlineDateArray \u003d deadlineAndDate.trim().split(\" /by \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (deadlineDateArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidDeadlineFormatException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Deadline newDeadlineTask \u003d new Deadline(deadlineDateArray[0], Time.getFormattedTime(deadlineDateArray[1]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            taskList.addTask(newDeadlineTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return ui.taskMessage(newDeadlineTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        throw new InvalidCommandException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 96
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidByeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate the bye command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ByeCommand(String fullCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Executes the bye command, and sends a signal to exit the duke program,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * if there are no errors in the input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Task list which contains the current task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param ui Ui object to interact with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param storage Storage object to read or save the task list in the hardware."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidByeCommandException If the format of bye command is wrong."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String executeCommand(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throws InvalidByeCommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidByeCommandException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return ui.byeMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Abstract class to give the standard behaviors of the duke.commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    protected String fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Command(String fullCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public abstract String executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 21
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.IncorrectDeleteInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidDeleteFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate the delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Executes the delete command, and deletes the task form the list,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * if there are no errors in the input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Task list which contains the current task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param ui Ui object to interact with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param storage Storage object to read or save the task list in the hardware."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidDeleteFormatException If the format of delete command is wrong."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IncorrectDeleteInputException If the string after delete command is not a number or does"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * not fall within the valid range."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidDeleteFormatException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            IncorrectDeleteInputException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidDeleteFormatException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        int itemIndex \u003d convertToNumber(tempArray[1], taskList.getTaskListLength()) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (itemIndex \u003c 0 || Integer.parseInt(tempArray[1]) \u003e taskList.getTaskListLength()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDeleteInputException(taskList.getTaskListLength());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Task deletedTask \u003d taskList.getSpecificTask(itemIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.deleteTask(itemIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return ui.deleteMessage(deletedTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts a given string to a number."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the number in int form."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param number Item to convert to int."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskSize Size of the current task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IncorrectDeleteInputException If the string after delete command is not a number or does"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * not fall within the valid range."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int convertToNumber(String number, int taskSize) throws IncorrectDeleteInputException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return Integer.parseInt(number);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDeleteInputException(taskSize);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 67
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.IncorrectDoneInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidDoneFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.TaskCompletedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate the done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Executes the done command, and deletes the task form the list,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * if there are no errors in the input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Task list which contains the current task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param ui Ui object to interact with the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param storage Storage object to read or save the task list in the hardware."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidDoneFormatException If the format of done command is wrong."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IncorrectDoneInputException If the string after done command is not a number or does"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * not fall within the valid range."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidDoneFormatException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            IncorrectDoneInputException, TaskCompletedException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidDoneFormatException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        int itemIndex \u003d convertToNumber(tempArray[1], taskList.getTaskListLength()) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (itemIndex \u003c 0 || Integer.parseInt(tempArray[1]) \u003e taskList.getTaskListLength()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDoneInputException(taskList.getTaskListLength());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.markTaskAsDone(itemIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return ui.markAsDoneMessage(taskList.getSpecificTask(itemIndex).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Converts a given string to a number."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Returns the number in int form."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param number Item to convert to int."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskSize Size of the current task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws IncorrectDoneInputException If the string after delete command is not a number or does"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * not fall within the valid range."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int convertToNumber(String number, int taskSize) throws IncorrectDoneInputException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return Integer.parseInt(number);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDoneInputException(taskSize);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 66
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidFindFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate the find command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Executes the find command, and finds the items in the task list, then prints"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * the matching task list, if there are no errors in input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Task list which contains the current task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param ui Ui object to interact with the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param storage Storage object to read or save the task list in the hardware."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidFindFormatException If the format of find command is wrong."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String executeCommand(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throws InvalidFindFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidFindFormatException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String keyword \u003d fullCommand.substring(5).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        TaskList matchingTaskList \u003d taskList.findTask(keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return ui.findTaskMessage(matchingTaskList.toString(), matchingTaskList.getTaskListLength());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidListCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate the list command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Executes the list command, and prints out the list of items in the task list,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * if there are no errors in the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param taskList Task list which contains the current task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param ui Ui object to interact with the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @param storage Storage object to read or save the task list in the hardware."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * @throws InvalidListCommandException If the format of list command is wrong."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidListCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidListCommandException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return ui.listMessage(taskList.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 38
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to give the standard behaviors of the duke duke.exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/IncorrectDeleteInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate IncorrectDeleteInputException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the input to delete command is not in range or not a number."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class IncorrectDeleteInputException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public IncorrectDeleteInputException(int listSize) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"Input for delete command is invalid! Input a number between 1 and \" + listSize + \".\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/IncorrectDoneInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate IncorrectDoneInputException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the input to done command is not in range or not a number."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class IncorrectDoneInputException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public IncorrectDoneInputException(int listSize) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"Input for done command is invalid! Input a number between 1 and \" + listSize + \".\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidByeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidByeCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when there are extra input after the bye command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidByeCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidByeCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"bye command is invalid! Input \\\"bye\\\" to exit\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when input command does not match any of the existing duke.commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Sorry I do not understand this command!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDeadlineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidDeadlineFormatException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the format for deadline command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidDeadlineFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for InvalidDeadlineFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidDeadlineFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of deadline command seems to be wrong.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"Try the following format: deadline task /by YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDeleteFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidDeleteFormatException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the format for delete command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidDeleteFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidDeleteFormatException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Format for delete command doesnt seem to be correct. Eg. delete 2\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDoneFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidDoneFormatException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the format for done command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidDoneFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidDoneFormatException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Format for done command doesnt seem to be correct. Eg. done 2\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 12
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidEventFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidEventFormatException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the format for event command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidEventFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for InvalidEventFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidEventFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of event command seems to be wrong.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"Try the following format: event task /at YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidFindFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidFindFormatException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the format for find command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidFindFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for InvalidFindFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidFindFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of find command seems to be wrong.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"Try the following format: find keyword\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidListCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidListCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when there are extra input after the list command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidListCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidListCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"list command is invalid! Input \\\"list\\\" to show task in the task list.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidTimeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the input time for event and deadline command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidTimeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for InvalidTimeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidTimeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of your input time seems to be wrong.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"Try the following time format: YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidToDoFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate InvalidToDoCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the format for todo command is wrong."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidToDoFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidToDoFormatException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskCompletedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate TaskCompletedException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Thrown when the task is already done and the user wants to mark this task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * as done again."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class TaskCompletedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public TaskCompletedException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Task is already done!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 12
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html with modifications"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate a deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final LocalDateTime activityTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Deadline(String description, LocalDateTime activityTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.activityTime \u003d activityTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Another Constructor for deadline with another parameter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime activityTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.activityTime \u003d activityTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Time.convertTimeToSave(activityTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + Time.toString(activityTime) + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 40
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate a Event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final LocalDateTime activityTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Event(String description, LocalDateTime activityTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.activityTime \u003d activityTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for Event with additional argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime activityTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.activityTime \u003d activityTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Time.convertTimeToSave(activityTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + Time.toString(activityTime) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 37
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.TaskCompletedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html with modifications"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate Task and provides the basic behaviors for its children classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Constructor for Task with additional parameter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Marking the current task as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void markAsDone() throws TaskCompletedException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new TaskCompletedException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return \u0027[\u0027 + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 57
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Class to initiate a ToDo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 20
    }
  },
  {
    "path": "src/main/java/javafxstyle/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package javafxstyle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Reused from https://se-education.org/guides/tutorials/javaFx.html with modifications."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 63
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        \u003cGridPane AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" minHeight\u003d\"41.0\" minWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\"  GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" minHeight\u003d\"41.0\" minWidth\u003d\"76.0\" text\u003d\"Send\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" fitToWidth\u003d\"true\" vvalue\u003d\"1.0\" maxHeight\u003d\"Infinity\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.columnSpan\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                        \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 32
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if ByeCommand is being outputted when bye is inputted\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseByeCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"bye\").getClass(), ByeCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if ListCommand is being outputted when list is inputted\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseListCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"list\").getClass(), ListCommand.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if DoneCommand is being outputted when done is inputted\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseDoneCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"done 2\").getClass(), DoneCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if DeleteCommand is being outputted when delete is inputted\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseDeleteCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"delete\").getClass(), DeleteCommand.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if AddCommand is being outputted when the deadline, event and todo command is inputted\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseAddCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"event read book\").getClass(), AddCommand.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"todo read book\").getClass(), AddCommand.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"deadline read book\").getClass(), AddCommand.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if isTask, isDeadline, isToDo and isEvent methods are working\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseMiscellaneousCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isEventCommand(\"event\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isDeadlineCommand(\"deadline\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isToDoCommand(\"todo\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isTask(\"todo\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if InvalidCommandException is thrown if a invalid command is inputted\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseInvalidCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(InvalidCommandException.class, ("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ) -\u003e Parser.parse(\"blah\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 67
    }
  },
  {
    "path": "src/test/java/tasks/EventTester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class EventTester {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Testing getByTiming in event class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing getBy method in Event class\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void testGetByTiming() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"2020-02-02 12:12\", formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Assertions.assertEquals(new Event(\"test\", testDate).getBy(), \"2020-02-02 12:12\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     * Testing toString in event class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing toString method in Event class\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"2020-12-12 12:12\", formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(new Event(\"read book\", testDate).toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"[E][✘] read book (at: Dec 12 2020 12:12)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "todo CS2100"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "todo CS2101"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "event rotaract club presentation /at 2019-12-20 09:10"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "deadline CS2103 quiz /by mon 19:10"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "deadline CS2103 quiz /by 2019-12-21 19:10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done s"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "event /at Tues 8am"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "deadline /at Mon 12am"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "blah"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "bye 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list 33"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 3,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 1,
      "-": 37
    }
  }
]
