[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Contains the main method to run duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor of duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires a file path of String type to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * initiate storage for loading local saved tasks, if a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * saved list is not found, it will automatically create a new"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * empty list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param filePath A file path of the task list file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Main body of duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It first shows a welcoming message and will"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * runs until an exit command is detected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                c.execute(tasks, storage, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        new Duke(\".\" + File.separator + \"data\" + File.separator).run();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 66,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An enumeration of different types of existing commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * for duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public enum DukeCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    LIST(\"list\", 100, ListCommand.class),DATE(\"date\",101, DateCommand.class),FIND(\"find\",102, FindCommand.class),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    TODO(\"todo\", 200, TodoCommand.class),DEADLINE(\"deadline\", 201, DeadlineCommand.class),EVENT(\"event\", 201, EventCommand.class),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    DONE(\"done\", 300, DoneCommand.class),DELETE(\"delete\", 301, DeleteCommand.class),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    BYE(\"bye\", 400, ByeCommand.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Class\u003c?\u003e commandClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private DukeCommand(String command, int index, Class\u003c?\u003e commandClass) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getCommand() { return command; }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setCommand(String command) { this.command \u003d command; }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getIndex() { return index; }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setIndex(int index) { this.index \u003d index; }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Class\u003c?\u003e getCommandClass() { return commandClass; }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setCommandClass(Class\u003c?\u003e commandClass) { this.commandClass \u003d commandClass; }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 39
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A parser to read the command lines detected and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * determine which type of command it is refering to."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Parse the input command and returns the command object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * if the command is valid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It will take the first part of the command line and search through"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * an enumeration of commands to check if such command exists, if it does,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * it will create command object according to the command type and store the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * original command in it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * If such command does not exists, DukeParseException will be thrown and caught, then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * an \u0027invalid command\u0027 message will be send though the ui to alert the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param inputCommand Detected command line of string type"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return The command detected with input command stored in it"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeParseException If invalid command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(inputCommand \u003d\u003d null || inputCommand.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeParseException(\"Empty command!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String commandName \u003d inputCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        boolean isCommand \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String className \u003d \"duke.command.\" + Character.toUpperCase(commandName.charAt(0)) + commandName.substring(1) + \"Command\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for(DukeCommand comm: DukeCommand.values()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if(commandName.equals(comm.getCommand())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    command \u003d (Command) Class.forName(className).getConstructor(String.class).newInstance(inputCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    isCommand \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeParseException(\"Unable to load command.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(isCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeParseException(\"Command \u0027\" + commandName + \"\u0027 not found!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 57
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.util.SerializeUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A storage class to handle the loading and save of the tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Storage{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private final String FILENAME \u003d \"saved.duke\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor of storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It requires a path of the saving directory to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * save/load tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param path Path of saving directory"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Load the tasks from local disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Using the path provided, try to load the tasks and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * deserialize it to TaskList object, if it does not exist, a new arraylist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * will be created."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return A list of tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeStorageException If fails to find or deserialize the list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeStorageException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            File file \u003d new File(this.path + this.FILENAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(file.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                list \u003d (ArrayList\u003cTask\u003e) SerializeUtil.deserialize(fis.readAllBytes());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeStorageException(\"Failed to load saved list.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Saves the current list of tasks on local disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The list of tasks will be saved in the directory according to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * the path given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param tasks TaskList to be stored"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeStorageException If fails to create file or serialize the tasklist object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void save(TaskList tasks) throws DukeStorageException{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            File tempFile \u003d new File(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(!tempFile.exists()){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                tempFile.mkdirs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            File file \u003d new File(this.path + this.FILENAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            byte[] serializedData \u003d SerializeUtil.serialize(tasks.getList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            fos.write(serializedData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeStorageException(\"Failed to save changes.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 88
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A tasklist to store a list of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private List\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public List\u003cTask\u003e getList() { return list; }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setList(List\u003cTask\u003e list) { this.list \u003d list; }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 24
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An ui to send message to user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sends a welcoming message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        System.out.println(\"        Hello! I\u0027m duke.Duke\\n\" + \"        What can I do for you?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Reads a line from the terminal and return it as a string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return command line detected"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String readCommand() { return scanner.nextLine(); }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Prints a line to alert failure to load."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        System.out.println(\"        Failed to load\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Standard spacing line used for duke interactions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void showLine() { System.out.println(\"        ____________________________________________________________\"); }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sends a message with fixed spacing before the string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param msg Message to be sent"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        System.out.println(\"        \" + msg);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Sends an error message with the standard spacing in front."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param errorMsg Error message to be sent"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void showError(String errorMsg) { System.out.println(\"        \" + errorMsg); }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ByeCommand(String inputCommand) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ui.printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 22
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class to store commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Can be extended to implement different type of commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * and their specific ways of operating by overriding the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * execute method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * A public constructor for a command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires an input command in the form of \u003ccode\u003e[commandType] [arguments if any]\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param inputCommand A command line of String type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Command(String inputCommand) { this.inputCommand \u003d inputCommand; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Executes the command in field : inputCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Execute the stored command line according to its command type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * The current list of tasks will be retrieved from list and outputs will"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * be printed using ui provided, then the changes made will be stored via storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * if necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param list A TaskList of tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param storage storage used to handle load/save requests"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param ui the ui used to interact with user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeCommandException  If the command received has incorrect format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws DukeStorageException  If fails to save changes made to the list of tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public abstract void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Return true if the current command is an exit command. i.e. \u0027bye\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Whether the command is an exit command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getInputCommand() { return inputCommand; }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setInputCommand(String inputCommand) { this.inputCommand \u003d inputCommand; }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 54
    }
  },
  {
    "path": "src/main/java/duke/command/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DateCommand extends Command{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DateCommand(String inputCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"date [0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027date\u0027 command format!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String dateString \u003d getInputCommand().split(\" \")[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Here are the tasks of date \" + date + \":\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int ctr \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for(Task task: list.getList()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if(task instanceof Deadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Deadline deadline \u003d (Deadline)task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    LocalDateTime deadlineTime \u003d deadline.getBy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    if(date.getYear() \u003d\u003d deadlineTime.getYear() \u0026\u0026 date.getDayOfYear() \u003d\u003d deadlineTime.getDayOfYear()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        ui.printMessage(\"\"+ctr + \".\"+ task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        ctr++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if(task instanceof Event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Event event \u003d (Event)task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    LocalDateTime eventTime \u003d event.getAt();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    if(date.getYear() \u003d\u003d eventTime.getYear() \u0026\u0026 date.getDayOfYear() \u003d\u003d eventTime.getDayOfYear()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        ui.printMessage(\"\"+ctr + \".\"+ task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        ctr++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 57
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeadlineCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DeadlineCommand(String inputCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"deadline ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*) /by [0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4} [0-9]{4,4}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] s \u003d getInputCommand().substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Deadline deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                deadline \u003d new Deadline(s[0], LocalDateTime.parse(s[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeCommandException(\"Invalid date!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.getList().add(deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(deadline.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Now you have \" + list.getList().size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.save(list);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DeleteCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"delete [1-9][0-9]{0,}\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027delete\u0027 command format!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int index \u003d Integer.parseInt(\"\"+getInputCommand().charAt(7)) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(list.getList().size() \u003e index \u0026\u0026 index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Task tas \u003d list.getList().get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                list.getList().remove(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(tas.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                storage.save(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeCommandException(\"\\u2639 OOPS!!! There isn\u0027t a task with that index!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DoneCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"done [1-9][0-9]{0,}\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027done\u0027 command format!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int index \u003d Integer.parseInt(\"\"+getInputCommand().charAt(5)) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(list.getList().size() \u003e\u003d index \u0026\u0026 index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Task tas \u003d list.getList().get(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                tas.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(tas.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                storage.save(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 39
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public EventCommand(String inputCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"event ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*) /at [0-9]{1,2}/[0-9]{1,2}/[0-9]{4,4} [0-9]{4,4}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] s \u003d getInputCommand().substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                event \u003d new Event(s[0], LocalDateTime.parse(s[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeCommandException(\"Invalid date!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.getList().add(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(event.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Now you have \" + list.getList().size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.save(list);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 48
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public FindCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"find ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027find\u0027 command format!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String matchingString \u003d getInputCommand().substring(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(list.getList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"There is nothing in match!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                int ctr \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                for(Task task: list.getList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    if(task.getDescription().contains(matchingString)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        ui.printMessage(\"\" + ctr + \".\" + task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        ctr++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public ListCommand(String inputCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(this.getInputCommand().split(\" \").length !\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027list\u0027 command parameters!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(list.getList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"There is nothing in the list!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int ctr \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for(Task task: list.getList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ui.printMessage(\"\" + ctr + \".\" + task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                ctr++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 37
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TodoCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public TodoCommand(String inputCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void execute(TaskList list, Storage storage, Ui ui) throws DukeCommandException, DukeStorageException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"todo ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(getInputCommand()).matches()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeCommandException(\"\\u2639 OOPS!!! Wrong \u0027todo\u0027 command format!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Todo todo \u003d new Todo(getInputCommand().substring(5));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            list.getList().add(todo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(todo.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ui.printMessage(\"Now you have \" + list.getList().size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            storage.save(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 39
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An indication of command line errors due to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * command line format issues and empty lists."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeCommandException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DukeCommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * Exception specially designed for duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An indication of parsing errors due to invalid"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * date/time string format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeParseException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DukeParseException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * An indication of file handling error and IO error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeStorageException extends DukeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public DukeStorageException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for task of deadline type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor for a deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires an description and a time of the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * deadline of LocalDateTime form."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param description Describes the deadline task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param by Date/time of the deadline task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public LocalDateTime getBy() { return by; }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setBy(LocalDateTime by) { this.by \u003d by; }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for task of event type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor for a event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Requires an description and a time of the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * event of LocalDateTime form."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param description Describes the event task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param at Date/time of the event task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public LocalDateTime getAt() { return at; }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setAt(LocalDateTime at) { this.at \u003d at; }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for different types of class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Public constructor for a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * It takes a description as argument as all valid tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * should have a description. The task is set to be undone"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * by default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param description A string describing the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Returns the status icon"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Status icon in unicode"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * If invoked, the task will be marked as done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * by setting the isDone flag to true."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setDescription(String description) { this.description \u003d description; }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isDone() { return isDone; }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setDone(boolean done) { isDone \u003d done; }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A class for task of todo type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 16
    }
  },
  {
    "path": "src/main/java/duke/util/SerializeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * A utility class designed to serialize/deserialize obects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " * that are serializable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class SerializeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Serialize an object in to byte array."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param object Obect to be serialized"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return serialized object in the form of byte array"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static byte[] serialize(Object object) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ObjectOutputStream oos \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ByteArrayOutputStream baos \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        byte[] bytes \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            oos \u003d new ObjectOutputStream(baos);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            oos.writeObject(object);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            bytes \u003d baos.toByteArray();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.err.println(\"Failed to serialize \" + e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return bytes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * Deserialize byte array into an object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @param bytes An byte array to be deserialized"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @return Object of deserialized byte array"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws IOException If stream fails to read"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     * @throws ClassNotFoundException If class not found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static Object deserialize(byte[] bytes) throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ByteArrayInputStream bais \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        ObjectInputStream ois \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            bais \u003d new ByteArrayInputStream(bytes);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ois \u003d new ObjectInputStream(bais);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.err.println(\"Failed to deserialize \" + e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return ois.readObject();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 53
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String path \u003d java.nio.file.Paths.get( \"src\", \"test\").toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test1(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline homework 3am\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\", message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\", message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test3(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline homework /at 12/12/2020 1234\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\", message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test4(){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new DeadlineCommand(\"deadline homework /by 12/12/2020 1234\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(null, message);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 87
    }
  },
  {
    "path": "src/test/java/duke/command/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String path \u003d java.nio.file.Paths.get( \"src\", \"test\").toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test1(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\", message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event party\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\", message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event party /by 12/12/2020 1234\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\", message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new EventCommand(\"event party /at 12/12/2020 1234\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(null, message);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 87
    }
  },
  {
    "path": "src/test/java/duke/command/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import duke.exception.DukeStorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String path \u003d java.nio.file.Paths.get( \"src\", \"test\").toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test1(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new TodoCommand(\"todo\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(\"\\u2639 OOPS!!! Wrong \u0027todo\u0027 command format!\", message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Storage storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Command command \u003d new TodoCommand(\"todo homework\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String message \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            command.execute(taskList, storage, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } catch (DukeStorageException | DukeCommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        assertEquals(null, message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 51
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo aaa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline bbb /by 12/12/2020 1000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline bbb /by 13/12/2020 1200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event ccc /at 12/12/2020 1600"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event ddd /at 13/13/2020 1700"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event eee /at 13/12/2020 2359"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "date 12/12/2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\util\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "java -classpath ..\\bin\\duke\\ Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 4,
      "-": 19
    }
  }
]
