[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 1,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "T|0|sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "D|0|project|13/1/2013 1320"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "E|1|concert|15/1/2014 1102"
      }
    ],
    "authorContributionMap": {
      "afroneth": 3
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for ByeCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to exit Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskList Array of tasks that we have parsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // Exit program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return boolean true to signal exit from Duke program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 27
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Abstract class for all command classes."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String typeOfCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets the specific command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return The specific command in String."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getCommandType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return typeOfCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs the specific command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskList Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public abstract void runCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return boolean True only if command is a ByeCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public abstract boolean exitCheck();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 32
    }
  },
  {
    "path": "src/main/java/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Formats date for output."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String[] ARRAY_MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Date object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param date Date from input file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] dateElements \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.day \u003d Integer.parseInt(dateElements[0]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.month \u003d Integer.parseInt(dateElements[1]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.year \u003d Integer.parseInt(dateElements[2]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String formattedDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (day % 10 \u003d\u003d 1 \u0026\u0026 day !\u003d 11) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"st\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if ((day % 10 \u003d\u003d 2 \u0026\u0026 day !\u003d 12)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"nd\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if (day % 10 \u003d\u003d 3 \u0026\u0026 day !\u003d 13) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"rd\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"th\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        formattedDate \u003d formattedDate + \" of \" + ARRAY_MONTHS[month - 1] + \" \" + year;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return formattedDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 43
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for Deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Date deadlineDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Timing deadlineTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Deadline object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Deadline(String description, String deadlineDate) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineDate \u003d new Date(deadlineDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Deadline object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineTime Time of deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Deadline(String description, String deadlineDate, String deadlineTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineDate \u003d new Date(deadlineDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineTime \u003d new Timing(deadlineTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Deadline object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param boolDone 1 if it is a done command, 0 if it is not a done command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineTime Time of deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Deadline(int boolDone, String description, String deadlineDate, String deadlineTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.DEADLINE, boolDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineDate \u003d new Date(deadlineDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineTime \u003d new Timing(deadlineTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Date of deadline object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return deadlineDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Timing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Timing of deadline object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Timing getTiming() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return deadlineTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return super.toString() + \" (by: \" + deadlineDate.toString() + \", \" + deadlineTime.toString() + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 70
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for DeadlineCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task deadlineTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DeadlineCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineTime Time of deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DeadlineCommand(String description, String deadlineDate, String deadlineTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineTask \u003d new Deadline(description, deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle deadline command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.addedMessage(deadlineTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.addTask(deadlineTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 41
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for DeleteCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected int taskIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DeleteCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Index of task to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle delete command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (taskIndex \u003c 0 || taskIndex \u003e\u003d arraySize) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"The task number\" + \" (\" + (taskIndex + 1) + \") \" + \"that you want to \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"delete can not be found in your list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task taskToDelete \u003d arrayOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.removeMessage(taskToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 46
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for DoneCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected int taskIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DoneCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Index of task to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle done command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (taskIndex \u003c 0 || taskIndex \u003e\u003d arraySize) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"The task number\" + \" (\" + (taskIndex + 1) + \") \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"that you have input can not be found in your list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.get(taskIndex).setDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task doneTask \u003d arrayOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.doneMessage(doneTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Since this is not a exit command, it does not signal the program to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 45
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Main driver class for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected TaskList arrayOfTasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Duke object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param path File path giving the location of the input file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Loads input file and starts parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            TaskList inputArray \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            arrayOfTasks \u003d inputArray;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            arrayOfTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Unable to load data from \u0027duke.txt\u0027. Please ensure that you have\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \" a \u0027data\u0027 folder that contains \u0027duke.txt\u0027 in project directory.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Command parsedCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String command \u003d ui.parseInput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (command !\u003d null \u0026\u0026 !isDone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                parsedCommand \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                isDone \u003d parsedCommand.exitCheck();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                parsedCommand.runCommand(arrayOfTasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                System.err.println(error);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                // Do nothing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                command \u003d ui.parseInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.exitProgram();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (!storage.isStorageChanged()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            // Do nothing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                storage.saveToDisk(arrayOfTasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                ui.printBorder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                System.out.println(\"Tasks have been successfully saved to duke.txt!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                System.err.println(\"Tasks cannot be saved to specified file path(\u0027data/duke.txt\u0027). Please ensure \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                   + \"that there is a \u0027data\u0027 folder containing \u0027duke.txt\u0027 and try again.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates and run Duke program."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param args CMD arguments"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Duke runDuke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        runDuke.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 76,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements exception methods for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DukeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param errorMessage Error message to be displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 24
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for Event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Date eventDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Timing eventTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Event(String description, String eventTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTime \u003d new Timing(eventTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructor to instantiate Event object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventDate Date of event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Event(String description, String eventDate, String eventTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventDate \u003d new Date(eventDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTime \u003d new Timing(eventTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructor to instantiate Event object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param boolDone 1 if it is a done command, 0 if it is not a done command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventDate Date of event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Event(int boolDone, String description, String eventDate, String eventTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.EVENT, boolDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventDate \u003d new Date(eventDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTime \u003d new Timing(eventTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Date of event object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Timing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Timing of event object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Timing getTiming() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return super.toString() + \" (at: \" + eventDate.toString() + \", \" + eventTime.toString() + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 70
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for EventCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task eventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates EventCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventDate Date of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EventCommand(String description, String eventDate, String eventTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTask \u003d new Event(description, eventDate, eventTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle event command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.addedMessage(eventTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.addTask(eventTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 41
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for FindCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates FindCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param keyword Keyword used to find matching tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle find command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        TaskList matchedTasksList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (index \u003c arraySize) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Task matchedTask \u003d arrayOfTasks.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String[] splitElements \u003d matchedTask.description.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int numOfElements \u003d splitElements.length;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            boolean isMatching \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int secondIndex \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            while (secondIndex \u003c numOfElements) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (splitElements[secondIndex].strip().equalsIgnoreCase(keyword)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    isMatching \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                secondIndex++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (!isMatching) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                // Do nothing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                matchedTasksList.addTask(matchedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (matchedTasksList.taskArraySize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            ui.noMatchMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            ui.matchingMessage(matchedTasksList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 64
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for ListCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle list command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (arraySize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"There is nothing to list as the list is currently empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                System.out.println(\"These are the tasks in your list:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                ui.listTasks(arrayOfTasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.err.println(error);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 37
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " *  Parses user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parse method to handle all types of commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputLine Description of the input command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Command object that has been specified by input file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static Command parse(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Command newTaskObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] userInputArray \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String commandCheck \u003d userInputArray[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int numOfInput \u003d userInputArray.length;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        switch (commandCheck) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d new ByeCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (numOfInput \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Please specify which task you have completed.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                Integer.parseInt(userInputArray[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Please input task index as a valid integer.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int indexOfDoneTask \u003d Integer.parseInt(userInputArray[1]) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d new DoneCommand(indexOfDoneTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"☹ Oh no! The description of a todo task cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            StringBuilder todoString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int j \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            while (j \u003c numOfInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                todoString.append(userInputArray[j]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                todoString.append(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String outputTodoDesc \u003d todoString.toString().trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d new TodoCommand(outputTodoDesc);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    throw new DukeException(\"☹ Oh no! The description of an event task cannot be empty.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (numOfInput \u003c 4) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    throw new DukeException(\"☹ Oh no! The correct way to log an event is: (event) \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + \"(description) (/at) (date)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                boolean checkForEvent \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                StringBuilder eventString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                StringBuilder eventDateField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                StringBuilder eventTimingField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String trimmedEvent \u003d inputLine.split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String[] splitElements \u003d trimmedEvent.split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                int numOfElements \u003d splitElements.length;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (numOfElements !\u003d 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    throw new DukeException(\"Date and Timing fields has not been specified correctly. \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                            + \"Please try again!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                int z \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                while (z \u003c numOfInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    if (userInputArray[z].equals(\"/at\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        checkForEvent \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        if (!checkForEvent) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            eventString.append(userInputArray[z]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            eventString.append(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            if (z \u003d\u003d numOfInput - 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                eventTimingField.append(userInputArray[z]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                eventDateField.append(userInputArray[z]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    z++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String outputEventDesc \u003d eventString.toString().trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String outputEventDate \u003d eventDateField.toString().trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String outputEventTime \u003d eventTimingField.toString().trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                newTaskObject \u003d new EventCommand(outputEventDesc, outputEventDate, outputEventTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Error encountered while parsing event command. Please ensure \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"that your event command is in the following format: \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"(event) (description) (/at) (date).\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    throw new DukeException(\"☹ Oh no! The description of a deadline task \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + \"cannot be empty.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (numOfInput \u003c 4) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    throw new DukeException(\"☹ Oh no! The correct way to log a deadline is: (deadline) \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + \"(description) (/by) (date)\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                boolean checkForDate \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                StringBuilder deadlineString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                StringBuilder dateField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                StringBuilder timingField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String trimmedDeadline \u003d inputLine.split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String[] splitElements1 \u003d trimmedDeadline.split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                int noOfElements \u003d splitElements1.length;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (noOfElements !\u003d 2) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    throw new DukeException(\"Date and Timing fields has not been specified correctly. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + \"Please try again!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                int m \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                while (m \u003c numOfInput) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    if (userInputArray[m].equals(\"/by\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        checkForDate \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        if (!checkForDate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            deadlineString.append(userInputArray[m]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            deadlineString.append(\" \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            if (m \u003d\u003d numOfInput - 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                timingField.append(userInputArray[m]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                dateField.append(userInputArray[m]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    m++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String outputDeadlineDesc \u003d deadlineString.toString().trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String outputDeadlineDate \u003d dateField.toString().trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String outputDeadlineTime \u003d timingField.toString().trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                newTaskObject \u003d new DeadlineCommand(outputDeadlineDesc, outputDeadlineDate, outputDeadlineTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Error encountered while parsing deadline command. Please ensure \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"that your deadline command is in the following format: \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"(deadline) (description) (/by) (date).\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (numOfInput \u003c 2) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Please specify which task you wish to delete.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                Integer.parseInt(userInputArray[1]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Please input task index as a valid integer.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String indexToDelete \u003d inputLine.split(\" \")[1];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int indexOfTemp \u003d Integer.parseInt(indexToDelete);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int currentTaskIndex \u003d indexOfTemp - 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d new DeleteCommand(currentTaskIndex);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String[] arrayOfElements \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int numOfTokens \u003d arrayOfElements.length;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (numOfTokens \u003c 2) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Please specific keyword to locate task. Eg. find book\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String tempString \u003d inputLine.split(\"find\")[1];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String strippedKeyword \u003d tempString.strip();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d new FindCommand(strippedKeyword);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Catastrophe detected! I\u0027m sorry, but \u0027\" + commandCheck"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"\u0027 is not within my realm of knowledge. ☹\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return newTaskObject;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 199
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " *  Deals with saving and loading tasks from input path."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isFileChanged \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Storage object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param path Filepath to load and read input file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses strings from input text file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return ArrayList that contains the parsed strings from input text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            ArrayList\u003cTask\u003e outputTaskArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileReader fileToRead \u003d new FileReader(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileToRead);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String inputData \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            while (inputData !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String taskDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String taskTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String[] dateTimeArray;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String[] userInputArray \u003d inputData.split(\"\\\\|\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                int boolDone \u003d Integer.parseInt(userInputArray[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String descriptions \u003d userInputArray[2];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                switch (userInputArray[0]) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Todo newTodo \u003d new Todo(descriptions, boolDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputTaskArray.add(newTodo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    dateTimeArray \u003d userInputArray[3].split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    taskDate \u003d dateTimeArray[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    taskTime \u003d dateTimeArray[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Deadline newDeadline \u003d new Deadline(boolDone, descriptions, taskDate, taskTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputTaskArray.add(newDeadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    dateTimeArray \u003d userInputArray[3].split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    taskDate \u003d dateTimeArray[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    taskTime \u003d dateTimeArray[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Event newEvent \u003d new Event(boolDone, descriptions, taskDate, taskTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputTaskArray.add(newEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                inputData \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return outputTaskArray;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (Exception error) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\u0027duke.txt\u0027 cannot be loaded from the specified file path. Please try again.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Saves parsed strings to output text file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that contains all tasks read from input text file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void saveToDisk(TaskList arrayOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String outputLine \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int sizeOfArray \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int isDone;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            while (index \u003c sizeOfArray) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                Task task \u003d arrayOfTasks.get(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (task.isDone) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    isDone \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    isDone \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if ((task.getClass().equals(Todo.class))) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputLine \u003d \"T\" + \"|\" + isDone + \"|\" + task.description;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else if ((task.getClass().equals(Deadline.class))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Deadline deadlineTask \u003d (Deadline) task;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputLine \u003d \"D\" + \"|\" + isDone + \"|\" + deadlineTask.description + \"|\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + deadlineTask.deadlineDate.date + \" \" + deadlineTask.deadlineTime.timing;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else if ((task.getClass().equals(Event.class))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Event eventTask \u003d (Event) task;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputLine \u003d \"E\" + \"|\" + isDone + \"|\" + eventTask.description + \"|\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + eventTask.eventDate.date + \" \" + eventTask.eventTime.timing;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    // Do nothing"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String separator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                writer.write(outputLine + separator);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (Exception error) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Error saving tasks to specified file path. Please try again.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Asserts that there have been changes made to the file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void changeFile() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isFileChanged \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if there are any changes made to the storage files."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return True if files have been changed, False if no changes have been made."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isStorageChanged() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isFileChanged;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 135
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for all types of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected static int totalTasks \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskType Type of the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskType Type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param done Checks if it is a done command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Task(String description, TaskType taskType, int done) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Asserts that the task is completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return taskType + \"[✓] \" + this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return taskType + \"[✘] \" + this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 55
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods to manipulate the array containing all of the tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected ArrayList\u003cTask\u003e arrayOfTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TaskList object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.arrayOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TaskList object with specified ArrayList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Parsed array of tasks read from input file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e arrayOfTasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.arrayOfTasks \u003d arrayOfTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Adds task to the ArrayList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param newTask New task to add."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.add(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Removes task from the ArrayList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Task to remove."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.remove(taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Retrieves this specific task from the ArrayList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Task to retrieve."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Task object specified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Task get(int taskIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return arrayOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Retrieves size of ArrayList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Size of ArrayList as int."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public int taskArraySize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return arrayOfTasks.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int size \u003d arrayOfTasks.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (index \u003c size) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Task curr \u003d arrayOfTasks.get(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(index + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(\".\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(curr.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d output.toString().trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 79
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Ensures that these are the only 3 types of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * @return String in our desired format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"[D]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * @return String in our desired format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"[E]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * @return String in our desired format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"[T]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 36
    }
  },
  {
    "path": "src/main/java/Timing.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Formats timing for output."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Timing {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String timing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int minute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int hour;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isPM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Timing object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param timing Timing read from input text file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Timing(String timing) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int timeInt \u003d Integer.parseInt(timing);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.minute \u003d timeInt % 100;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.hour \u003d timeInt / 100;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (this.hour \u003c 12) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            isPM \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            isPM \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String formattedTiming;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String meridiem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (hour \u003d\u003d 0 || hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedTiming \u003d \"12\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedTiming \u003d hour % 12 + \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (minute !\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedTiming \u003d formattedTiming + \":\" + String.format(\"%02d\", minute);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (isPM) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            meridiem \u003d \"pm\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            meridiem \u003d \"am\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return formattedTiming + meridiem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 53
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for Todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Todo object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of todo command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Todo object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of todo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param done Checks if it is a done command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Todo(String description, int done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.TODO, done);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 32
    }
  },
  {
    "path": "src/main/java/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for TodoCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task toDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TodoCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of todo command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        toDoTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle todo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.addedMessage(toDoTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.addTask(toDoTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitCheck() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 39
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods that prints out messages to console."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final BufferedReader inputReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Ui object and BufferedReader object to scan user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Reader inputStreamReader \u003d new InputStreamReader(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.inputReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs the total number of tasks in ArrayList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void printTaskCount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (Task.totalTasks \u003e 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.out.println(\"You have a total of \" + Task.totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.out.println(\"You have a total of \" + Task.totalTasks + \" task in the list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs welcome message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String logo \u003d \" ______   _____  _____  ___  ____   ________  \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                + \"|_   _ `.|_   _||_   _||_  ||_  _| |_   __  | \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                + \"  | | `. \\\\ | |    | |    | |_/ /     | |_ \\\\_| \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                + \"  | |  | | | \u0027    \u0027 |    |  __\u0027.     |  _| _  \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                + \" _| |_.\u0027 /  \\\\ \\\\__/ /    _| |  \\\\ \\\\_  _| |__/ | \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                + \"|______.\u0027    `.__.\u0027    |____||____||________| \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"Hello there! My name is \\n\" + logo + \"\\nHow may I assist you today?\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs exit message after exiting program."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"Goodbye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs done message after task is completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param task Task that is added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void doneMessage(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"Great job! This task has been marked as done:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs added message after task is added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void addedMessage(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"Thank you for your input. The following task has been added to the list:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputString \u003d task.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\" \" + outputString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs remove message after task is removed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void removeMessage(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"The following task has been successfully removed:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses input lines."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String that is desired."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String parseInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return inputReader.readLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.out.println(\"Error reading user input.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void exitProgram() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            inputReader.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.out.println(\"Error closing user input stream.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Lists tasks in ArrayList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Our main ArrayList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void listTasks(TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String output \u003d arrayOfTasks.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Prints border for easier reading of output."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void printBorder() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.print(\"---------------------------\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Prints message to show matching tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void matchingMessage(TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"These are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(arrayOfTasks.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Prints message to say that there are no matching tasks found."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void noMatchMessage() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        printBorder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 138
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task event \u003d new Event(\"project meeting\", \"17/7/2015\", \"1842\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String testCommand \u003d \"testCommand\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseCommand_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Parser.parse(testCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"Catastrophe detected! I\u0027m sorry, but \u0027\" + testCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                         + \"\u0027 is not within my realm of knowledge. ☹\", error.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setDone_validInput_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String correctOutput \u003d \"[E][✓] project meeting (at: 17th of July 2015, 6:42pm)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        event.setDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(event.toString(), correctOutput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void doneCommand_missingIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Parser.parse(\"done\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"Please specify which task you have completed.\", error.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void eventCommand_missingTiming_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Parser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Parser.parse(\"event project meeting /at 4/1/2018\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"Date and Timing fields has not been specified correctly. Please try again!\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                         error.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 52
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void load_invalidFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String wrongPath \u003d \"data/randomFile.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Storage(wrongPath).load();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"\u0027duke.txt\u0027 cannot be loaded from the specified file path. Please try again.\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                  error.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void changeFile_validInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(storage.isFileChanged);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 26
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task todo \u003d new Todo(\"sleep\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task event \u003d new Event(\"project meeting\", \"17/11/2015\", \"1532\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void taskArraySize_validInput_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.addTask(todo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.addTask(event);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(2, todoList.taskArraySize());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.deleteTask(0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.deleteTask(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(0, todoList.taskArraySize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void getTask_validInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String toDoTask \u003d taskList.get(0).toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String eventTask \u003d taskList.get(1).toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(\"[T][✘] sleep\", toDoTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(\"[E][✘] project meeting (at: 17th of November 2015, 3:32pm)\", eventTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 30
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void doneTask_validInput_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task task \u003d new Todo(\"Todo\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        task \u003d new Event(\"Event\", \"4/3/2014\", \"1543\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void undoneTask_validInput_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task deadline \u003d new Deadline(\"Deadline\", \"20/5/1984\", \"1239\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(deadline.isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 23
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deadline return book /by 5/7/2018 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "event project meeting /at 12/3/2019 1100"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "find book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "afroneth": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "afroneth": 2,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\ByeCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Command.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Date.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DeadlineCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DeleteCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DoneCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\EventCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\FindCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\ListCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Parser.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Storage.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\TaskList.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\TaskType.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Timing.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\TodoCommand.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "afroneth": 22
    }
  }
]
