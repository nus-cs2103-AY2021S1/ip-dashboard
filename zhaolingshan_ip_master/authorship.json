[
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showAddedTask(task, tasks.taskListLength());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 20
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"D\" + super.saveTask() + \" | \" + by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 22
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a DeleteCommand with an index"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * which specifies the specific task to be deleted."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a DeleteCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the unique index of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Deletes the specified task and displays the UI for the deleted task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the current TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the current Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the current Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException throws an exception when the index is more than the length of the taskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (index \u003e tasks.taskListLength()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"ERROR: Task does not exist\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Task deletedTask \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showDeletedTask(deletedTask, tasks.taskListLength());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 37
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * Encapsulates a DoneCommand with an index"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " * which specifies the specific task as done."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Instantiates a DoneCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param index the unique index of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Marks the specified task as done and displays the UI for the done task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the current TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the current Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the current Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Task task \u003d tasks.getTaskList().get(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showDone(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 34
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        ui.showWelcome();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        while (!isExit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                ui.showLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        new Duke(\"taskList.txt\").run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 34,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"E\" + super.saveTask() + \" | \" + at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 21
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Saves all the tasks in the taskList to the hard disk"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * and displays the UI for goodbye."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the current TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the current Ui."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the current Storage."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 20
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return tasks.findTask(input);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 17
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Displays all the tasks in the taskList."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param tasks the current TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param ui the current Ui."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param storage the current Storage."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return ui.showList(tasks);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 17
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns a command depending on the input string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return Command which specifies the action taken."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @throws DukeException unidentified strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Command parse(String s) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert s.length() \u003e 0 : \"input should not be empty\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.equals(\"list\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.equals(\"bye\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d parseDone(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d parseDelete(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Todo todo \u003d parseTodo(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new AddCommand(todo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Event event \u003d parseEvent(s);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new AddCommand(event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Deadline deadline \u003d parseDeadline(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new AddCommand(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (s.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return new FindCommand(s);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an integer specifying the index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * of the task to be marked as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"done\"."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an integer which represents the index of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static int parseDone(String s) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DONE \u003d 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        int index \u003d Integer.parseInt(s.substring(DONE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return index - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an event to be added into taskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param display the string input starting with \"event\"."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Event parseEvent(String display) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int EVENT \u003d 5;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int EVENT_WITH_SPACING \u003d 6;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (display.length() \u003d\u003d EVENT || display.length() \u003d\u003d EVENT_WITH_SPACING) { // \"event\" or \"event \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (display.contains(\"/\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d display.indexOf(\"/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int EVENT_DATE_AND_TIME \u003d index + 4;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (display.substring(index + 1).equals(\"\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    || display.substring(index + 3).equals(\"\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    || display.substring(EVENT_DATE_AND_TIME).equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please key in a valid date and time.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d display.substring(EVENT_WITH_SPACING, index - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String eventDate \u003d display.substring(EVENT_DATE_AND_TIME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(eventDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return new Event(description, date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(\"Please key in the date in the format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The format is wrong. A dash is missing.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns an integer representing the index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * of the task to be deleted from taskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"delete\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return an integer."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static int parseDelete(String s) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DELETE \u003d 6;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DELETE_WITH_SPACING \u003d 7;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.length() \u003d\u003d DELETE || s.length() \u003d\u003d DELETE_WITH_SPACING) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"ERROR: Specify the task number which you want to delete.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        int index \u003d Integer.parseInt(s.substring(DELETE_WITH_SPACING));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return index - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns a todo to be added into taskList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"todo\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a todo."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Todo parseTodo(String s) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int TODO \u003d 4;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int TODO_WITH_SPACING \u003d 5;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.length() \u003d\u003d TODO || s.length() \u003d\u003d TODO_WITH_SPACING) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String description \u003d s.substring(5);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * Returns a deadline to be added into taskList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @param s the string input starting with \"deadline\"."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     * @return a deadline."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static Deadline parseDeadline(String s) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DEADLINE \u003d 8;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DEADLINE_WITH_SPACING \u003d 9;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.length() \u003d\u003d DEADLINE || s.length() \u003d\u003d DEADLINE_WITH_SPACING) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (s.contains(\"/\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d s.indexOf(\"/\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int DEADLINE_DATE_AND_TIME \u003d index + 4;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (s.substring(index + 1).equals(\"\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    || s.substring(index + 3).equals(\"\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    || s.substring(DEADLINE_DATE_AND_TIME).equals(\"\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please key in a valid date and time.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d s.substring(DEADLINE_WITH_SPACING, index - 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String deadlineDate \u003d s.substring(DEADLINE_DATE_AND_TIME);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(deadlineDate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return new Deadline(description, date);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(\"Please key in the date in the format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The format is wrong. A dash is missing.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public static void parseFind(String s) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 152
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try { "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            File file \u003d new File(\"taskList.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (!file.createNewFile()) { // file already exists"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Scanner fileScanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    String data \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    Task newTask \u003d readFiles(data);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                    list.add(newTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                fileScanner.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"ERROR: file not found.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void save(TaskList list) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"taskList.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            for (Task task : list.taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                fileWriter.write(task.saveTask() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            System.out.println(\"ERROR\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task readFiles(String data) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert data.length() \u003e 0 : \"input should not be empty\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        final int DESCRIPTION \u003d 8;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (data.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d data.substring(DESCRIPTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            todo.isDone \u003d data.charAt(4) \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return todo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (data.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d data.lastIndexOf(\"|\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int DATE_AND_TIME \u003d index + 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d data.substring(DESCRIPTION, index - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String eventDate \u003d data.substring(DATE_AND_TIME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(eventDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Event event \u003d new Event(description, date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final int DONE \u003d 4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                event.isDone \u003d data.charAt(DONE) \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(\"Please key in the date in the format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else if (data.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            int index \u003d data.lastIndexOf(\"|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            final int DATE_AND_TIME \u003d index + 2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String description \u003d data.substring(DESCRIPTION, index - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String deadlineDate \u003d data.substring(DATE_AND_TIME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(deadlineDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                final int DONE \u003d 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                deadline.isDone \u003d data.charAt(DONE) \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                throw new DukeException(\"Please key in the date in the format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            throw new DukeException(\"ERROR: unknown task\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 91
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String doneOrNot \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \" | \" + doneOrNot + \" | \" + description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 27
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public int taskListLength() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert index \u003e 0 : \"index cannot be zero or negative\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String findTask(String display) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert display.length() \u003e 0 : \"input cannot be empty\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        ArrayList\u003cString\u003e matches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        String task \u003d display.substring(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (Task value : taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            String currentTask \u003d value.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            if (currentTask.contains(task)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                matches.add(currentTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StringBuilder reply \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        for (String match : matches) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            reply.append(match).append(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return reply.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 52
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"T\" + super.saveTask();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"ERROR: file does not exist.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showError(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        String greeting \u003d \"Hello! I\u0027m Duke \\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "//        System.out.println(\"Hello from\\n\" + logo + \"\\n\" + greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Welcome!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showDeletedTask(Task task, int length) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert length \u003e\u003d 0 : \"length must not be negative\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task + \"\\n\" "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + \"Now you have \" + length + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showAddedTask(Task task, int length) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assert length \u003e\u003d 0 : \"length must not be negative\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                + \"Now you have \" + length + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showDone(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public String showList(TaskList taskList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        StringBuilder display \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        if (taskList.taskListLength() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            return \"You have no tasks!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            display.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.taskListLength(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                Task task \u003d taskList.getTaskList().get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "                display.append(i + 1).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        return display.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    } "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 62
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "// unable to import fail for fail()"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToIntConversion_includeInteger_success() throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(1, Parser.parseDelete(\"delete 2\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(6, Parser.parseDelete(\"delete 7\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToIntConversion_excludeInteger_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(1, Parser.parseDelete(\"delete\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            // fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(\"ERROR: Specify the task number which you want to delete.\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToTodoConversion_includeDescription_success() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(\"[T][✘] read book\", Parser.parseTodo(\"todo read book\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        assertEquals(\"[T][✘] borrow book\", Parser.parseTodo(\"todo borrow book\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    public void stringToTodoConversion_excludeDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(new Todo(\"\"), Parser.parseTodo(\"todo\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            // fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaolingshan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "zhaolingshan": 2,
      "-": 37
    }
  }
]
