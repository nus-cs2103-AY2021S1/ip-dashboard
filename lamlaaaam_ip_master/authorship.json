[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"lamlaaaam":16}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"E|1|meeting|2020-08-30"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"T|1|borrow book"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"D|1|finish homework|2020-09-05"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"T|0|hehehe"}],"authorContributionMap":{"lamlaaaam":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"### Manage tasks"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"Add and remove tasks easily, allowing you to keep track of the tasks you need to do."},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"### Search"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"Easily search for certain tasks using the search function, by entering specific keywords."},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"### Check off tasks"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"Once a task is done, check it off to mark it as done."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"The following lists all available commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"### `LIST` - Lists all tasks."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"This function shows all the tasks you have added."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"`list`"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"`1. [T][X] Return books`"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"`2. [T][O] Do homework`"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"### `DONE [TASK NUMBER]` - Marks a task as done."},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"This function marks a given task as done."},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"Example of usage: "},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"`done 1`"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"Expected outcome:"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"`Nice! I\u0027ve marked this task as done: [T][O] Return books`"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"### `DELETE [TASK NUMBER]` - Deletes a task."},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"This function deletes a given task."},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"Example of usage: "},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"`delete 2`"},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"`Noted. I have removed this task: [T][O] Do homework`"},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"### `FIND [QUERY]` - Searches for a task."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"This function searches for tasks given a search query."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"Example of usage: "},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"`find homework`"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"`Here are the matching tasks in your list: 1. [T][O] Do homework`"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"### `TODO [DESCRIPTION]` - Adds a todo task."},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":69,"author":{"gitId":"lamlaaaam"},"content":"This function adds a simple todo task with no additional details."},{"lineNumber":70,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":71,"author":{"gitId":"lamlaaaam"},"content":"Example of usage: "},{"lineNumber":72,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":73,"author":{"gitId":"lamlaaaam"},"content":"`todo meet John`"},{"lineNumber":74,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":75,"author":{"gitId":"lamlaaaam"},"content":"Expected outcome:"},{"lineNumber":76,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":77,"author":{"gitId":"lamlaaaam"},"content":"`Got it. I\u0027ve added this task: [T][X] meet John`"},{"lineNumber":78,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":79,"author":{"gitId":"lamlaaaam"},"content":"### `DEADLINE [DESCRIPTION] /by [YYYY-MM-DD]` - Adds a deadline."},{"lineNumber":80,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":81,"author":{"gitId":"lamlaaaam"},"content":"This function adds a deadline task with due date."},{"lineNumber":82,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":83,"author":{"gitId":"lamlaaaam"},"content":"Example of usage: "},{"lineNumber":84,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":85,"author":{"gitId":"lamlaaaam"},"content":"`deadline write essay /by 2020-12-09`"},{"lineNumber":86,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":87,"author":{"gitId":"lamlaaaam"},"content":"Expected outcome:"},{"lineNumber":88,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":89,"author":{"gitId":"lamlaaaam"},"content":"`Got it. I\u0027ve added this task: [D][X] write essay (by: Dec 9 2020)`"},{"lineNumber":90,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":91,"author":{"gitId":"lamlaaaam"},"content":"### `EVENT [DESCRIPTION] /at [YYYY-MM-DD]` - Adds an event."},{"lineNumber":92,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":93,"author":{"gitId":"lamlaaaam"},"content":"This function adds an event task with its date."},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"lamlaaaam"},"content":"`event project meeting /at 2020-12-09`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"lamlaaaam"},"content":"`Got it. I\u0027ve added this task: [E][X] project meeting (at: Dec 9 2020)`"},{"lineNumber":102,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":103,"author":{"gitId":"lamlaaaam"},"content":"### `HELP` - Shows all keywords and descriptions."},{"lineNumber":104,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":105,"author":{"gitId":"lamlaaaam"},"content":"This function brings up this help page within the app."},{"lineNumber":106,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":107,"author":{"gitId":"lamlaaaam"},"content":"### `BYE` - Exits the app."},{"lineNumber":108,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":109,"author":{"gitId":"lamlaaaam"},"content":"This function saves all data and exits."},{"lineNumber":110,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":111,"author":{"gitId":"lamlaaaam"},"content":"# Credits"},{"lineNumber":112,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":113,"author":{"gitId":"lamlaaaam"},"content":"The code for the GUI was referenced from a tutorial at https://se-education.org/guides/tutorials/javaFx.html"}],"authorContributionMap":{"-":22,"lamlaaaam":91}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates the different types of commands in an Enum."},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":" * Includes an invalid command."},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":" * Includes description as values."},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"    BYE (\"Exits the app\"),"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"    LIST (\"Lists all the task you have\"),"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"    DONE (\"Marks a task as done, e.g. done 2\"),"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    TODO (\"Adds a todo task, e.g. todo buy groceries\"),"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"    DEADLINE (\"Adds a deadline task, e.g. deadline physics homework /by 2020-09-06\"),"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    EVENT (\"Adds an event task, e.g. event meeting /at 2020-08-01\"),"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    DELETE (\"Deletes a task, e.g. delete 3\"),"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    FIND (\"Searches for tasks that match the query\"),"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"    HELP (\"Brings up this help screen\"),"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"    INVALID (\"An invalid command\");"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"    private String description;"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"    private Command(String description) {"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"     * Retrieves the description of the command."},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"     * @return command description."},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"        return description;"},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":33}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates a deadline task."},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"     * Holds the date of the deadline."},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    private LocalDate by;"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     * Creates a deadline task."},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"     * @param name Description of the task."},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"     * @param by Deadline of the task."},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid date format is used."},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    public Deadline(String name, String by) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"        super(name);"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Invalid date format. Use yyyy-mm-dd\");"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"     * Parses a split serialized string from saved data."},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"     * @param split Serialized string split by the \"|\" delimiter."},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"     * @return Deadline task, or null if save file is corrupted."},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"    public static Deadline parse(String[] split) {"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"            Deadline deadline \u003d new Deadline(split[2], split[3]);"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"            if (split[1].equals(\"1\")) {"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"                deadline.markDone();"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"            return deadline;"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"        } catch (DukeException ex) {"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"            ex.printStackTrace();"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"            return null;"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"     * Serializes the task into a string to be saved."},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"     * @return Serialized string."},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"    public String serialize() {"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"        return \"D|\" + super.serialize() + \"|\" + this.by;"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"     * Returns the string representation of the deadline."},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"     * @return String representation."},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":68}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates the main Duke program."},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"     * Member variables that make up the main Duke program."},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"    private String savePath \u003d \"data/duke.txt\";"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    private DukeSaver saver;"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"    private TaskList taskList;"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    private Parser parser;"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"     * Constructor for the Duke object."},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    public Duke() {"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"        saver \u003d new DukeSaver(savePath);"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"        parser \u003d new Parser(taskList, saver);"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"        saver.loadData(taskList);"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    public String getResponse(String input) {"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"            return parser.handleResponse(input);"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"        } catch (DukeException ex) {"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"            return ex.toString();"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"lamlaaaam":28}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates a custom exception for Duke."},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"    public DukeException(String msg) {"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"        super(msg);"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":8}},{"path":"src/main/java/DukeSaver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates the saving system for tasks."},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"public class DukeSaver {"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"     * Holds the path to the saved data file."},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    private String savePath;"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"     * Constructor for the save system."},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"     * @param savePath Path to the save file."},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    public DukeSaver(String savePath) {"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"        this.savePath \u003d savePath;"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"        initSaveDir();"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"     * Initializes the directory and save file."},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"     * If already exists, does not do anything."},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"    private void initSaveDir() {"},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"            File saveFile \u003d new File(this.savePath);"},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"            saveFile.getParentFile().mkdirs();"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"            saveFile.createNewFile();"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"        } catch (IOException ex) {"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"            ex.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"     * Serializes all the tasks in the list and"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"     * saves them in the save file."},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"     * @param taskList The list of tasks."},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"    public void saveData(TaskList taskList) {"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"            FileWriter fw \u003d new FileWriter(savePath);"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"            for (Task task : taskList.getList()) {"},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"                fw.write(task.serialize() + \"\\n\");"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"            fw.close();"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"        } catch (IOException ex) {"},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"            ex.printStackTrace();"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"     * Parses all the lines in the save file into tasks."},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"     * Loads all the tasks into the task list."},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"     * @param taskList The list of tasks (technically empty)."},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"    public void loadData(TaskList taskList) {"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"            File saveFile \u003d new File(savePath);"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"            Scanner sc \u003d new Scanner(saveFile);"},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":"            while (sc.hasNext()) {"},{"lineNumber":69,"author":{"gitId":"lamlaaaam"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":70,"author":{"gitId":"lamlaaaam"},"content":"                taskList.addTask(Task.parse(line));"},{"lineNumber":71,"author":{"gitId":"lamlaaaam"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"lamlaaaam"},"content":"        } catch (IOException ex) {"},{"lineNumber":73,"author":{"gitId":"lamlaaaam"},"content":"            ex.printStackTrace();"},{"lineNumber":74,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":76}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates an event task."},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"     * Holds the date of the event."},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    private LocalDate at;"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     * Creates an event task."},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"     * @param name Name of event."},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"     * @param at Date of event."},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid date format is used."},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    public Event(String name, String at) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"        super(name);"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Invalid date format. Use yyyy-mm-dd\");"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"     * Parses a split serialized string from saved data."},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"     * @param split Serialized string split by the \"|\" delimiter."},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"     * @return Event task, or null if save file is corrupted."},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"    public static Event parse(String[] split) {"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"            Event event \u003d new Event(split[2], split[3]);"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"            if (split[1].equals(\"1\")) {"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"                event.markDone();"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"            return event;"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"        } catch (DukeException ex) {"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"            ex.printStackTrace();"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"            return null;"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"     * Serializes the task into a string to be saved."},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"     * @return Serialized string."},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"    public String serialize() {"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"        return \"E|\" + super.serialize() + \"|\" + this.at;"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"     * Returns the string representation of the event."},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"     * @return String representation."},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":68}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"    public void initialize() {"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"        duke \u003d d;"},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"    private void handleUserInput() {"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"        userInput.clear();"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":49}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates the parsing system for user commands."},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"     * Duke components required when handling user commands."},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"    private TaskList taskList;"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    private DukeSaver saver;"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"     * Constructor for parsing system."},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"     * @param taskList List of tasks."},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"     * @param saver Saving system."},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"    public Parser(TaskList taskList, DukeSaver saver) {"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"        this.saver \u003d saver;"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"     * Handles a user command and designates task to helper functions."},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"     * @param response User\u0027s command."},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"     * @return A string response."},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid commands are invoked."},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"    public String handleResponse(String response) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"        String[] parsedResponse \u003d response.split(\" \", 2);"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"        Command command;"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"            command \u003d Command.valueOf(parsedResponse[0].toUpperCase());"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"        } catch (IllegalArgumentException ex) {"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"            command \u003d Command.INVALID;"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"        String remainderString \u003d parsedResponse.length \u003d\u003d 1 ? null : parsedResponse[1];"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"        switch (command) {"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"        case BYE:"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"            saver.saveData(taskList);"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"            System.exit(0);"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"            return null;"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"        case LIST:"},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"            return handleList();"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"        case DONE:"},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"            return handleDone(remainderString);"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"        case TODO:"},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"            return handleTodo(remainderString);"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"        case DEADLINE:"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"            return handleDeadline(remainderString);"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"        case EVENT:"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":"            return handleEvent(remainderString);"},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"        case DELETE:"},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"            return handleDelete(remainderString);"},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"        case FIND:"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"            return handleFind(remainderString);"},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"        case HELP:"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"            return handleHelp();"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"        case INVALID:"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Unrecognized command!\");"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"        default:"},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":"            assert true : \"Fell through INVALID command switch case. Should not have reached here.\";"},{"lineNumber":69,"author":{"gitId":"lamlaaaam"},"content":"            return null;"},{"lineNumber":70,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":73,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the \"list\" command by iterating through all"},{"lineNumber":75,"author":{"gitId":"lamlaaaam"},"content":"     * tasks in the list and building a string."},{"lineNumber":76,"author":{"gitId":"lamlaaaam"},"content":"     * Prints the final string."},{"lineNumber":77,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"lamlaaaam"},"content":"    private String handleList() {"},{"lineNumber":79,"author":{"gitId":"lamlaaaam"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":80,"author":{"gitId":"lamlaaaam"},"content":"            return \"You have no tasks!\";"},{"lineNumber":81,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":83,"author":{"gitId":"lamlaaaam"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"},{"lineNumber":84,"author":{"gitId":"lamlaaaam"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); ++i) {"},{"lineNumber":85,"author":{"gitId":"lamlaaaam"},"content":"            sb.append((i + 1) + \". \" + taskList.get(i) + \"\\n\");"},{"lineNumber":86,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"lamlaaaam"},"content":"        sb.setLength(sb.length() - 1);"},{"lineNumber":88,"author":{"gitId":"lamlaaaam"},"content":"        return sb.toString();"},{"lineNumber":89,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":91,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the \"done\" command by looking for the task"},{"lineNumber":93,"author":{"gitId":"lamlaaaam"},"content":"     * at the index and marking it as done."},{"lineNumber":94,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"lamlaaaam"},"content":"     * @param remainderString The remaining string after the key command \"done\"."},{"lineNumber":96,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid format used."},{"lineNumber":97,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"lamlaaaam"},"content":"    private String handleDone(String remainderString) throws DukeException {"},{"lineNumber":99,"author":{"gitId":"lamlaaaam"},"content":"        if (remainderString \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Specify a task!\");"},{"lineNumber":101,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"lamlaaaam"},"content":"        int taskDone;"},{"lineNumber":103,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"lamlaaaam"},"content":"            taskDone \u003d Integer.parseInt(remainderString) - 1;"},{"lineNumber":105,"author":{"gitId":"lamlaaaam"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":106,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Specify a valid task number!\");"},{"lineNumber":107,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"lamlaaaam"},"content":"        if (taskDone \u003c 0 || taskDone \u003e\u003d taskList.size()) {"},{"lineNumber":109,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"No such task!\");"},{"lineNumber":110,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"lamlaaaam"},"content":"        taskList.markTaskDone(taskDone);"},{"lineNumber":112,"author":{"gitId":"lamlaaaam"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(taskDone);"},{"lineNumber":113,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":115,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the creation of a Todo task."},{"lineNumber":117,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"lamlaaaam"},"content":"     * @param remainderString The remaining string after the key command \"todo\"."},{"lineNumber":119,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid format used."},{"lineNumber":120,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"lamlaaaam"},"content":"    private String handleTodo(String remainderString) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"lamlaaaam"},"content":"        if (remainderString \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Description of a todo cannot be empty!\");"},{"lineNumber":124,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"lamlaaaam"},"content":"        Todo todo \u003d new Todo(remainderString);"},{"lineNumber":126,"author":{"gitId":"lamlaaaam"},"content":"        taskList.addTask(todo);"},{"lineNumber":127,"author":{"gitId":"lamlaaaam"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + todo + \"\\n\" + taskList.taskSizeString();"},{"lineNumber":128,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":130,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the creation of a Deadline task."},{"lineNumber":132,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"lamlaaaam"},"content":"     * @param remainderString The remaining string after the key command \"deadline\"."},{"lineNumber":134,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid format used."},{"lineNumber":135,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"lamlaaaam"},"content":"    private String handleDeadline(String remainderString) throws DukeException {"},{"lineNumber":137,"author":{"gitId":"lamlaaaam"},"content":"        if (remainderString \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Description of a deadline cannot be empty!\");"},{"lineNumber":139,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"lamlaaaam"},"content":"        String[] deadlineParsed \u003d remainderString.split(\"/\");"},{"lineNumber":141,"author":{"gitId":"lamlaaaam"},"content":"        if (deadlineParsed.length \u003d\u003d 1) {"},{"lineNumber":142,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Prefix the keyword \u0027by\u0027 with a forward slash!\");"},{"lineNumber":143,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"lamlaaaam"},"content":"        String deadlineName \u003d deadlineParsed[0].trim();"},{"lineNumber":145,"author":{"gitId":"lamlaaaam"},"content":"        String[] byParsed \u003d deadlineParsed[1].split(\" \", 2);"},{"lineNumber":146,"author":{"gitId":"lamlaaaam"},"content":"        if (byParsed.length \u003d\u003d 1) {"},{"lineNumber":147,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Deadline due time cannot be empty!\");"},{"lineNumber":148,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"lamlaaaam"},"content":"        String by \u003d byParsed[1];"},{"lineNumber":150,"author":{"gitId":"lamlaaaam"},"content":"        Deadline deadline \u003d new Deadline(deadlineName, by);"},{"lineNumber":151,"author":{"gitId":"lamlaaaam"},"content":"        taskList.addTask(deadline);"},{"lineNumber":152,"author":{"gitId":"lamlaaaam"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + deadline + \"\\n\" + taskList.taskSizeString();"},{"lineNumber":153,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":155,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the creation of an Event task."},{"lineNumber":157,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"lamlaaaam"},"content":"     * @param remainderString The remaining string after the key command \"event\"."},{"lineNumber":159,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid format used."},{"lineNumber":160,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"lamlaaaam"},"content":"    private String handleEvent(String remainderString) throws DukeException {"},{"lineNumber":162,"author":{"gitId":"lamlaaaam"},"content":"        if (remainderString \u003d\u003d null) {"},{"lineNumber":163,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Description of an event cannot be empty!\");"},{"lineNumber":164,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"lamlaaaam"},"content":"        String[] eventParsed \u003d remainderString.split(\"/\");"},{"lineNumber":166,"author":{"gitId":"lamlaaaam"},"content":"        if (eventParsed.length \u003d\u003d 1) {"},{"lineNumber":167,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Prefix the keyword \u0027at\u0027 with a forward slash!\");"},{"lineNumber":168,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"lamlaaaam"},"content":"        String eventName \u003d eventParsed[0].trim();"},{"lineNumber":170,"author":{"gitId":"lamlaaaam"},"content":"        String[] atParsed \u003d eventParsed[1].split(\" \", 2);"},{"lineNumber":171,"author":{"gitId":"lamlaaaam"},"content":"        if (atParsed.length \u003d\u003d 1) {"},{"lineNumber":172,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Event time cannot be empty!\");"},{"lineNumber":173,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"lamlaaaam"},"content":"        String at \u003d atParsed[1];"},{"lineNumber":175,"author":{"gitId":"lamlaaaam"},"content":"        Event event \u003d new Event(eventName, at);"},{"lineNumber":176,"author":{"gitId":"lamlaaaam"},"content":"        taskList.addTask(event);"},{"lineNumber":177,"author":{"gitId":"lamlaaaam"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + event + \"\\n\" + taskList.taskSizeString();"},{"lineNumber":178,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":180,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the deletion of a task."},{"lineNumber":182,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"lamlaaaam"},"content":"     * @param remainderString The remaining string after the key command \"delete\", which is index of task."},{"lineNumber":184,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when invalid format used."},{"lineNumber":185,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"lamlaaaam"},"content":"    private String handleDelete(String remainderString) throws DukeException {"},{"lineNumber":187,"author":{"gitId":"lamlaaaam"},"content":"        if (remainderString \u003d\u003d null) {"},{"lineNumber":188,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Specify a task!\");"},{"lineNumber":189,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"lamlaaaam"},"content":"        int deleteIndex;"},{"lineNumber":191,"author":{"gitId":"lamlaaaam"},"content":"        try {"},{"lineNumber":192,"author":{"gitId":"lamlaaaam"},"content":"            deleteIndex \u003d Integer.parseInt(remainderString) - 1;"},{"lineNumber":193,"author":{"gitId":"lamlaaaam"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":194,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Specify a valid task number!\");"},{"lineNumber":195,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"lamlaaaam"},"content":"        if (deleteIndex \u003c 0 || deleteIndex \u003e\u003d taskList.size()) {"},{"lineNumber":197,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"No such task!\");"},{"lineNumber":198,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"lamlaaaam"},"content":"        Task taskToDelete \u003d taskList.get(deleteIndex);"},{"lineNumber":200,"author":{"gitId":"lamlaaaam"},"content":"        taskList.deleteTask(deleteIndex);"},{"lineNumber":201,"author":{"gitId":"lamlaaaam"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + taskToDelete + \"\\n\" + taskList.taskSizeString();"},{"lineNumber":202,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":204,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the \"find\" command."},{"lineNumber":206,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":207,"author":{"gitId":"lamlaaaam"},"content":"     * @param remainderString Remaining string after the \"find\" command, which is query term."},{"lineNumber":208,"author":{"gitId":"lamlaaaam"},"content":"     * @throws DukeException Thrown when no search term is given."},{"lineNumber":209,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"lamlaaaam"},"content":"    private String handleFind(String remainderString) throws DukeException {"},{"lineNumber":211,"author":{"gitId":"lamlaaaam"},"content":"        if (remainderString \u003d\u003d null) {"},{"lineNumber":212,"author":{"gitId":"lamlaaaam"},"content":"            throw new DukeException(\"Specify a search term!\");"},{"lineNumber":213,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":215,"author":{"gitId":"lamlaaaam"},"content":"        List\u003cTask\u003e matches \u003d taskList.search(remainderString);"},{"lineNumber":216,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":217,"author":{"gitId":"lamlaaaam"},"content":"        if (matches.isEmpty()) {"},{"lineNumber":218,"author":{"gitId":"lamlaaaam"},"content":"            return \"No matching task.\";"},{"lineNumber":219,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":221,"author":{"gitId":"lamlaaaam"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":222,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":223,"author":{"gitId":"lamlaaaam"},"content":"        for (int i \u003d 0; i \u003c matches.size(); ++i) {"},{"lineNumber":224,"author":{"gitId":"lamlaaaam"},"content":"            sb.append((i + 1) + \".\" + matches.get(i) + \"\\n\");"},{"lineNumber":225,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"lamlaaaam"},"content":"        sb.setLength(sb.length() - 1);"},{"lineNumber":227,"author":{"gitId":"lamlaaaam"},"content":"        return sb.toString();"},{"lineNumber":228,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":230,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"lamlaaaam"},"content":"     * Handles the \"help\" command."},{"lineNumber":232,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"lamlaaaam"},"content":"    private String handleHelp() {"},{"lineNumber":234,"author":{"gitId":"lamlaaaam"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":235,"author":{"gitId":"lamlaaaam"},"content":"        for (Command command : Command.values()) {"},{"lineNumber":236,"author":{"gitId":"lamlaaaam"},"content":"            sb.append(command + \" - \" + command.getDescription() + \"\\n\");"},{"lineNumber":237,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"lamlaaaam"},"content":"        return sb.toString();"},{"lineNumber":239,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":240}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates a task which other specific tasks extend from."},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"     * Member variables holding name and status of task."},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"    private String name;"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    private boolean isDone;"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"     * Constructor to create a task."},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"     * @param name Name of task."},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    public Task(String name) {"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"        this.name \u003d name;"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"        isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"     * Marks the task as completed."},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"    public void markDone() {"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"        isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"     * Serializes the task into a string to be saved."},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"     * @return Serialized string."},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"    public String serialize() {"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"        return (isDone ? \"1\" : \"0\") + \"|\" + name;"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"     * Retrieves name of task."},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"     * @return Name."},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"    public String getName() {"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"        return name;"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"     * Parses a serialized string by checking the first letter for type."},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"     * Designates the parsing to the appropriate class."},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"     * @param serial The serialized string."},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"     * @return The task object."},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"    public static Task parse(String serial) {"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"        Character type \u003d serial.charAt(0);"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"        String[] split \u003d serial.split(\"\\\\|\");"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"        switch (type) {"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":"        case \u0027T\u0027:"},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"            return Todo.parse(split);"},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"        case \u0027E\u0027:"},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"            return Event.parse(split);"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"        case \u0027D\u0027:"},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"            return Deadline.parse(split);"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"        default:"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"            return null;"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":69,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"lamlaaaam"},"content":"     * Returns the string representation of the task."},{"lineNumber":71,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"lamlaaaam"},"content":"     * @return String representation."},{"lineNumber":73,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"lamlaaaam"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"lamlaaaam"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"lamlaaaam"},"content":"        return \"[\" + (isDone ? \"O\" : \"X\") + \"] \" + name;"},{"lineNumber":77,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":78}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates a task list to hold all current tasks."},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"     * Implements using a Java List."},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"     * Constructor to initialize the list using ArrayList."},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"     * Adds a task to the list."},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"     * @param task Task to be added."},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    public void addTask(Task task) {"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"        taskList.add(task);"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"     * Deletes a task."},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     * @param index Index of task to be deleted."},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"    public void deleteTask(int index) {"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"        taskList.remove(index);"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"     * Gets the list object."},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"     * @return List object."},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"        return taskList;"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"     * Checks if task list is empty."},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":"     * @return True if list is empty, false otherwise."},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"    public boolean isEmpty() {"},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"        return taskList.isEmpty();"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":"     * Returns size of task list."},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"     * @return Size."},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"    public int size() {"},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"        return taskList.size();"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"     * Retrieves task object at given index."},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"lamlaaaam"},"content":"     * @param index Index of task to be retrieved."},{"lineNumber":70,"author":{"gitId":"lamlaaaam"},"content":"     * @return The corresponding task."},{"lineNumber":71,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"lamlaaaam"},"content":"    public Task get(int index) {"},{"lineNumber":73,"author":{"gitId":"lamlaaaam"},"content":"        return taskList.get(index);"},{"lineNumber":74,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":76,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"lamlaaaam"},"content":"     * Formats the list size to be used for display purposes."},{"lineNumber":78,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"lamlaaaam"},"content":"     * @return Formatted string."},{"lineNumber":80,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"lamlaaaam"},"content":"    public String taskSizeString() {"},{"lineNumber":82,"author":{"gitId":"lamlaaaam"},"content":"        return \"Now you have \" + taskList.size() + \" task(s) in the list.\";"},{"lineNumber":83,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":85,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"lamlaaaam"},"content":"     * Searches the list for tasks that contain search query."},{"lineNumber":87,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"lamlaaaam"},"content":"     * @param query Term to be searched."},{"lineNumber":89,"author":{"gitId":"lamlaaaam"},"content":"     * @return List of matching tasks."},{"lineNumber":90,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"lamlaaaam"},"content":"    public List\u003cTask\u003e search(String query) {"},{"lineNumber":92,"author":{"gitId":"lamlaaaam"},"content":"        List\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitId":"lamlaaaam"},"content":"        for (Task task : taskList) {"},{"lineNumber":94,"author":{"gitId":"lamlaaaam"},"content":"            if (task.getName().contains(query)) {"},{"lineNumber":95,"author":{"gitId":"lamlaaaam"},"content":"                results.add(task);"},{"lineNumber":96,"author":{"gitId":"lamlaaaam"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"lamlaaaam"},"content":"        return results;"},{"lineNumber":99,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":101,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"lamlaaaam"},"content":"     * Marks a given task as completed."},{"lineNumber":103,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"lamlaaaam"},"content":"     * @param taskNum Index of task to be marked."},{"lineNumber":105,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"lamlaaaam"},"content":"    public void markTaskDone(int taskNum) {"},{"lineNumber":107,"author":{"gitId":"lamlaaaam"},"content":"        Task task \u003d taskList.get(taskNum);"},{"lineNumber":108,"author":{"gitId":"lamlaaaam"},"content":"        task.markDone();"},{"lineNumber":109,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":110}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates a Todo task."},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"public class Todo extends Task {"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"     * Creates a todo task."},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"     * @param name Name of task."},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"    public Todo(String name) {"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"        super(name);"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"     * Parses a split serialized string from saved data."},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"     * @param split Serialized string split by the \"|\" delimiter."},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"     * @return Todo task, or null if save file is corrupted."},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    public static Todo parse(String[] split) {"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"        Todo todo \u003d new Todo(split[2]);"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"        if (split[1].equals(\"1\")) {"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"            todo.markDone();"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"        return todo;"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"     * Serializes the task into a string to be saved."},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"     * @return Serialized string."},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"    public String serialize() {"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"        return \"T|\" + super.serialize();"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"     * Returns the string representation of the todo task."},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"     * @return String representation."},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":47}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"import javafx.scene.control.Label;"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":" * Encapsulates the user interface which user uses to interact with Duke."},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"public class UI {"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"     * Duke\u0027s logo."},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    private static final String LOGO \u003d \"____        _        \\n\""},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"                                     + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"                                     + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"                                     + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"                                     + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"    private static final String DIVIDER \u003d \"______________________________________________\";"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"     * Input system using Java\u0027s scanner."},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":"    private static final Scanner in \u003d new Scanner(System.in);"},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    private Label outputDisplay;"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"    public void setOutput(Label outputDisplay) {"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"        this.outputDisplay \u003d outputDisplay;"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"     * Gives the user a prompt to input commands."},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"     * @return The user\u0027s input."},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lamlaaaam"},"content":"    public String prompt() {"},{"lineNumber":38,"author":{"gitId":"lamlaaaam"},"content":"        System.out.print(\"\u003e\u003e \");"},{"lineNumber":39,"author":{"gitId":"lamlaaaam"},"content":"        String response \u003d in.nextLine();"},{"lineNumber":40,"author":{"gitId":"lamlaaaam"},"content":"        return response;"},{"lineNumber":41,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":43,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"lamlaaaam"},"content":"     * Prints the given message between dividers."},{"lineNumber":45,"author":{"gitId":"lamlaaaam"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"lamlaaaam"},"content":"     * @param message Message to be printed."},{"lineNumber":47,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"lamlaaaam"},"content":"    public void print(String message) {"},{"lineNumber":49,"author":{"gitId":"lamlaaaam"},"content":"        outputDisplay.setText(message);"},{"lineNumber":50,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":52,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"lamlaaaam"},"content":"     * Greets the user."},{"lineNumber":54,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lamlaaaam"},"content":"    public String greet() {"},{"lineNumber":56,"author":{"gitId":"lamlaaaam"},"content":"        String greeting \u003d \"Hi! I am \" + \"DUKE.\" + \"\\n\" + \"What can I do for you?\";"},{"lineNumber":57,"author":{"gitId":"lamlaaaam"},"content":"        return greeting;"},{"lineNumber":58,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":60,"author":{"gitId":"lamlaaaam"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"lamlaaaam"},"content":"     * Exits the program with farewell message."},{"lineNumber":62,"author":{"gitId":"lamlaaaam"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"lamlaaaam"},"content":"    public void exit() {"},{"lineNumber":64,"author":{"gitId":"lamlaaaam"},"content":"        String goodbye \u003d \"Bye! Hope to see you again!\";"},{"lineNumber":65,"author":{"gitId":"lamlaaaam"},"content":"        print(goodbye);"},{"lineNumber":66,"author":{"gitId":"lamlaaaam"},"content":"        System.exit(0);"},{"lineNumber":67,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":68}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"lamlaaaam":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"lamlaaaam":19}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"public class TaskTest {"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"    public void constructorTest() {"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"        Task task \u003d new Task(\"test name\");"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"        Assertions.assertEquals(\"[X] test name\", task.toString());"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":12,"author":{"gitId":"lamlaaaam"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"lamlaaaam"},"content":"    public void markDoneTest() {"},{"lineNumber":14,"author":{"gitId":"lamlaaaam"},"content":"        Task task \u003d new Task(\"sample task\");"},{"lineNumber":15,"author":{"gitId":"lamlaaaam"},"content":"        task.markDone();"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"        Assertions.assertEquals(\"[O] sample task\", task.toString());"},{"lineNumber":17,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":19,"author":{"gitId":"lamlaaaam"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"lamlaaaam"},"content":"    public void serializeTest() {"},{"lineNumber":21,"author":{"gitId":"lamlaaaam"},"content":"        Task task \u003d new Task(\"another task\");"},{"lineNumber":22,"author":{"gitId":"lamlaaaam"},"content":"        Assertions.assertEquals(\"0|another task\", task.serialize());"},{"lineNumber":23,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":25,"author":{"gitId":"lamlaaaam"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"lamlaaaam"},"content":"    public void parseValidTest() {"},{"lineNumber":27,"author":{"gitId":"lamlaaaam"},"content":"        String serial \u003d \"T|1|valid task\";"},{"lineNumber":28,"author":{"gitId":"lamlaaaam"},"content":"        Assertions.assertEquals(\"[T][O] valid task\", Task.parse(serial).toString());"},{"lineNumber":29,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lamlaaaam"},"content":""},{"lineNumber":31,"author":{"gitId":"lamlaaaam"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"lamlaaaam"},"content":"    public void parseInvalidTest() {"},{"lineNumber":33,"author":{"gitId":"lamlaaaam"},"content":"        String serial \u003d \"K|0|invalid task\";"},{"lineNumber":34,"author":{"gitId":"lamlaaaam"},"content":"        Assertions.assertEquals(null, Task.parse(serial));"},{"lineNumber":35,"author":{"gitId":"lamlaaaam"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lamlaaaam"},"content":"}"}],"authorContributionMap":{"lamlaaaam":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lamlaaaam"},"content":"list"},{"lineNumber":2,"author":{"gitId":"lamlaaaam"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"lamlaaaam"},"content":"list"},{"lineNumber":4,"author":{"gitId":"lamlaaaam"},"content":"deadline return book /by Sunday"},{"lineNumber":5,"author":{"gitId":"lamlaaaam"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"lamlaaaam"},"content":"list"},{"lineNumber":7,"author":{"gitId":"lamlaaaam"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":8,"author":{"gitId":"lamlaaaam"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"lamlaaaam"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"list"},{"lineNumber":11,"author":{"gitId":"lamlaaaam"},"content":"bye"}],"authorContributionMap":{"lamlaaaam":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"lamlaaaam"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"lamlaaaam":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"lamlaaaam"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"lamlaaaam":1}}]
