[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialise a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc contains description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param by contains deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Deadline(String desc, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    + by + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 34
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialise Duke with the filePath."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param filePath the path to save/read output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws FileNotFoundException for if file is not found."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Duke(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d storage.readFile();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Runs the Duke by initialise the Parser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Parser parser \u003d new Parser(ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        parser.parser(tasks, filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        new Duke(\"./duke.txt\").run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 31,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialise an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc contains description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param at contains deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Event(String desc, String at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            this.date \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 33
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Parser(Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes inputs from the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing all tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param filePath for path of file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void parser(TaskList tasks, String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                ui.bye();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                ui.list(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                String[] words \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (words[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        int index \u003d completeDelete(line, tasks.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        tasks.get(index).setDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        Storage.fileUpdate(tasks, path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        ui.done(tasks, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else if (words[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        int index \u003d completeDelete(line, tasks.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        ui.remove(tasks, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        tasks.delete(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        Storage.fileUpdate(tasks, path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else if (words[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    if (words.length \u003e 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        String keyword \u003d line.substring(5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        TaskList matches \u003d matchFinder(tasks, keyword);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        ui.foundMatches(matches);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        Task task \u003d taskClassify(line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        tasks.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        Storage.fileUpdate(tasks, path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        ui.add(task, tasks.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * returns the index of task to be deleted/completed if possible."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param str input line from user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param numTask total number of tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return int index of task in TaskList."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException if input is invalid or out of bounds."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static int completeDelete(String str, int numTask) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String[] words \u003d str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int len \u003d words.length;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (len \u003d\u003d 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String num \u003d words[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            boolean result \u003d num.matches(\".*\\\\d.*\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (result) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                int index \u003d Integer.parseInt(num) - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (index \u003e\u003d numTask || index \u003c 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Out of bounds of the list of tasks.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        throw new DukeException(\"OOPS!!! Invalid task provided.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static TaskList reader(File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String splitOn \u003d \"\\\\s*@\\\\s*\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String[] words \u003d line.split(splitOn);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int done \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (words.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                ToDo toDo \u003d new ToDo(words[2]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    toDo.setDone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                tasks.add(toDo);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (words[0].equals(\"[E]\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    Event event \u003d new Event(words[2], words[3]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        event.setDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    Deadline deadline \u003d new Deadline(words[2], words[3]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        deadline.setDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static TaskList matchFinder(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String desc \u003d task.desc;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (desc.contains(keyword)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                matches.add(task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Returns the task of correct type based on input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param str input by user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException for any invalid inputs."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static Task taskClassify(String str) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String[] words \u003d str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int len \u003d words.length;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    String desc \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        if (i \u003d\u003d len - 1) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            desc +\u003d words[i];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        desc +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return new ToDo(desc);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    String desc \u003d \"\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    String time \u003d \"\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    int count \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        if (words[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            count \u003d i + 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            desc \u003d desc.substring(0, desc.length() - 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        desc +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    if (count \u003d\u003d 0 || count \u003d\u003d len) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The date/time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    for (int j \u003d count; j \u003c len; j++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        if (j \u003d\u003d len - 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            time +\u003d words[j];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        time +\u003d words[j] + \" \";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return new Deadline(desc, time);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    String desc \u003d \"\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    String time \u003d \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    int count \u003d 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        if (words[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            count \u003d i + 1;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            desc \u003d desc.substring(0, desc.length() - 1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        desc +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    if (count \u003d\u003d 0 || count \u003d\u003d len) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The date/time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    for (int j \u003d count; j \u003c len; j++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        if (j \u003d\u003d len - 1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            time +\u003d words[j];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        time +\u003d \" \" + words[j];"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return new Event(desc, time);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 222
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Check if file exists, if it does then read it, else create a file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return TaskList containing any tasks from file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws FileNotFoundException if the file cannot be found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public TaskList readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return Parser.reader(new File(path.toString()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            File f \u003d new File(path.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Overwrites and updates the file at the path for changes to the tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing all tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param path where file is located."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws IOException for any input/ output issues with FileWriter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static void fileUpdate(TaskList tasks, Path path) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task t : tasks.getList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int done \u003d t.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (t instanceof Event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                fw.write(\"[E]@\" + done + \"@\" + t.desc + \"@\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        ((Event) t).at + System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                fw.write(\"[D]@\" + done + \"@\" + t.desc + \"@\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        ((Deadline) t).by + System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                fw.write(\"[T]@\" + done + \"@\" + t.desc +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                        System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 56
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialise a Task that is by default not done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc contains description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Produces the check or cross mark depending on isDone."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return string that contains either check or cross mark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * sets isDone to true."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.desc;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 33
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialises a TaskList with an empty ArrayList\u003cTask\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * returns task at the given index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index index of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return task at given index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Returns number of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return int representing size of ArrayList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Add task to TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param t task to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list.add(t);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Removes task at selected index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index index of task in ArrayList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 49
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialise a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc contains description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public ToDo(String desc) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 15
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Displays welcome message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Jia Le :)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"How may I be of assistance to you?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"list\" command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks is the TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void list(TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(count + \".\" + task.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"done\" command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks is the TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index represents the index of task in list that is completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void done(TaskList tasks, int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(tasks.get(index).toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"delete\" command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks is the TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index represents the index of task in list that is removed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void remove(TaskList tasks, int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(tasks.get(index).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"add\" command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param task is the Task to be added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param size the new size of the TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void add(Task task, int size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void foundMatches(TaskList tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(counter + \".\" + task.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Displays bye message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.print(\"Bye! Hope to see you again ;)\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 79
    }
  },
  {
    "path": "src/test/Java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void addTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        ToDo item \u003d new ToDo(\"hi\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        tasks.add(item);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void getTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        ToDo item \u003d new ToDo(\"hi\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        tasks.add(item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assertEquals(item.toString(), tasks.get(0).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void taskClassifyTest() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Event event \u003d new Event(\"stay behind\", \"today\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String desc \u003d \"event stay behind /at today\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                Parser.taskClassify(desc).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 33
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "javac  -cp \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\" -Xlint:none -d ..\\bin \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Duke.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Task.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\ToDo.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Event.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Deadline.java\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\"C:\\Program Files\\Java\\jdk-13.0.1\\bin\\java\" -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chiabs": 2,
      "-": 16
    }
  }
]
