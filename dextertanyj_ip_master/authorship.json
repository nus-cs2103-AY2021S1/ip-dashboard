[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    Duke(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Boolean isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                c.execute(taskList, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                c.printFeedback(ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (IncompleteDukeCommandException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.formattedPrint(ui.prependIndent(\"Something went wrong, but I\u0027m not sure what...\", 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ui.formattedPrint(ui.prependIndent(e.getMessage(), 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        new Duke(Storage.FILE_PATH).run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 43,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Encodable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface Encodable\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String encode();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/duke/Searchable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface Searchable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean match(String searchParameter);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Storage} class provides persistent local storage for tasks stored in the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The default local file path to be used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String FILE_PATH \u003d \"duke/localData/data.duke\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Storage} object from the specified file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param filePath the file path to store the local save file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *                 Relative to the user\u0027s home directory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Saves the specified list of tasks to the local save file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list the {@link TaskList} to be saved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if the file cannot be written to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void save(TaskList list) throws DukeStorageException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!Files.exists(path.getParent())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            boolean directoriesCreated \u003d path.getParent().toFile().mkdirs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (!directoriesCreated) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"I got lost somewhere in your folders.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Task item : list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                writer.write(item.encode() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"I didn\u0027t have enough strength to move the bits.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // TODO: Consider moving decoding switch statement to its own method or under a util class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a list of tasks loaded from the local save file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a list of tasks loaded from the local save file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if the file does not exist or its content corrupted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeStorageException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] directories \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Path path \u003d Paths.get(home, directories);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            File history \u003d new File(path.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Scanner sc \u003d new Scanner(history);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            List\u003cTask\u003e temporaryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Task loadedTask \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027E\u0027:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d Event.decode(line);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027D\u0027:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d Deadline.decode(line);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                case \u0027T\u0027:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    loadedTask \u003d ToDo.decode(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    throw new DukeStorageException(\"There\u0027s something wrong with my memory...\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                temporaryList.add(loadedTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return temporaryList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"There\u0027s something wrong with my memory...\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"I lost my memories.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 111
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Ui} class manages program input and output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DIVIDER \u003d \"________________________________________________________\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code Ui} instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string containing the specified content where each line is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * indented by the specified indent."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param content the content to indent"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param indent  the amount of spaces to indent by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String prependIndent(String content, int indent) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String spaces \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c indent; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            spaces +\u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] contentArray \u003d content.split(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c contentArray.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            result +\u003d spaces + contentArray[i] + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Formats and prints the specified content."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param content the content to be printed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void formattedPrint(String content) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.print(prependIndent(content, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the default welcome message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String welcomeMessage \u003d \"Konnichiwa!\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(welcomeMessage, 5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the message for failing to load storage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String loadingErrorMessage \u003d \"I think I lost my memory... Let me start afresh.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(loadingErrorMessage, 5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the default goodbye message."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String exitMessage \u003d \"Ja ne!\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.printf(prependIndent(exitMessage, 5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        System.out.println(prependIndent(DIVIDER, 4));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Reads in user input until the next line separator."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the user input that was read."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 92
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code CompleteCommand} class represents a command to create a new {@link Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task createdTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int remainingTaskCount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an add command with the specified type and specified {@code Task} parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param type           the type of {@code Task} to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param taskParameters the parameters used for creating the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the specified type is null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AddCommand(TaskType type, String taskParameters) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d Deadline.createTask(taskParameters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d Event.createTask(taskParameters);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            createdTask \u003d ToDo.createTask(taskParameters);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I don\u0027t understand.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code AddCommand} by adding the created {@code Task} to the specified {@code list}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        list.add(createdTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        remainingTaskCount \u003d list.taskCount();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code AddCommand}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code AddCommand} was not executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String feedback \u003d String.format("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in your list.\\n\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    createdTask.toString(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    remainingTaskCount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.formattedPrint(ui.prependIndent(feedback, 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Add command was not completed.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 85
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Command} class provides a skeletal implementation of an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected boolean completed \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes the command with the supplied {@code list} and {@code storage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract void execute(TaskList list, Storage storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback after this {@code Command} has been executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if this {@code Command} has not been executed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract void printFeedback(Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if this {@code Command} should terminate the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code Command} should terminate the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 37
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code CompleteCommand} class represents a command to mark a {@link Task} in a {@link TaskList} as complete."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task completedTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code CompleteCommand} with the specified {@code index}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CompleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code CompleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks the {@code Task} in the specified {@code list} at the stored {@code index} as complete."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completedTask \u003d list.markAsComplete(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code CompleteCommand}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code CompleteCommand} was not executed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String feedback \u003d String.format(\"Nice! I\u0027ve marked this task as complete:\\n  %s\\n\", completedTask.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.formattedPrint(ui.prependIndent(feedback, 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Complete command was not completed.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 63
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteAllCommand} class represents a command to remove all entries in a {@link TaskList}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteAllCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code CompleteCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes all contents in the specified {@code list}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        list.clearList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code DeleteAllCommand} was not executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String feedback \u003d \"I\u0027ve cleared all your tasks.\\nYou sure are efficient.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.formattedPrint(ui.prependIndent(feedback, 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Delete all command was not completed.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 50
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteCommand} class represents a command to delete a {@link Task} in a {@link TaskList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int remainingTaskCount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code DeleteCommand} with the specified {@code index}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code CompleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the {@code Task} in the specified {@code list} at the stored {@code index}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        deletedTask \u003d list.deleteTask(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        remainingTaskCount \u003d list.taskCount();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code DeleteCommand}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code DeleteCommand} was not executed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String feedback \u003d String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in your list.\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    deletedTask.toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    remainingTaskCount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.formattedPrint(ui.prependIndent(feedback, 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Delete command was not completed.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 67
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Exit} class represents a command to safely terminate the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code ExitCommand} by saving the specified {@code list} to file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        storage.save(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints a feedback confirming the execution of this {@code ExitCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code ExitCommand} was not executed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.exit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Exit command was not completed.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DeleteAllCommand} class represents a command to print all contents of a {@link TaskList}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String printout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Executes this {@code ListCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list    the currently loaded {@link TaskList} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param storage the currently loaded {@link Storage} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        printout \u003d list.listItems();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Prints the result of executing this {@code ListCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param ui the {@link Ui} instance to use for formatting."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IncompleteDukeCommandException if this {@code ListCommand} was not executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws IncompleteDukeCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.formattedPrint(ui.prependIndent(printout, 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"List command was not completed.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 50
    }
  },
  {
    "path": "src/main/java/duke/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.IncompleteDukeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String searchParameter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e results;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public SearchCommand(String searchParameter) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.searchParameter \u003d searchParameter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (task.match(searchParameter)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super.completed \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void printFeedback(Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String resultPrint \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Task result : results) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (resultPrint.length() \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    resultPrint \u003d resultPrint.concat(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                resultPrint \u003d resultPrint.concat(result.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ui.formattedPrint(ui.prependIndent(resultPrint, 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IncompleteDukeCommandException(\"Search command was not completed.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 53
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(String.format(\"Gomen nasai~ %s\\n\", message));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DukeStorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DukeStorageException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeTaskCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DukeTaskCreationException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DukeTaskCreationException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/IncompleteDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class IncompleteDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public IncompleteDukeCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ParseDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ParseDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ParseDukeCommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code DateParser} class provides methods for converting between {@code LocalDateTime} objects and strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_WITH_TIME \u003d Arrays.asList(\"d MMM uuuu HH:mm\", \"d-M-uuuu HH:mm\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \"d/M/uuuu HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cString\u003e ACCEPTED_FORMATS_DATE_ONLY \u003d Arrays.asList(\"d MMM uuuu\", \"d-M-uuuu\", \"d/M/uuuu\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int HAS_TIME_INDICATOR \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final int NULL_TIME_INDICATOR \u003d 30;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts the specified input into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Does not support storing seconds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param input the string to be converted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code LocalDateTime} object representing the specified date and time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the format of the input is not recognised."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static LocalDateTime parseString(String input) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (input.contains(\":\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_WITH_TIME) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(format))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                            .withSecond(HAS_TIME_INDICATOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (String format : ACCEPTED_FORMATS_DATE_ONLY) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // Since we do not support seconds for date and time based information, we use the second field to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    // differentiate between a LocalDateTime with no defined time and one with time defined at midnight."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return LocalDate.parse(input, DateTimeFormatter.ofPattern(format)).atStartOfDay()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                            .withSecond(NULL_TIME_INDICATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new DukeException(\"I\u0027m not quite sure if we know each other...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts the specified {@code LocalDateTime} object to a string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param dateTime the {@code LocalDateTime} object to be converted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the string representation of the specified {@code LocalDateTime} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static String parseLocalDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (dateTime.getSecond() \u003d\u003d 30) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_DATE_ONLY.get(0)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return dateTime.format(DateTimeFormatter.ofPattern(ACCEPTED_FORMATS_WITH_TIME.get(0)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 69
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.CompleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.DeleteAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.command.SearchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.ParseDukeCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Parser} class provides methods for parsing user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * An enum containing keywords used by the user for program control."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    enum Keyword {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EXIT(\"exit\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LIST(\"list\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        COMPLETE(\"complete\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EVENT(\"event\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DELETE(\"delete\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SEARCH(\"search\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private final String input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Keyword(String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            input \u003d keyword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * Finds and returns the {@code Keyword} matching the specified input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @param keyword the input to match against."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @return the {@code keyword} corresponding to the specified input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         * @throws ParseDukeCommandException if there is no matching {@code Keyword}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public static Keyword findKeyword(String keyword) throws ParseDukeCommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (Keyword k : values()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (keyword.equals(k.input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return k;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseDukeCommandException(\"Wakarimasen~\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the specified user input and returns its corresponding {@link Command}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param fullCommand the user input to be parsed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Command} object to be executed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseDukeCommandException if the user input is not recognised."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Command parse(String fullCommand) throws ParseDukeCommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] inputs \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // By spec, inputs is guaranteed to have at least one element."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String userInput \u003d inputs[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Keyword keyword \u003d Keyword.findKeyword(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case COMPLETE:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                int index \u003d Integer.parseInt(fullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new CompleteCommand(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"What did you complete exaclty?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"This isn\u0027t harry potter, please use only integers.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (fullCommand.toLowerCase().contains(\"all\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new DeleteAllCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    int index \u003d Integer.parseInt(fullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new DeleteCommand(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"What do you want to remove exactly?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"This isn\u0027t harry potter, please use only integers.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.DEADLINE, inputs[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"What are you rushing for? To wait?\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.TODO, inputs[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"I know your life is empty but your todo can\u0027t be empty.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new AddCommand(TaskType.EVENT, inputs[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"Are you going to attend a nameless event?\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case SEARCH:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return new SearchCommand(inputs[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new ParseDukeCommandException(\"I don\u0027t have the answer to every or anything\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseDukeCommandException(\"Wakarimasen~\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 122
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Deadline} class represents a task with a specific deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String DEADLINE_DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Deadline(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code Deadline} object with the specified details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description and deadline of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Deadline} object with the specified details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Deadline createTask(String details) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] detailsArray \u003d details.split(DEADLINE_DELIMITER, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String description \u003d detailsArray[0].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String dateTimeString \u003d detailsArray[1].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime dateTime \u003d DateParser.parseString(dateTimeString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"So you never did plan on doing it huh...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into a {@code Deadline} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code Deadline} reconstructed from the encoded string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Deadline decode(String code) throws DukeStorageException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content.length !\u003d 4) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(content[3], DateParser.parseString(content[2]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                newDeadline.setCompleted();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (!content[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return newDeadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"Something doesn\u0027t seem right...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"D|%s|%s|%s\", super.completed ? \"Y\" : \"N\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTime(dateTime),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDate searchDate \u003d DateParser.parseString(searchParameter).toLocalDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (searchDate.isEqual(dateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return searchParameter.contains(description) || description.contains(searchParameter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + DateParser.parseLocalDateTime(dateTime) + \")\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 108
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Event} class represents an event with a scheduled time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String EVENT_DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Event(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an {@code Event} object with the specified details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description and time of the event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Event} object with the specified details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Event createTask(String details) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String[] detailsArray \u003d details.split(EVENT_DELIMITER, 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String description \u003d detailsArray[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String dateTimeString \u003d detailsArray[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDateTime dateTime \u003d DateParser.parseString(dateTimeString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new Event(description, dateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"Wow that sure is one long event...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into an {@code Event} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Event} reconstructed from the encoded string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Event decode(String code) throws DukeStorageException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content.length !\u003d 4) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Event newEvent \u003d new Event(content[3], DateParser.parseString(content[2]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                newEvent.setCompleted();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (!content[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return newEvent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"Something doesn\u0027t seem right...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Event}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Event}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"E|%s|%s|%s\", super.completed ? \"Y\" : \"N\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DateParser.parseLocalDateTime(dateTime),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalDate searchDate \u003d DateParser.parseString(searchParameter).toLocalDate();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (searchDate.isEqual(dateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return searchParameter.contains(description) || description.contains(searchParameter);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Event} object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + DateParser.parseLocalDateTime(dateTime) + \")\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 106
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Encodable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.Searchable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code Task} class provides a skeletal implementation of an object representing a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Implements the {@code Encodable} and {@code Searchable} interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public abstract class Task implements Encodable\u003cTask\u003e, Searchable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected boolean completed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an instance of a task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completed \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks a task as complete."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setCompleted() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        completed \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return completed ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code Task}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Contains the description and completion status of this {@code Task}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code Task}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 46
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code TaskList} class is an ordered collection of {@link Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * This class provides methods to add, delete and mark as complete {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * This class also provides methods to list and remove all {@code Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Implements the {@code Iterable} interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTask\u003e store;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs an empty {@code TaskList} instance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code TaskList} containing {@code Task} of the specified list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param list the list of {@code Task} whose contents are to be imported into this {@code TaskList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store \u003d list;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds the specified {@code Task} to the end of this {@code TaskList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param item the task to be inserted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the task that was inserted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task add(Task item) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store.add(item);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Marks the {@code Task} at the specified index in this {@code TaskList} as complete."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to mark as complete."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code Task} that was marked as complete."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException if the index is out of range."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task markAsComplete(int index) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Task selected \u003d store.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            selected.setCompleted();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return selected;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find that task. Are you trying to make 2020 worse?\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the {@code Task} at the specified index in this {@code TaskList}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param index the index of the {@code Task} to delete."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the {@code Task} that was deleted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Task removed \u003d store.remove(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return removed;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find that task. Are you trying to make 2020 worse?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes all existing {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return true if this {@code TaskList} was successfully cleared."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean clearList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String listItems() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (store.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return \"Congratulations! You don\u0027t have any tasks left to do.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String list \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (int i \u003d 0; i \u003c store.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                list +\u003d String.format(\"%d.%s\\n\", i + 1, store.get(i).toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the number of {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the number of {@code Task} in this {@code TaskList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int taskCount() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return store.size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an {@code Iterator} over the contents of this {@code TaskList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an {@code Iterator} over the contents of this {@code TaskList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return store.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 119
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * An enum containing the types of {@link Task} supported by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 10
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The {@code ToDo} class represents the most basic task with no additional parameters."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Extends the {@link Task} class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code ToDo} object with the specified details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param details the description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code ToDo} object with the specified details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeTaskCreationException if format of the specified details is not recognised."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static ToDo createTask(String details) throws DukeTaskCreationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (details \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeTaskCreationException(\"I need something to work with.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ToDo(details);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Decodes an encoded string into a {@code ToDo} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param code the encoded string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a {@code ToDo} reconstructed from the encoded string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DukeStorageException if format of the code is incorrect."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static ToDo decode(String code) throws DukeStorageException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (code.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            String[] content \u003d code.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content.length !\u003d 3) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo newToDo \u003d new ToDo(content[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (content[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                newToDo.setCompleted();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            } else if (!content[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new DukeStorageException(\"There are some holes in my memory...\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return newToDo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DukeStorageException(\"Something doesn\u0027t seem right...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return an encoded string representation of this {@code Deadline}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(\"T|%s|%s\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.completed ? \"Y\" : \"N\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                super.description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a string representation of this {@code ToDo}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return a string representation of this {@code ToDo}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean match(String searchParameter) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return description.contains(searchParameter) || searchParameter.contains(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 81
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateOnly_Success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"return book /by 20-03-2019\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][✘] return book (by: 20 Mar 2019)\", deadline.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateTime_Success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"IP Project A-JUnit /by 20-03-2019 23:59\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][✘] IP Project A-JUnit (by: 20 Mar 2019 23:59)\", deadline.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_unrecognisedDate_Failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Fix parsing /by 20th January 2019\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I\u0027m not quite sure if we know each other...\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_unrecognisedTime_Failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Fix parsing /by 20th January 2019\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I\u0027m not quite sure if we know each other...\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDate_Failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(\"Submit homework\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"So you never did plan on doing it huh...\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_Failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.createTask(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I need something to work with.\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.createTask(\"Description /by 1 Jan 2020 11:59\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"D|N|1 Jan 2020 11:59|Description\", deadline.encode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Deadline deadline \u003d Deadline.decode(\"D|N|1 Jan 2020 11:59|Description\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[D][✘] Description (by: 1 Jan 2020 11:59)\", deadline.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|1 Jan 2020 11:59|Description\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|N\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"D|X|Description\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Deadline deadline \u003d Deadline.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"Something doesn\u0027t seem right...\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 101
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeStorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import duke.exceptions.DukeTaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_dateOnly_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.createTask(\"return book\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[T][✘] return book\", todo.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void createTask_withoutDescription_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeTaskCreationException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.createTask(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"I need something to work with.\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void encode_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.createTask(\"Description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"T|N|Description\", todo.encode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ToDo todo \u003d ToDo.decode(\"T|N|Description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(\"[T][✘] Description\", todo.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingCompletion_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|Description\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_missingDescription_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|N\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectCompletion_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"T|X|Description\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"There are some holes in my memory...\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void decode_incorrectTaskType_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DukeException thrown \u003d assertThrows(DukeStorageException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ToDo todo \u003d ToDo.decode(\"E|X|Description\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(thrown.getMessage().contains(\"Something doesn\u0027t seem right...\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 71
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline return book /by 14 Aug 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event celebrate birthday /at 22 Aug 2020 10:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done -3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "todo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "event missing time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "deadline missing duedate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 1.5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 22
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "del %systemdrive%%homepath%\\duke\\localData\\duke.data"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "rm $HOME/duke/localData/data.duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/*/*.java ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 3,
      "-": 37
    }
  }
]
