[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "chrystalquek": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "A simple task manager to help you manage the tasks in your life."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### Prioritise Tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Tag tasks to their priority levels to know what\u0027s important to you - high, medium and low"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### Search for Tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Search for tasks by keywords or dates"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### Manage Different Kinds of Tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Manage different kinds of tasks depending on what you need - ToDos, Deadlines, Events"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Download latest release from \u003chttps://github.com/chrystalquek/ip/releases\u003e .Double click on the jar file and the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " application page will appear."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "If you want to use the Command Line Interface, git clone \u003chttps://github.com/chrystalquek/ip\u003e. From the terminal, navigate to the directory of the project and run the Duke class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " Duke will start responding to what you type in the terminal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `todo` - Add a ToDo"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Adds a ToDo to a list of Tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`todo (description)`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`todo (description) /priority (priority level)`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[T][✘] todo (priority: medium)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `deadline` - Add a Deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Adds a Deadline to a list of Tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`deadline (description) /by (date)`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`deadline (description) /by (date) /priority (priority level)`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[D][✘] deadline (by: Mar 4 2020)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `event` - Add a Event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Adds a Event to a list of Tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`event (description) /at (date)`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`event (description) /at (date) /priority (priority level)`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[E][✘] event (by: Mar 4 2020) (priority: low)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `list` - See all tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Displays all tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. [E][✘] fb hackathon (at: Oct 4 2020)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "2. [D][✘] cs2103T iP (by: Sep 18 2020) (priority: high)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `tasks due on` - Search tasks by date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Displays tasks with date on a certain date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`tasks due on (date)`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Here are the tasks in your list that occur on Oct 4 2020:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. [E][✘] fb hackathon (at: Oct 4 2020)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `find` - Search tasks by keyword"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Displays tasks which contain a certain keyword."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`find (keyword)`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Displays tasks which contain a certain keyword."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. [E][✘] fb hackathon (at: Oct 4 2020)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `done` - Complete a task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "If task is yet to be completed, task will be marked as done."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "If task has already been marked as done, you will be prompted that the task is already completed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`done (index in task list)`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[T][✓] todo (priority: medium)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `delete` - Delete a task"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "If index is valid, task will be removed from the task list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "If index is invalid, you will be prompted that the index provided is out of range."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`delete (index in task list)`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[T][✓] todo (priority: medium)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### `bye` - Exit Duke"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Exits the program and closes the window."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 171,
      "-": 13
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * AddCommand is a request to add a Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a new AddCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param taskType    Enum with restricted types."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param description Description of Task to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param date        Date of Task if applicable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public AddCommand(TaskType taskType, String description, Date date, Priority priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Task createNewTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (taskType \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ToDo(description, false, priority);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new Deadline(description, date, false, priority);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (taskType \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new Event(description, date, false, priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Adds a task to the TaskList, updates storage with added task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be modified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage to be updated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Task task \u003d createNewTask();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert task \u003d\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storage.saveList(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getAddTask(task, tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 56
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * A Command is a parsed request from the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Modifies tasks and storage of the Duke instance depending on the type of Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be modified."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage to be activated if there are any changes to TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public abstract ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) throws DukeException, TaskException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns false for all commands except ExitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return Whether Command is an ExitCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 25
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Deadline is a type of Task but with a time limit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Date by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a new Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param description Description of Deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param by          Due time of deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param isDone      True if completed, false if yet to be completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Deadline(String description, Date by, boolean isDone, Priority priority) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(description, TaskType.DEADLINE, isDone, priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.getSavedString() + \" | \" + Ui.formatDate(by) + \" | \" + (priority \u003d\u003d null ? \"-\" : priority.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isOccuringOn(Date date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return date.equals(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.toString() + \" (by: \" + Ui.formatDate(by) + \")\" + (priority \u003d\u003d null ? \"\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                : \" (priority: \" + priority.toString() + \")\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 37
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * DeleteCommand is a request to delete a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final int idx;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public DeleteCommand(int idx) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Deletes a task from the TaskList updates storage with deleted task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be modified."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage to be updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing response message from Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Task deletedTask \u003d tasks.removeTask(idx);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storage.saveList(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getDeletedTask(deletedTask, tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String toInputString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"delete\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 33
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "// adapted from https://se-education.org/guides/tutorials/javaFx.html"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void setError() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        dialog.setTextFill(Color.web(\"#ff0000\", 0.8));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img, boolean isError) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (isError) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            db.setError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 69
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * DoneCommand is a request to mark a Task as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final int idx;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public DoneCommand(int idx) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Marks a task from the TaskList as done, updates storage about finished task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be modified."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage to be updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing response message from Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) throws DukeException, TaskException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        tasks.markAsDone(idx);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storage.saveList(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getDoneTask(tasks.getTask(idx));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String toInputString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"done\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 34
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Duke is the application that the user is aware of."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a new Duke for GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // path is set if GUI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        tasks \u003d new TaskList(storage.initializeTasks());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a new Duke for CommandLineInterface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param filePath file path where a file containing taskList from last execution of Duke is stored."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        tasks \u003d new TaskList(storage.initializeTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getResponse(String text) throws DukeException, TaskException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Command c \u003d Parser.parse(text);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.formatMultiLine(c.execute(tasks, storage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Starts an execution of Duke on Command Line Interface."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * There is a Welcome, a series of Commands and finally a Goodbye from Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        System.out.println(Ui.formatResponse(Ui.getWelcome()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                Command c \u003d Parser.parse(sc.nextLine());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                System.out.println(Ui.formatResponse(c.execute(tasks, storage)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                System.out.println(Ui.formatResponse(ex.getMessage()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 54,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Exception that occurs during a Duke exection."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(\"\\u2639 OOPS!!! I\u0027m sorry, but \" + msg + \" :-(\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Event is a type of Task but with a date when it is held."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Date at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a new Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param description Description of Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param at          Time of Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param isDone      true if event is over, false if event if in the future."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Event(String description, Date at, boolean isDone, Priority priority) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(description, TaskType.EVENT, isDone, priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.getSavedString() + \" | \" + Ui.formatDate(at) + \" | \" + (priority \u003d\u003d null ? \"-\" :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                priority.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isOccuringOn(Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return date.equals(at);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.toString() + \" (at: \" + Ui.formatDate(at) + \")\" + (priority \u003d\u003d null ? \"\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                : \" (priority: \" + priority.toString() + \")\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 39
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * DeleteCommand is a request to stop Duke from running."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * No action is required from ExitCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be modified."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage to be activated if there are any changes to TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing response message from Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getGoodbye();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String toInputString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"bye\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 29
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 11
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * ListCommand is a request to display all current tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Displays all current tasks with their TaskType, done status and description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be printed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage is not activated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing response message from Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getTaskList(tasks, null, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String toInputString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 24
    }
  },
  {
    "path": "src/main/java/ListDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ListDateCommand extends ListCommand {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Date on;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a ListCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param on      Date that tasks to be displayed occur on."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ListDateCommand(Date on) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Displays all current tasks with their TaskType, done status and description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be printed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage is not activated."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing response message from Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getTaskList(tasks, on, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String toInputString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"tasks due on\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 31
    }
  },
  {
    "path": "src/main/java/ListKeywordCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ListKeywordCommand extends ListCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String keyWord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a ListCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param keyWord Keyword that tasks to be displayed must contain in their description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ListKeywordCommand(String keyWord) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Displays all current tasks with their TaskType, done status and description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   TaskList to be printed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param storage Storage is not activated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing response message from Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cString\u003e execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Ui.getTaskList(tasks, null, keyWord);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String toInputString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"find\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 30
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "// adapted from https://se-education.org/guides/tutorials/javaFx.html"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "// adapted from https://se-education.org/guides/tutorials/javaFx.html"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Initiaizes the scrollPane and dialogBox with a welcome message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        DialogBox dialogBox \u003d DialogBox.getUserDialog(Ui.formatMultiLine(Ui.getWelcome()), dukeImage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        dialogContainer.getChildren().add(dialogBox);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert duke \u003d\u003d null : \"Duke should not be null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (input.equals(ExitCommand.toInputString())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage, false)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String response \u003d ex.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage, true)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 71
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Parser takes in a variety of strings, makes sense of the strings and creates relevant objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses dates that are of the accepted date formats."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param str String to parse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return Date if successfully parsed, null if wrong date format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    // adapted from https://stackoverflow.com/questions/4024544/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    // how-to-parse-dates-in-multiple-formats-using-simpledateformat"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Date parseDate(String str) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-M-dd\", \"dd/M/yyyy HHmm\", \"dd/M/yyyy\", \"MMM d yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return new SimpleDateFormat(formatString).parse(str);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                // if str is not of that date format, can continue to check if it is of other formats"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                // try catch necessary otherwise there might be a RunTime error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static boolean isEmptyFromIdx(String userInput, int idx) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return userInput.length() \u003d\u003d idx || userInput.substring(idx).isBlank();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static int parseTaskIndex(String userInput, int taskIdx) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return Integer.parseInt(userInput.substring(taskIdx + 1)) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new DukeException(\"task index is empty\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new DukeException(\"task index is not a valid number\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static Priority parseTaskPriority(String userInput, TaskType taskType) throws TaskException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String priorityIndicator \u003d \" /priority \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String[] highPriority \u003d {\"high\", \"urgent\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String[] mediumPriority \u003d {\"medium\", \"normal\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String[] lowPriority \u003d {\"low\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int startIdxofPriorityIndicator \u003d userInput.indexOf(priorityIndicator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (startIdxofPriorityIndicator \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return null; // no priority indicated (since its optional)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int endIdxofPriorityIndicator \u003d startIdxofPriorityIndicator + priorityIndicator.length();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String priority \u003d userInput.substring(endIdxofPriorityIndicator).toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            boolean isHighPriority \u003d Arrays.stream(highPriority).anyMatch(priority::equals);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            boolean isMediumPriority \u003d Arrays.stream(mediumPriority).anyMatch(priority::equals);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            boolean isLowPriority \u003d Arrays.stream(lowPriority).anyMatch(priority::equals);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (isHighPriority) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return Priority.HIGH;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } else if (isMediumPriority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return Priority.MEDIUM;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } else if (isLowPriority) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return Priority.LOW;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                throw new TaskException(taskType, \"priority\", TaskExceptionType.FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"priority\", TaskExceptionType.FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static Date parseTaskDate(String userInput, TaskType taskType, String dateIndicator) throws TaskException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int startIdxofDateIndicator \u003d userInput.indexOf(dateIndicator);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (startIdxofDateIndicator \u003d\u003d -1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"time\", TaskExceptionType.EMPTY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int startIdxofDate \u003d startIdxofDateIndicator + dateIndicator.length();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int endIdxofDate \u003d userInput.substring(startIdxofDate).indexOf(\" /\") \u003d\u003d -1"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ? userInput.length() : startIdxofDate + userInput.substring(startIdxofDate).indexOf(\" /\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (endIdxofDate \u003c\u003d startIdxofDate || userInput.substring(startIdxofDate, endIdxofDate).isBlank()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"time\", TaskExceptionType.EMPTY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Date date \u003d parseDate(userInput.substring(startIdxofDate));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"time\", TaskExceptionType.FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static String parseTaskDescription(String userInput, TaskType taskType) throws TaskException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int endIdx \u003d userInput.indexOf(\" /\") \u003d\u003d -1 ? userInput.length() : userInput.indexOf(\" /\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (userInput.length() \u003c\u003d taskType.toString().length() || taskType.toString().length() + 1 \u003e\u003d endIdx) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"description\", TaskExceptionType.EMPTY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String description \u003d userInput.substring(taskType.toString().length() + 1, endIdx);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"description\", TaskExceptionType.EMPTY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static AddCommand parseAddTask(String userInput) throws TaskException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (userInput.startsWith(TaskType.TODO.toString())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String description \u003d parseTaskDescription(userInput, TaskType.TODO);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Priority priority \u003d parseTaskPriority(userInput, TaskType.TODO);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new AddCommand(TaskType.TODO, description, null, priority);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(TaskType.DEADLINE.toString())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String description \u003d parseTaskDescription(userInput, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Date date \u003d parseTaskDate(userInput, TaskType.DEADLINE, \" /by \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Priority priority \u003d parseTaskPriority(userInput, TaskType.TODO);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new AddCommand(TaskType.DEADLINE, description, date, priority);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(TaskType.EVENT.toString())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String description \u003d parseTaskDescription(userInput, TaskType.EVENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Date date \u003d parseTaskDate(userInput, TaskType.EVENT, \" /at \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Priority priority \u003d parseTaskPriority(userInput, TaskType.EVENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new AddCommand(TaskType.EVENT, description, date, priority);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert true : \"Task type could not be identified.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return null; // won\u0027t hit"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses in a user input that is a String and generates a command based on the input."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return Command based on userInput."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws TaskException"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Command parse(String userInput) throws DukeException, TaskException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (userInput.equals(ListCommand.toInputString())) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(DoneCommand.toInputString())) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            int taskIdx \u003d parseTaskIndex(userInput, DoneCommand.toInputString().length());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new DoneCommand(taskIdx);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(DeleteCommand.toInputString())) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            int taskIdx \u003d parseTaskIndex(userInput, DeleteCommand.toInputString().length());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new DeleteCommand(taskIdx);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(ListDateCommand.toInputString())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (isEmptyFromIdx(userInput, ListDateCommand.toInputString().length())) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                throw new DukeException(\"time is empty\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Date date \u003d parseDate(userInput.substring(ListDateCommand.toInputString().length()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                throw new DukeException(\"time is the wrong format\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ListDateCommand(date);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(ListKeywordCommand.toInputString())) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (isEmptyFromIdx(userInput, ListKeywordCommand.toInputString().length())) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                throw new DukeException(\"keyword is empty\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String keyWord \u003d userInput.substring(ListKeywordCommand.toInputString().length());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ListKeywordCommand(keyWord);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.equals(ExitCommand.toInputString())) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (userInput.startsWith(TaskType.TODO.toString()) || userInput.startsWith(TaskType.DEADLINE.toString())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || userInput.startsWith(TaskType.EVENT.toString())) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return parseAddTask(userInput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new DukeException(\"I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 174
    }
  },
  {
    "path": "src/main/java/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    HIGH {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"high\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    MEDIUM {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"medium\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    LOW {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"low\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 21
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Storage ensures that the current tasks are always backed up in a separate file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final HashMap\u003cString, Priority\u003e priorityHashMap \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            put(Priority.HIGH.toString(), Priority.HIGH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            put(Priority.MEDIUM.toString(), Priority.MEDIUM);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            put(Priority.LOW.toString(), Priority.LOW);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            put(\"-\", null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses in a line from the storage file and returns a Task based on the details retrieved from that line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param display A line from the storage file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return Task based on the details retrieved from display."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Task addTaskFromStorage(String display) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String[] taskDetails \u003d display.split(\" \\\\| \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert taskDetails.length !\u003d 3 || taskDetails.length !\u003d 4 || taskDetails.length !\u003d 5 : \"Task saved wrongly - \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + \"contains wrong number of\" + \" \" + \"arguments.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert !taskDetails[1].equals(\"0\") || !taskDetails[1].equals(\"1\") : \"Task saved wrongly - completion status \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + \"should have been saved as a 0 or 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        boolean isDone \u003d taskDetails[1].equals(\"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String description \u003d taskDetails[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (taskType.equals(TaskType.TODO.getSymbol())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Priority priority \u003d priorityHashMap.get(taskDetails[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ToDo(description, isDone, priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (taskType.equals(TaskType.DEADLINE.getSymbol())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert taskDetails.length !\u003d 5 : \"Task saved wrongly - contains wrong number of arguments.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Date date \u003d Parser.parseDate(taskDetails[3]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Priority priority \u003d priorityHashMap.get(taskDetails[4]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new Deadline(description, date, isDone, priority);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else if (taskType.equals(TaskType.EVENT.getSymbol())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert taskDetails.length !\u003d 5 : \"Task saved wrongly - contains wrong number of arguments.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Date date \u003d Parser.parseDate(taskDetails[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Priority priority \u003d priorityHashMap.get(taskDetails[4]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new Event(description, date, isDone, priority);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert true : \"Task saved wrongly - task type could not be identified\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return null; // will not reach this"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns arrayList of Tasks from storage file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * When Duke is just started up, it reads from the storage file, goes through each line, each corresponding to a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * task and returns the tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList of Tasks according to the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cTask\u003e initializeTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                Task task \u003d addTaskFromStorage(sc.nextLine());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                assert task \u003d\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert true : \"Parsing error: file does not exist\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ArrayList\u003c\u003e(); // should not reach this line"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Overwrites the current storage file with updated taskList, or creates a new storage file with updated taskList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * if it currently does not exist."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param taskList Details of TaskList are gotten from."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void saveList(TaskList taskList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String contents \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                contents +\u003d task.getSavedString() + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            fw.write(contents);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert true : \"Tasks could not be saved.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 120
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Task is part of a TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected final TaskType taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a new Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Constructor used by subclasses since Task is an abstract class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param taskType    Type of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param isDone      true if Task is done, false if Task is yet to be done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Task(String description, TaskType taskType, boolean isDone, Priority priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\"; //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Marks a task as done if it is not done yet."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws TaskException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void markAsDone() throws TaskException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new TaskException(taskType, \"done status\", TaskExceptionType.DONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Used by Storage to record the details of a Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String that contains the details of a Task and is saved in a specified file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return taskType.getSymbol() + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isOccuringOn(Date date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Checks if Task fulfil date and keyword criteria."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param date Date that Task must be on but if date is null, Task is deemed to have fulfiled criteria."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param keyWord Keyword that Task description must contain but if keyWord is null, Task is deemed to have"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *                fulfiled criteria."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return boolean indicates whether Task passed the criteria."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean fulfilCriteria(Date date, String keyWord) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        boolean fulfilDateCriteria \u003d date \u003d\u003d null || isOccuringOn(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        boolean fulfilKeywordCriteria \u003d keyWord \u003d\u003d null || description.toLowerCase().contains(keyWord.toLowerCase());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return fulfilDateCriteria \u0026\u0026 fulfilKeywordCriteria;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"[\" + taskType.getSymbol() + \"]\" + getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 76
    }
  },
  {
    "path": "src/main/java/TaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Exception that occurs because of an invalid field of a Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TaskException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public TaskException(TaskType taskType, String taskProperty, TaskExceptionType taskExceptionType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(\"\\u2639 OOPS!!! The \" + taskProperty + \" of a \" + taskType.toString() + \" \" + taskExceptionType);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 9
    }
  },
  {
    "path": "src/main/java/TaskExceptionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Types of TaskException are allowed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum TaskExceptionType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    EMPTY {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"is empty\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    FORMAT {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"is of the wrong format\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"already completed\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 23
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * TaskList contains all the tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Task getTask(int idx) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return tasks.get(idx);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new DukeException(\"task index out of bounds\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void markAsDone(int idx) throws DukeException, TaskException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        getTask(idx).markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Deletes a task from tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param idx Index in tasks for which task is to be removed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return Task to be removed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Task removeTask(int idx) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return tasks.remove(idx);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new DukeException(\"task index out of bounds\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Adds a task to tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert task \u003d\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 58
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * TaskType that is allowed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String getSymbol() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String getSymbol() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"D\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String getSymbol() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return \"event\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public abstract String getSymbol();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 40
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * ToDo is the simplest kind of Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ToDo(String description, boolean isDone, Priority priority) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        super(description, TaskType.TODO, isDone, priority);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getSavedString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.getSavedString() + \" | \" + (priority \u003d\u003d null ? \"-\" : priority.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return super.toString() + (priority \u003d\u003d null ? \"\" : \" (priority: \" + priority.toString() + \")\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Ui handles interactions with the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final ArrayList\u003cString\u003e WELCOME_MSG \u003d new ArrayList\u003c\u003e(Arrays.asList(\"Hello! I\u0027m Duke\", \"What can I\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \" do for you?\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final ArrayList\u003cString\u003e GOODBYE_MSG \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \"Bye. Hope to see you again soon!\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String DONE_MSG \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String DELETED_MSG \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String ADD_MSG \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String formatDate(Date date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return (new SimpleDateFormat(\"MMM d yyyy\")).format(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Formats each feedback message, e.g. enclosed in two lines."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param response ArrayList of feedback messages."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String of formatted responses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String formatResponse(ArrayList\u003cString\u003e response) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String indentLine \u003d INDENT + LINE + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String result \u003d indentLine;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (String resp : response) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            result +\u003d INDENT + INDENT + resp + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        result +\u003d indentLine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Formats each feedback message, e.g. enclosed in two lines."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param response ArrayList of feedback messages."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String of formatted responses."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String formatResponse(String response) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return formatResponse(new ArrayList\u003c\u003e(Arrays.asList(response)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Formats each feedback message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param response ArrayList of feedback messages."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String of formatted responses."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String formatMultiLine(ArrayList\u003cString\u003e response) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (String resp : response) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            result +\u003d resp + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns formatted welcome message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList welcome message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ArrayList\u003cString\u003e getWelcome() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return WELCOME_MSG;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns formatted goodbye message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String goodbye message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ArrayList\u003cString\u003e getGoodbye() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return GOODBYE_MSG;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a ArrayList String with count of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks TaskList to count number of tasks from."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String with count of tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String getListCount(TaskList tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert tasks \u003d\u003d null : \"TaskList should not be null\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return \"Now you have \" + tasks.getCount() + \" task\" + (tasks.getCount() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a ArrayList String containing details of all the tasks that pass date and keyWord criteria."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param tasks   Tasks to filter from."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param date    Date to filter tasks by."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param keyWord Keyword to filter tasks by."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList containing details of tasks that fulfil the criteria."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ArrayList\u003cString\u003e getTaskList(TaskList tasks, Date date, String keyWord) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert tasks \u003d\u003d null : \"TaskList should not be null\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        int idx \u003d 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (task.fulfilCriteria(date, keyWord)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                lst.add((idx++) + \". \" + task.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(0, \"Here are the \" + ((keyWord \u003d\u003d null) ? \"\" : \"matching \") + \"tasks in your list\" + ((date \u003d\u003d null)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ? \"\" : \" that occur on \" + formatDate(date)) + \":\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a ArrayList String of a feedback message that task is marked as done."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param task Task that is done."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList feedback message that task is marked as done."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ArrayList\u003cString\u003e getDoneTask(Task task) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert task \u003d\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(DONE_MSG);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(INDENT + task.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a ArrayList String of a feedback message that task is deleted."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param task     Task that is deleted."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ArrayList\u003cString\u003e getDeletedTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert task \u003d\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert taskList \u003d\u003d null : \"TaskList should not be null\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(DELETED_MSG);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(INDENT + task.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(getListCount(taskList));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a ArrayList String of a feedback message that task is added to taskList."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param task     Task that is added."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param taskList TaskList"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return ArrayList feedback message that task is added to taskList."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ArrayList\u003cString\u003e getAddTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert task \u003d\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assert taskList \u003d\u003d null : \"TaskList should not be null\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ArrayList\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(ADD_MSG);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(INDENT + task.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        lst.add(getListCount(taskList));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 163
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        InputStream sysInBackup \u003d System.in;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"bye\".getBytes());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        System.setIn(sysInBackup);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 16
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseDate_differentDateFormats() throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-03-04\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Parser.parseDate(\"2020-03-04\"), date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Parser.parseDate(\"04/03/2020 0000\"), date);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Parser.parseDate(\"04/03/2020\"), date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Parser.parseDate(\"Mar 04 2020\"), date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_doneCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Parser.parse(\"done junknumber\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(ex.getMessage(), \"\\u2639 OOPS!!! I\u0027m sorry, but task index is not a valid number :-(\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_addCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Parser.parse(\"deadline return books /by\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The time of a deadline cannot be identified.\", ex.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Parser.parse(\"deadline   /by 2020-03-04\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\", ex.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            Parser.parse(\"junk input\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } catch (DukeException | TaskException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", ex.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 53
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String description \u003d \"description\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void markAsDone_correctDoneStatusShown() throws TaskException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ToDo todo \u003d new ToDo(description, false, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(todo.toString(), \"[\" + todo.taskType.getSymbol() + \"]\" + \"[\\u2718]\" + \" \" + description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(todo.toString(), \"[\" + todo.taskType.getSymbol() + \"]\" + \"[\\u2713]\" + \" \" + description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void getIsOccuringOn_eventAgainstTwoDates() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Event event \u003d new Event(description, new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-03-04\"), false, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(event.isOccuringOn(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-03-04\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(event.isOccuringOn(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2020-04-04\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "if ! ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "  )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "chrystalquek": 4
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Event.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "../src/main/java/ToDo.java"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 5
    }
  }
]
