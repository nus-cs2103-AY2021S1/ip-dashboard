[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 62
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 11
    }
  },
  {
    "path": "data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "T, 1, git push this code"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "E, 0, complete work , 2020-09-01 6PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "D, 0, finish more work , 2020-08-18"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 3
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 103
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"D\" + \", \"  + (isDone ? \"1\" : \"0\") + \", \" + description + \", \" + by.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 22
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ADD,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        SAVE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ERROR,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        BYE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Introduction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        switch (c) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case ADD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    Task curr \u003d tasks.addItem(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.addedItem(curr, tasks.getListSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } catch (DukeException ex1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    Task curr \u003d tasks.doneItem(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.doneItem(curr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } catch (DukeException ex1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    Task curr \u003d tasks.deleteItem(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.deleteItem(curr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } catch (DukeException ex1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                return ui.returnList(tasks.getList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case SAVE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    storage.overwriteData(tasks.getList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.save();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } catch (IOException ex1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                return ui.returnList(tasks.find(input));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case ERROR:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                return ui.defaultError();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                return ui.bye();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Duke d \u003d new Duke(\"data/Duke.txt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        while (!nextLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            d.run(nextLine);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 89,
      "-": 5
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Sorry (not sorry)!!\" + description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Event(String description, LocalDate date, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"E\" + \", \"  + (isDone ? \"1\" : \"0\") + \", \" + description + \", \" + date.toString() + \" \" + time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \" \" + time + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 25
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 8
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/Duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (response.equals(\"Bye! Please come again!\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            CompletableFuture\u003cVoid\u003e cf \u003d CompletableFuture.runAsync(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    Thread.sleep(100);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            cf.thenRun(Platform::exit).thenRun(() -\u003e System.exit(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 64
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Parses the String input into the YYYY/MM/DD format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return LocalDate in the correct format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if the input is invalid or in an unrecognisable format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static LocalDate dateParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            input \u003d input.replace(\"/\", \"-\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            LocalDate ret \u003d LocalDate.parse(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (DateTimeParseException ex1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Wrong formatting!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Converts the 24Hour into AM/PM format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input String that represents time in 24Hour."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return String that represents time in AM/PM."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static String timeParser(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String ret \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int hour \u003d Integer.valueOf(input)/100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (hour \u003e\u003d 12) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d \"PM\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d Integer.toString(hour \u003d\u003d 12 ? 12 : hour - 12).concat(ret);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d \"AM\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d Integer.toString(hour \u003d\u003d 0 ? 12 : hour).concat(ret);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the first word a String"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param text any String"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the first word in the string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static String getFirstWord(String text) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int index \u003d text.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (index \u003e -1) { // Check if there is more than one word."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return text.substring(0, index).trim(); // Extract first word."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return text; // Text is the first word itself."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a enum class item stored in Duke based on the first word of the input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return Duke Command to indicate which switch to enter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static Duke.Command parse(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (getFirstWord(input).equals(\"todo\") || getFirstWord(input).equals(\"deadline\") ||"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                getFirstWord(input).equals(\"event\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.ADD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (getFirstWord(input).equals(\"done\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.DONE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (getFirstWord(input).equals(\"delete\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.DELETE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.LIST;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.equals(\"save\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.SAVE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.contains(\"find\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.FIND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.BYE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.ERROR;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 84
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private ArrayList\u003cTask\u003e txtData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.txtData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            File dir \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (dir.exists()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                Scanner data \u003d new Scanner(dir);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                while (data.hasNextLine()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    String curr \u003d data.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    String[] info \u003d curr.split(\", \", 4);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    if (info[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ToDo tobeAdded \u003d new ToDo(info[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            tobeAdded.markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        txtData.add(tobeAdded);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } else if (info[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Deadline tobeAdded \u003d new Deadline(info[2], Parser.dateParser(info[3]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            tobeAdded.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        txtData.add(tobeAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } else if (info[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        String[] t \u003d info[3].split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Event tobeAdded \u003d new Event(info[2], Parser.dateParser(t[0]), t[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            tobeAdded.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        txtData.add(tobeAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return txtData;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (FileNotFoundException ex1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Saved Data not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (DateTimeParseException ex2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Date/Time incorrect format\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void overwriteData(ArrayList\u003cTask\u003e data) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            String newData \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            for (Task k : data) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                String textToAdd \u003d k.storageForm();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                newData +\u003d textToAdd + System.lineSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fw.write(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (IOException ex1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            System.out.println(\"Something went wrong... \" + ex1.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 72
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a special character based on the state of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a Tick if the task is marked as done or a cross if not."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return isDone? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Marks the Task as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a String to be written into saved data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a String that contains the necessary information in the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[\"+getStatusIcon()+\"] \" + this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 37
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * TaskList Class stores the list of tasks and modifies the list according to commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Default constructor that initialises an empty ArrayList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Initialises an Arraylist of Tasks if there is saved data present."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param savedData an ArrayList of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e savedData) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.list \u003d savedData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a new subclass of Task based on a String input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a Task that is either a ToDo, a Deadline or an Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if command is invalid due to missing information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task addItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String arr[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Task curr \u003d new Task(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"The description of a \" + arr[0] + \" cannot be empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (arr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            curr \u003d new ToDo(arr[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            list.add(curr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (arr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            String info[] \u003d arr[1].split(\"/by \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Deadline not provided!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                curr \u003d new Deadline(info[0], Parser.dateParser(info[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                list.add(curr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (arr[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            String info[] \u003d arr[1].split(\"/at \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Time not provided!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                String[] t \u003d info[1].split(\" \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                curr \u003d new Event(info[0], Parser.dateParser(t[0]), Parser.timeParser(t[1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                list.add(curr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return curr;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Deletes an item based on the number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the Task that was deleted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if command is invalid due to missing or wrong information."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task deleteItem(String input) throws DukeException{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String info[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Task toBeDeleted \u003d new Task(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Which item???\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                int index \u003d Integer.parseInt(info[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                if (index \u003e list.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    throw new DukeException(\"Excuse Moi???\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    toBeDeleted \u003d list.get(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    list.remove(index - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return toBeDeleted;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } catch (NumberFormatException ex1){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Excuse Meee? number pls.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Marks an item as done based on the number"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the Task that was marked as done after it has been marked."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if command is invalid due to missing or wrong information."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task doneItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String info[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Task toBeRet \u003d new Task(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Which item???\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            int index \u003d Integer.parseInt(info[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (index \u003e list.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Excuse Moi???\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                list.get(index-1).markAsDone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                toBeRet \u003d list.get(index-1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return toBeRet;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String input) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String[] info \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cTask\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (Task k: list) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (k.description.contains(info[1])) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                ret.add(k);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the number of tasks on the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return integer representing the number of tasks on the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the current list of Tasks."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return an ArrayList of Tasks"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 138
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"T\" + \", \"  + (isDone ? \"1\" : \"0\") + \", \" + description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 17
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String line \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String loadFailMsg \u003d \"Sorry, I forgot you existed!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String addedMsg \u003d \"Alright, I\u0027ve added a new order: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String doneMsg \u003d \"Great choice! I have taken your order: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String deleteMsg \u003d \"Too bad. I\u0027ll remove the following order: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String saveMsg \u003d \"Aright, I have remembered your sins :)\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String retListMsg \u003d \"Here\u0027s what you have ordered...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String defaultError \u003d \"Wat talking you?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String byeMsg \u003d \"Bye! Please come again!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String newLine \u003d \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Scanner s;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Reads the next line of input by user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the next command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return s.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"Welcome to Hyu\u0027s drive-in!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"What would you like to have?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String addedItem(Task curr, int size) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "         return addedMsg + newLine + curr + newLine + \"You have ordered \" + size + \" items.\" + newLine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String showError(String ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ex + newLine;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String doneItem(Task curr) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return doneMsg + newLine + curr;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String deleteItem(Task curr) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return deleteMsg + newLine + curr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String returnList(ArrayList\u003cTask\u003e curr) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int k \u003d 0; k \u003c curr.size(); k++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            temp +\u003d ((k + 1) + \": \" + curr.get(k)) + newLine;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return retListMsg + newLine + temp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String save() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return saveMsg + newLine;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String defaultError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return defaultError + newLine;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return byeMsg + newLine;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return loadFailMsg + newLine;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 81
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//public class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @DynamicTest"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testDateParser() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"2020-08-04\", Parser.dateParser(\"2020/08/04\"));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"2020/08/04\", Parser.dateParser(\"2020/08/04\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testTimeParser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"12PM\", Parser.timeParser(\"1200\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"12AM\", Parser.timeParser(\"0000\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testGetFirstWord() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"This\", Parser.getFirstWord(\"This is me.\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"Chicken\", Parser.getFirstWord(\"Chicken came first.\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testParse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ADD\", String.valueOf(Parser.parse(\"todo read book\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ADD\", String.valueOf(Parser.parse(\"deadline finish iP /by 2020/08/25\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ADD\", String.valueOf(Parser.parse(\"event meeting /at 2020/08/31 1400\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"DONE\", String.valueOf(Parser.parse(\"done 1\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"DELETE\", String.valueOf(Parser.parse(\"delete 2\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"LIST\", String.valueOf(Parser.parse(\"list\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"SAVE\", String.valueOf(Parser.parse(\"save\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ERROR\", String.valueOf(Parser.parse(\"hello\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "delete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "even"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 14
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 1,
      "-": 37
    }
  }
]
