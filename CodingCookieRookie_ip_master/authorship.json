[
  {
    "path": "src/main/java/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    Deadlines(String task , String by) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(task, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return String.format(\"%s(by:%s)\", super.toString(), this.by);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 12
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void intro() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tHi handsome! My name is Duck. What can I do for you?\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void addTask(Task task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\" + \"\\n\\t\\t\" + task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void printList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for(int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(String.format(\"\\t%d. %s\", i + 1, taskList.get(i)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void markTaskDone(String task) throws DukeIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (task.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int taskNo \u003d Character.getNumericValue(task.charAt(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e taskList.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int index \u003d taskNo - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task t \u003d taskList.remove(index).doneTask();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\t\" + t);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(index, t);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void deleteTask(String task) throws DukeIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (task.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to delete is invalid\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int taskNo \u003d Character.getNumericValue(task.charAt(7));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e taskList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to delete is invalid\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int index \u003d taskNo - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task t \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tNoted. I\u0027ve removed this task:\" + \"\\n\\t\\t\" + t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void handleToDo(String task) throws DukeInvalidCommandException{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (task.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        task \u003d task.replace(\"todo \", \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Duke.addTask(new ToDos(task));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void handleDeadLine(String task) throws DukeInvalidCommandException{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        task \u003d task.replace(\"deadline \", \"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] stringArr \u003d task.split(\"/by\", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (stringArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        task \u003d stringArr[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String by \u003d stringArr[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Duke.addTask(new Deadlines(task, by));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void handleEvent(String task) throws DukeInvalidCommandException{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        task \u003d task.replace(\"event \", \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] stringArr \u003d task.split(\"/at\", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (stringArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        task \u003d stringArr[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String at \u003d stringArr[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Duke.addTask(new Events(task, at));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void main(String[] args) throws DukeRunTimeException{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Duke.intro();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            switch(task) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                case \"bye\" :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    System.out.print(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                case \"list\" :"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Duke.printList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                default :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        if (task.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            markTaskDone(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        } else if (task.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            handleToDo(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        } else if (task.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            handleDeadLine(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        } else if (task.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            handleEvent(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        } else if (task.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            deleteTask(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            throw new DukeInvalidCommandException(\"Sorry handsome but I\u0027m not sure about this command :)\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    } catch (DukeInvalidCommandException err) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        System.out.println(\"\\t\" + err.getLocalizedMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    } catch (DukeIndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    } catch (DukeIncompleteCommandException err) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);*/"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 120,
      "-": 7
    }
  },
  {
    "path": "src/main/java/DukeIncompleteCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIncompleteCommandException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DukeIncompleteCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5
    }
  },
  {
    "path": "src/main/java/DukeIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIndexOutOfBoundsException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DukeIndexOutOfBoundsException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5
    }
  },
  {
    "path": "src/main/java/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeInvalidCommandException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DukeInvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5
    }
  },
  {
    "path": "src/main/java/DukeRunTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeRunTimeException extends RuntimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DukeRunTimeException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 5
    }
  },
  {
    "path": "src/main/java/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    Events(String task , String at) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(task, TaskType.EVENT);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return String.format(\"%s(at:%s)\", super.toString(), this.at);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 12
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task(String task, TaskType taskType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task doneTask() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String status \u003d done ? \"[✓]\" : \"[✗]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskType + status + \" \" + task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 21
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    TODO (\"[T]\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DEADLINE (\"[D]\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    EVENT (\"[E]\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String taskSymbol;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    TaskType(String taskSymbol) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskSymbol \u003d taskSymbol;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskSymbol;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 16
    }
  },
  {
    "path": "src/main/java/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    ToDos(String task) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(task, TaskType.TODO);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 9
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 7,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "if [ ! -d \" C:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2\\bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    mkdir C:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "-": 36
    }
  }
]
