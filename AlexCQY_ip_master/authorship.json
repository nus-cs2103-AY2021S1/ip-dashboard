[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 59
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 12
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Duke duke \u003d new Duke(\"Tasks.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 52
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This class stores the various commands allowed by Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public final String cmd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    Command(String cmd) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method checks the user command and links it to the command values stored."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param userCommand The input command string by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return returns a command enum that has string values in it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public static Command valueOfUserCommand(String userCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        for (Command e : values()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (e.cmd.equals(userCommand)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 38
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This constructor creates a Deadline task instance, invoking the super class Task\u0027s constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param description the String description of the deadline task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param date the date where the task must be completed by. It is a type of LocalDateTime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Deadline(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String formatDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy h:mm a\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return \"[\" + getTaskType() + \"]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + \"[\" + getStatusIcon() + \"]\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + description + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + \"(by: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 36
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private UserInterface ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private TaskList tasksList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Duke() {} // empty constructor needed for javaFX"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Constructor for a duke object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param filePath the filepath that stores data of the duke obj"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.ui \u003d new UserInterface();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.tasksList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        // this method copy the task data to the taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.startup();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private void startup() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            storage.populateToLstOfTask(tasksList.getLstOfTask());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            ui.greetUser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            System.out.println(e.toString() + \" Error trying to load tasks\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String processCommand(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String cmd \u003d parsedUserInput[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Command checkedCommand \u003d Command.valueOfUserCommand(cmd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (checkedCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                return ui.showInvalidCommandMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                switch (checkedCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d ui.listTask(tasksList.getLstOfTask());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case BYE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    exit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d ui.showExitMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d done(parsedUserInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d addToDo(parsedUserInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d addEvent(parsedUserInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d addDeadline(parsedUserInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d delete(parsedUserInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                case FIND:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    result \u003d search(parsedUserInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showInvalidCommandMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        storage.saveTaskContents(tasksList.getLstOfTask());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assert tasksList !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String done(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String doneTask \u003d parsedUserInput[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            int doneTaskNumber \u003d Integer.parseInt(doneTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            int identifierNumberInArrayList \u003d doneTaskNumber - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Task task \u003d tasksList.getLstOfTask()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    .get(identifierNumberInArrayList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showMarkedTaskDoneMessage(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IndexOutOfBoundsException e1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showInvalidDoneCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String delete(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String deleteTask \u003d parsedUserInput[1];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            int doneTaskNumber \u003d Integer.parseInt(deleteTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            int identifierNumberInArrayList \u003d doneTaskNumber - 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            List\u003cTask\u003e lstOfTask \u003d tasksList.getLstOfTask();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Task task \u003d lstOfTask"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    .get(identifierNumberInArrayList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            lstOfTask.remove(identifierNumberInArrayList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showDeleteTaskMessage(task, tasksList.getNumOfTask());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IndexOutOfBoundsException e1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showInvalidDeleteCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String addToDo(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            //think of a way to avoid this test for exception"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            //currently this test if user input to do command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            //w/o any description"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String test \u003d parsedUserInput[1];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            for (int i \u003d 1; i \u003c parsedUserInput.length; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                if (i \u003d\u003d parsedUserInput.length - 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    taskDescription +\u003d parsedUserInput[i];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    taskDescription +\u003d parsedUserInput[i] + \" \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            ToDo td \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            tasksList.add(td);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showAddedTaskMessage(td, tasksList.getNumOfTask());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IndexOutOfBoundsException e1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showInvalidTodoCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String addEvent(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        for (int i \u003d 1; i \u003c parsedUserInput.length; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (i \u003d\u003d parsedUserInput.length - 1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                taskDescription +\u003d parsedUserInput[i];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                taskDescription +\u003d parsedUserInput[i] + \" \";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String[] eventArray \u003d taskDescription.split(\" /at \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String description \u003d eventArray[0];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String date \u003d eventArray[1];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Event event \u003d new Event(description, date.trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        tasksList.add(event);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return ui.showAddedTaskMessage(event, tasksList.getNumOfTask());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String addDeadline(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            for (int i \u003d 1; i \u003c parsedUserInput.length; i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                if (i \u003d\u003d parsedUserInput.length - 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    taskDescription +\u003d parsedUserInput[i];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    taskDescription +\u003d parsedUserInput[i] + \" \";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String[] deadlineArray \u003d taskDescription.split(\" /by \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String description \u003d deadlineArray[0];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String date \u003d deadlineArray[1];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            LocalDateTime d1 \u003d parser.parseDateAndTime(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, d1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            tasksList.add(deadline);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showAddedTaskMessage(deadline, tasksList.getNumOfTask());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showInvalidDateFormatGiven();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String search(String[] parsedUserInput) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            StringBuilder keyword \u003d new StringBuilder(parsedUserInput[1]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            for (int i \u003d 2; i \u003c parsedUserInput.length; i++) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                keyword.append(parsedUserInput[i]);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            List\u003cTask\u003e lst \u003d tasksList.getLstOfTask();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            List\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            for (int j \u003d 0; j \u003c tasksList.getNumOfTask(); j++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                Task t \u003d lst.get(j);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                String description \u003d t.getDescription();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                if (description.contains(keyword)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                    resultList.add(t);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (resultList.isEmpty()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                return ui.showNoSearchResult();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                return ui.showSearchResults(resultList);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return ui.showInvalidSearchCommand();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This is the main entry of of the duke if app is run"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * on CLI"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Duke duke \u003d new Duke(\"Tasks.txt\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String[] parsedString \u003d duke.parser.parseString(input);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            duke.processCommand(parsedString);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String[] parsedString \u003d this.parser.parseString(input);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.processCommand(parsedString);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 248,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 4
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Constructor instantiates event task, uses parent class Task\u0027s constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param description the String description of the event task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param date the String date where event is occurring"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return \"[\" + getTaskType() + \"]\" + \"[\" + getStatusIcon() + \"]\" + description + \" \" + \"(at: \" + date + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 25
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This parser class takes in Strings as input and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * convert into an output type based on the requirements"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * @author Alex"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Empty constructor for instantiating"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method parse strings to Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param str The string that is being parsed to Tasks, it must have a specific format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return returns a tas object that is the result of the parsed string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    Task parseTxtToTask(String str) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String type \u003d str.substring(1, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String status \u003d str.substring(4, 5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String descriptionAndDate \u003d str.substring(6);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String[] arr \u003d descriptionAndDate.split(\"\\\\(\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String description \u003d arr[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (type.equals(\"E\") || type.equals(\"D\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                date \u003d arr[1].substring(4).replace(\")\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                task \u003d new Event(description, date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else { // \"D\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                task \u003d new Deadline(description, parseDateAndTime(date));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (status.equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            System.out.println(e.getMessage() + \"Error in tasks file\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method split the input string based on one empty space."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param input The string that is being parsed into a String array"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return returns a String array based on the input split by one space"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    String[] parseString(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String[] tokens \u003d input.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return tokens;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method provides a LocalDateTime object based on a given input string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param dateTime The string that consists of date and time information."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * It must be in a fixed format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return returns a LocalDateTime object with"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * information stored for easy retrieval later on"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    LocalDateTime parseDateAndTime(String dateTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        LocalDateTime d1 \u003d LocalDateTime.parse(dateTime, formatter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return d1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 85
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This class provides an interface for keeping and retrieving the tasks on hard disk memory"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Constructor for instantiating a Storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param filepath Specifies which file path should this Storage be working on"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private void createNewTextFileCalledTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        file \u003d new File(filepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                System.out.print(\"File created\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                System.out.println(\"File exist\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method provides the save feature for the tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param lstOfTask The list provided by Duke after execution"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void saveTaskContents(List\u003cTask\u003e lstOfTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"Tasks.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            createNewTextFileCalledTask();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            for (Task t : lstOfTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                String taskString \u003d t.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                fw.write(taskString + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method provides the load feature for task to be loaded onto a list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param lstOfTask The list that data will be populated on."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @throws IOException The exception arises when there are issues reading from a file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void populateToLstOfTask(List\u003cTask\u003e lstOfTask) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        createNewTextFileCalledTask();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assert file !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String st \u003d br.readLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        while (st !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Task t \u003d parser.parseTxtToTask(st);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            lstOfTask.add(t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            st \u003d br.readLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 91
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This is an abstract class that represents a Task with description and a status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * The class has common functionality that is inherited."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * The constructor for a Task. This is for use by its sub-classes.."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Hence all subclasses should have description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param description The string that describes the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method checks if the task is done or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return UTF-8 encoding of a tick(task is done) or cross(task is not done)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method allows user to mark this task as done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public boolean checkStatus() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This abstract method requires all sub classes to implement so that"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * the type of the task can be identified."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return returns string representation of the task type"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 55
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * This class provides an simple functionality to store and operate the List of task in Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " * It is essentially a wrapper class around the List of Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private List\u003cTask\u003e lstOfTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * The constructor for the TaskList object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param lstOfTask the list of task that is used to store tasks from duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public TaskList(List\u003cTask\u003e lstOfTask) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.lstOfTask \u003d lstOfTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * Thie method gives the number of tasks in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return returns size of task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public int getNumOfTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return lstOfTask.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public List\u003cTask\u003e getLstOfTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return this.lstOfTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This mmethod adds task to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param task The task to be added to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        this.lstOfTask.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 44
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return \"[\" + getTaskType() + \"]\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + \"[\" + getStatusIcon() + \"]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                + description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 20
    }
  },
  {
    "path": "src/main/java/duke/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String UPPER_LINE \u003d INDENT + \"___________________________________________________\" + \"\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String LOWER_LINE \u003d INDENT + \"___________________________________________________\" + \"\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String DONE_TASK_MARKED_MESSAGE \u003d \"    Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String DELETE_TASK_MARKED_MESSAGE \u003d \"    Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String NO_TASK_MESSAGE \u003d \"    Sorry the task does not exists\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String ADDED_TASK_MESSAGE \u003d \"    Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_COMMAND_MESSAGE \u003d \"    Sorry couldn\u0027t recognise command\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_DONE_MESSAGE \u003d \"    Sorry done cannot be empty \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_TODO_MESSAGE \u003d \"    Sorry todo cannot be empty \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_DELETE_MESSAGE \u003d \"    Sorry delete cannot be empty \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_SEARCH_MESSAGE \u003d \"    Sorry please enter your keyword correctly\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String NO_SEARCH_RESULT_MESSAGE \u003d \"    No match for keyword searched\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String MATCH_SEARCH_RESULT_MESSAGE \u003d \"    Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String GREET_USER_LINE_1 \u003d \"Hello! I\u0027m duke.Duke\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String GREET_USER_LINE_2 \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String TASK_LEFT_MESSAGE_PART_1 \u003d \"Now you have \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String TASK_LEFT_MESSAGE_PART_2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String INVALID_DATE_FORMAT \u003d \"Please give a valid date\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public UserInterface() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method outputs given String contents in a pre-defined format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param contents String values to be output"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return formatted String values to be shown to user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String outputUi(String... contents) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(UPPER_LINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        for (String s : contents) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            result.append(INDENT).append(s).append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        result.append(LOWER_LINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String greetUser() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(GREET_USER_LINE_1, GREET_USER_LINE_2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidCommandMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidTodoCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(INVALID_TODO_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidDoneCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(INVALID_DONE_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidDeleteCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(INVALID_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidTaskNumber() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(NO_TASK_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showMarkedTaskDoneMessage(Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(DONE_TASK_MARKED_MESSAGE, INDENT + task.getStatusIcon() + SPACE + task.getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showDeleteTaskMessage(Task task, int numOfTaskInList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(DELETE_TASK_MARKED_MESSAGE, INDENT + task.toString(), numOfTaskInList(numOfTaskInList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method outputs the string when user adds task to list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param task The task that is being added by the user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param numOfTaskInList the number of task in the list after adding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return String output that is shown to user"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showAddedTaskMessage(Task task, int numOfTaskInList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(ADDED_TASK_MESSAGE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "               INDENT + task.toString(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "               numOfTaskInList(numOfTaskInList));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    private String numOfTaskInList(int numOfTaskInList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return TASK_LEFT_MESSAGE_PART_1 + numOfTaskInList + TASK_LEFT_MESSAGE_PART_2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showExitMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(BYE_MESSAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidDateFormatGiven() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showSearchResults(List\u003cTask\u003e lstOfTask) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(MATCH_SEARCH_RESULT_MESSAGE, listTaskOnly(lstOfTask));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method list the tasks currently in the taskList when the user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * runs the list task command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param lstOfTask the task lists consisting the tasks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return String that is formatted to output to user"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String listTaskOnly(List\u003cTask\u003e lstOfTask) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String outputIndent \u003d \"    \";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        StringBuilder concat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        for (int i \u003d 0; i \u003c lstOfTask.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Task task \u003d lstOfTask.get(i);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            int taskNumber \u003d i + 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String s \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (i \u003d\u003d lstOfTask.size() - 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                s \u003d outputIndent + taskNumber + \".\" + task.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                s \u003d outputIndent + taskNumber + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            concat.append(s);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return concat.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * This method list the tasks currently in the taskList when the user"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     *  runs the list task command. (I dont think we need this method its a repeat)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @param lstOfTask"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String listTask(List\u003cTask\u003e lstOfTask) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String outputIndent \u003d \"    \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        StringBuilder concat \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        for (int i \u003d 0; i \u003c lstOfTask.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            Task task \u003d lstOfTask.get(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            int taskNumber \u003d i + 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            String s \u003d \"\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            if (i \u003d\u003d lstOfTask.size() - 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                s \u003d outputIndent + taskNumber + \".\" + task.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                s \u003d outputIndent + taskNumber + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            concat.append(s);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(concat.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showInvalidSearchCommand() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(INVALID_SEARCH_MESSAGE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public String showNoSearchResult() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        return outputUi(NO_SEARCH_RESULT_MESSAGE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 170
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void testParseString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String testString \u003d \"A B C  \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String[] expected \u003d new String[]{\"A\",\"B\",\"C\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        String[] actual \u003d parser.parseString(testString);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(expected[0],actual[0]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(expected[1],actual[1]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(expected[2],actual[2]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 21
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void testGetType(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(\"T\", new ToDo(\"todo description\").getTaskType());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    public void testGetDescription(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        assertEquals(\"todo description\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "                new ToDo(\"todo description\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "        .getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "SET MY_PATH \u003d C:\\Users\\User\\Desktop\\Y2S1\\CS2103T\\Individual Project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "del ACTUAL.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "FC ACTUAL.txt EXPECTED.txt"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 8,
      "-": 16
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "    mkdir \"C:\\Users\\User\\Desktop\\Y2S1\\CS2103T\\Individual Project\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AlexCQY"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "AlexCQY": 5,
      "-": 35
    }
  }
]
