[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 21,
      "-": 44
    }
  },
  {
    "path": "data/TestFile.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "1.[E][✘] project meeting (at:Thu, 21 Sep 2902, 4:54 PM)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "2.[E][✘] eat (at:Wed, 9 Sep 2020, 8:20 PM)"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 2
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "1.[T][✓] ajnd"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "2.[T][✓] eat "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "3.[T][✘] test "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "4.[T][✘] test "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "5.[E][✓] submit this ip (at:Wed, 9 Sep 2020, 11:59 PM)"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 5
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Adding tasks: todo, event, deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Read tasks: list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Deleting tasks: delete"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Finding tasks by keywords: find"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Update tasks: task, desc, time, date"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Exiting and save: bye  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "### Adding simple task: `todo` "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Adds a simple task with a short description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `todo [task description]`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Description must be stated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `todo borrow book`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `todo sleep`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "### Adding an event: `event`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Adds an event. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `event [event description] /at [date] [time]` "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Description, date and time of the event must be stated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Date format: **yyyy-mm-dd**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Time format: **hh:mm** in 24-hour military time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `event go to book fair /at 2020-09-09 20:58`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `event go go to an event /at 2020-09-09 20:00`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "### Adding a task with a deadline: `deadline`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Adds a task with a deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `deadline [deadline description] /by [date] [time]`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Description, date and time of the deadline must be included."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Date format: **yyyy-mm-dd**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Time format: **hh:mm** in 24-hour military time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `deadline return book /by 2020-09-09 23:59`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `deadline submit my ip /by 2020-09-18 23:59`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Read tasks: `list`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Reads all the saved tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Deleting a task: `delete`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Deletes an existing task in the task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Deletes the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "The index must be a **positive integer**."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `delete 1` - deletes the task at index 1 of the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `delete 4` - deletes the task at index 4 of the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Finding a task by key word: `find`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Find tasks which contains any of the keyword."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* The search is case-sensitive."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* The full task will be searched "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `find book` - will return all task that has the keyword `book`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `find borrow book` - will return all the task that has the keywords `borrow` and `book`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Updating a task completely: `update task`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Replaces an existing task in the task list with another task. "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `update task INDEX`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Updates the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "The index must be a **positive integer**."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update task 1` - updates task at index 1."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update task 4` - updates task at index 4."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Updating a task\u0027s description: `update desc`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Updates the description of an existing task in the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `update desc INDEX`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Updates description of the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "The index must be a **positive integer**."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update desc 1` - updates the description of the task at index 1."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update desc 4` - updates the description of the task at index 4."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Updating an event\u0027s or a deadline\u0027s time: `update time`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Updates the time of an existing event or task with a deadline in the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `update time INDEX`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Updates the time of the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "The index must be a **positive integer**."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update time 1` - updates the time of the task at index 1."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update time 4` - updates the time of the task at index 4."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Updating an event\u0027s or a deadline\u0027s date: `update date`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Updates the date of an existing event or task with a deadline in the task list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `update date INDEX`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* Updates the date of the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "The index must be a **positive integer**."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update date 1` - updates the date of the task at index 1."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "* `update date 4` - updates the date of the task at index 4."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "## Exiting the program and saving the program: `bye`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Exits the program and saves all the changes made to task list. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "Format: `bye`"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 107,
      "-": 12
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Represents a deadline with a due date and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalDate dueDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalTime dueTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Constructor of the deadline object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param description The description of the given deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param dueDate The due date of the deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param dueTime The due time of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadline(String description, LocalDate dueDate, LocalTime dueTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Deadline(String description, LocalDate dueDate, LocalTime dueTime, boolean bool) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description, bool);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the description of a deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDesc The new description of the deadline task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Deadline A new deadline task that has the same state as before but different description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadline changeDesc(String newDesc) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Deadline(newDesc, this.dueDate, this.dueTime, this.isComplete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the time of a deadline task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newTime The new time of the deadline task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Deadline A new deadline task that has the same state as before but different time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadline changeTime(LocalTime newTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Deadline(this.description, this.dueDate, newTime, this.isComplete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the date of a deadline task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDate The new date of the deadline task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Deadline A new deadline task that has the same state as before but different date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadline changeDate(LocalDate newDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Deadline(this.description, newDate, this.dueTime, this.isComplete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Returns a Deadline event that is completed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Completed Deadline task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadline markDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Deadline(this.description, this.dueDate, this.dueTime, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Format for the date in day, dd MMM yyyy, e.g. Sat, 25 Jan 2020"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"E, d MMM yyyy\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Format for the time in XX:XX aa, e.g. 11:59 pm"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedDate \u003d this.dueDate.format(myDateFormat);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedTime \u003d this.dueTime.format(myTimeFormat);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[D][\\u2713] \" + this.description + \"(by:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[D][\\u2718] \" + this.description + \"(by:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 85
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private DialogBox(String text, Image img, boolean isUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Sets the user\u0027s dialog box of a different colour."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (isUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.dialog.setStyle(\"-fx-background-color: #d4c69e;\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Gets the user\u0027s dialog box with the user input and the user image."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param text The user\u0027s input message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param img The user\u0027s image."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return DialogBox The user\u0027s dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new DialogBox(text, img, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Gets the duke\u0027s dialog box with duke\u0027s response and duke\u0027s image."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param text Duke\u0027s response."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param img Duke\u0027s image."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return DialogBox Duke\u0027s dialog box."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        var db \u003d new DialogBox(text, img, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 80
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * The Duke chat bot that can help you keep track of your upcoming schedules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Use the commands todo, event, deadline to differentiate your schedules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Constructor of the Duke chat bot."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.ui \u003d UI.getAccessTo(this.storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Reads the greeting message by Duke bot and reads the current saved tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return String The greeting message and the saved tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String startUpMessage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.ui.showStartMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                DialogBox.getUserDialog(userInput.getText(), user),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                DialogBox.getDukeDialog(getResponse(userInput.getText()), duke)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Gets Duke\u0027s response based on the user\u0027s input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return String The response by Duke."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return this.ui.processInput(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return this.ui.showError(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * This is the main method that creates a Duke object and runs the bot."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jzwoo": 139,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Represents that represents an event of a start date and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Constructor of the event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param startDate The starting date of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param startTime The starting time of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Event(String description, LocalDate startDate, LocalTime startTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Event(String description, LocalDate startDate, LocalTime startTime, boolean bool) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description, bool);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the description of an event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDesc The new description of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Event A new event that has the same state as before but different description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Event changeDesc(String newDesc) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Event(newDesc, this.startDate, this.startTime, this.isComplete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the start time of an event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newStartTime The new starting time of the event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Deadline A new event that has the same state as before but different time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Event changeTime(LocalTime newStartTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Event(this.description, this.startDate, newStartTime, this.isComplete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the ne start date of an event."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newStartDate The new starting date of the event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Deadline A new event that has the same state as before but different date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Event changeDate(LocalDate newStartDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Event(this.description, newStartDate, this.startTime, this.isComplete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Returns a new Event which is completed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Completed Event task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Event markDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Event(this.description, this.startDate, this.startTime, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Format for the date in day, dd MMM yyyy, e.g. Sat, 25 Jan 2020"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"E, d MMM yyyy\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Format for the time in XX:XX aa, e.g. 11:59 pm"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedDate \u003d this.startDate.format(myDateFormat);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedTime \u003d this.startTime.format(myTimeFormat);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[E][\\u2713] \" + this.description + \"(at:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[E][\\u2718] \" + this.description + \"(at:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 85
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * This is the InvalidCommandException class that is thrown when a command is given,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * but the command in the wrong form."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class InvalidCommandException extends Throwable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 16
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * This is the InvalidInputException class that is thrown when an invalid is given."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class InvalidInputException extends Throwable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 15
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            stage.setTitle(\"DukeBot\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Sets up Duke for the chat interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param d Duke bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Runs the welcome message in the chat GUI with the saved tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(d.startUpMessage(), dukeImage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 57
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Parses input by the user and identifies the commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static final int LIST_COMMAND \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static final int DONE_COMMAND \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static final int DELETE_COMMAND \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static final int FIND_COMMAND \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static final int UPDATE_COMMAND \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static final int TASK_COMMAND \u003d 6;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Parses the input by the user in the user interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param currInput the current input of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param sizeOfList The current size of the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return int A number that represents the status of the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws InvalidCommandException If command is of invalid format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public int parse(String currInput, int sizeOfList) throws InvalidCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assert(sizeOfList \u003e\u003d 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Cuts white space before and after the command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String input \u003d currInput.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (isListCommand(input)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return LIST_COMMAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (isDoneCommand(input)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            verifyDoneOrDeleteCommand(input, sizeOfList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return DONE_COMMAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (isDeleteCommand(input)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            verifyDoneOrDeleteCommand(input, sizeOfList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return DELETE_COMMAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (isFindCommand(input)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            verifyFindCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return FIND_COMMAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (isUpdateCommand(input)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            verifyUpdateCommand(input, sizeOfList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return UPDATE_COMMAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return TASK_COMMAND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Retrieves the index for a delete, done or update command in the input string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return int The index of the task which the user wants to delete/mark as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public int getIndex(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] words \u003d getStringTokens(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (isUpdateCommand(input.trim())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return Integer.parseInt(words[2]) - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Retrieves the keywords for a find command in the input string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return String The keyword that the user is looking for."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String[] getKeyword(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] tokens \u003d getStringTokens(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return Arrays.copyOfRange(tokens, 1, tokens.length);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Gets the type of update that the user requests based on their update command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return String The update type the user is requesting for."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String getUpdateType(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return getStringTokens(input)[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Checks if the following task type can be updated based on the user\u0027s update command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param updateType The type of update the user is initiating."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param taskType The type of the task that the user wishes to update."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws InvalidCommandException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void verifyTaskCanUpdate(String updateType, String taskType) throws InvalidCommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateType.equals(\"time\") || updateType.equals(\"date\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (taskType.equals(\"Task\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Sorry, can\u0027t update the task this way.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Translates a task command to a Task object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Task The task to be put in the schedule."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws InvalidInputException If input is not a valid command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws InvalidCommandException If command is of invalid format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task getTask(String input) throws InvalidInputException, InvalidCommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] words \u003d getStringTokens(input);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String taskType \u003d words[0];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (taskType.isBlank()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidInputException(\"Please input something!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (taskType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String description \u003d getDescription(words);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Task(description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String keyword \u003d \"/by\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String description \u003d getDescription(words, keyword);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalDate date \u003d getDate(words, keyword);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalTime time \u003d getTime(words, keyword);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Deadline(description, date, time);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String keyword \u003d \"/at\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String description \u003d getDescription(words, keyword);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalDate date \u003d getDate(words, keyword);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalTime time \u003d getTime(words, keyword);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Event(description, date, time);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidInputException(\"Sorry, I don\u0027t know what \" + \"\\\"\" + input + \"\\\"\" + \" means.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Checks if the user has correctly inputted the update that they have requested for."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param updateType The update type that the user is initiating."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return int The status of the update."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws InvalidCommandException If the input does not match the update type that the user is initiating."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public int checkInputMatchesUpdate(String input, String updateType) throws InvalidCommandException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int changeDate \u003d 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int changeTime \u003d 2;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int changeTask \u003d 3;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int changeDesc \u003d 4;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateType.equals(\"time\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalTime.parse(trimmedInput);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return changeTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Please give your time in hh:mm format!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateType.equals(\"date\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalDate.parse(trimmedInput);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return changeDate;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Please give your date in yyyy-mm-dd format!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateType.equals(\"task\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return changeTask;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return changeDesc;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static void verifyDoneOrDeleteCommand(String input, int numOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] words \u003d getStringTokens(input);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Please give an index.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (words.length \u003e 2) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry wrong format!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            boolean numInRange \u003d index \u003e -1 \u0026\u0026 index \u003c numOfTasks;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (!numInRange) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Number is invalid!\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException((\"Please input number after the command!\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static void verifyFindCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] tokens \u003d getStringTokens(input);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Find what?\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static void verifyUpdateCommand(String input, int numOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] words \u003d getStringTokens(input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Should have 3 parts, the \"update\" command, the update type and the index."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (words.length !\u003d 3) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry wrong format.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateType \u003d words[1];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (!updateType.equals(\"time\") \u0026\u0026 !updateType.equals(\"date\") \u0026\u0026 !updateType.equals(\"task\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                \u0026\u0026 !updateType.equals(\"desc\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry I can\u0027t update that.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int index \u003d Integer.parseInt(words[2]) - 1;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            boolean numInRange \u003d index \u003e -1 \u0026\u0026 index \u003c numOfTasks;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (!numInRange) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Number is invalid!\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Please input a number!\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static boolean isListCommand(String input) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.equals(\"list\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static boolean isDoneCommand(String input) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.startsWith(\"done\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static boolean isDeleteCommand(String input) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.startsWith(\"delete\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static boolean isFindCommand(String input) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.startsWith(\"find\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static boolean isUpdateCommand(String input) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.startsWith(\"update\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Checks if input is \"bye\" which is the terminating command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return boolean True if command is equals to \"bye\", returns false otherwise."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public boolean isTerminateCommand(String input) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.trim().equals(\"bye\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Checks if input is \"abort\" which is terminates the update."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return boolean True if command equals to \"abort\", returns false otherwise."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public boolean isAbortUpdate(String input) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.trim().equals(\"abort\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static String[] getStringTokens(String input) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static String getDescription (String[] inputWords, String keyword) throws InvalidCommandException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int keywordIndex \u003d -1;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        boolean hasKeyword \u003d false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 0; i \u003c inputWords.length; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (inputWords[i].equals(keyword)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                keywordIndex \u003d i;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                hasKeyword \u003d true;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (!hasKeyword) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing \" + keyword + \" keyword!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 1; i \u003c keywordIndex; i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            description +\u003d inputWords[i] + \" \";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing task description!\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static String getDescription(String[] inputWords) throws InvalidCommandException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (inputWords.length \u003c\u003d 1 || inputWords[1].isBlank()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing task description!\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 1; i \u003c inputWords.length; i++) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            description +\u003d inputWords[i] + \" \";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static LocalDate getDate(String[] inputWords, String keyword) throws InvalidCommandException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int keywordIndex \u003d -1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        boolean hasKeyword \u003d false;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 0; i \u003c inputWords.length; i++) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (inputWords[i].equals(keyword)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                keywordIndex \u003d i;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                hasKeyword \u003d true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (!hasKeyword) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing \" + keyword + \" keyword!\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String taskDate \u003d inputWords[keywordIndex + 1];"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(taskDate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Wrong date format!\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing date!\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static LocalTime getTime(String[] inputWords, String keyword) throws InvalidCommandException {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int keywordIndex \u003d -1;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        boolean hasKeyword \u003d false;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 0; i \u003c inputWords.length; i++) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (inputWords[i].equals(keyword)) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                keywordIndex \u003d i;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                hasKeyword \u003d true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (!hasKeyword) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing \" + keyword + \" keyword!\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String taskTime \u003d inputWords[keywordIndex + 2];"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(taskTime);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Wrong time format!\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Missing time!\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 377
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Represents the storage of the tasks that a user wishes to save."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Constructor of the Storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param filepath The filepath in which we are going to save our tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Create the file if it does not exist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Create new file throws error"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.taskList.generateList(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Gets the size of the saved tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return int The number of saved tasks currently in the storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public int getSizeofTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Gets the type of the task at the specifies index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that we want to get the type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return String The type of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String getTaskType(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.taskList.getTask(index).getClass().getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Adds new tasks into the storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param task The task that is to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Deletes task in the storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that is to be deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.delete(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Marks a task as done in the storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index the index of the task that is to be marked as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.markDone(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Returns the task at the specified index of the task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that is to be retrieved."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Task The task that is to be retrieved."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task getTaskFromList(int index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.taskList.getTask(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Replaces the task at the specified index with a new task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that we want to replace."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newTask The new task that is going to replace the old task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void replaceTask(int index, Task newTask) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.changeTask(index, newTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the description of the task at the specified index."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task whose description we want to change."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDesc The new description of the task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void changeDesc(int index, String newDesc) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.changeDescription(index, newDesc);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the time of the task at the specified index."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that we wish to change the time of."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newTime The new time of the task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void changeTime(int index, LocalTime newTime) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.modifyTime(index, newTime);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the date of the task at the specified index."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that we wish to change the date of."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDate The new date of the task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void changeDate(int index, LocalDate newDate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.modifyDate(index, newDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Saves all the tasks that the user currently has."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws IOException If the file path does not exist."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void save() throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        resetFile();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        rewriteFile();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private void resetFile() throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath, false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private void rewriteFile() throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Task task \u003d this.taskList.getTask(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            bw.write((i + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Writes each task on a new line"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            bw.newLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 158
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Represents a task that the user wishes to save."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Constructor of the task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        isComplete \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected Task(String description, boolean bool) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        isComplete \u003d bool;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task changeDesc(String newDesc) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Task(newDesc, this.isComplete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Marks a task as completed or done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Completed task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task markDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[T][\\u2713] \" + this.description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[T][\\u2718] \" + this.description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 42
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * Represents the list of saved tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Generates an Task list based on the retrieved file of the user\u0027s saved tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param file The file that the task list is to be generated from."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws FileNotFoundException If the file does not exist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void generateList(File file) throws FileNotFoundException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String nextLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Task task \u003d convertToTask(nextLine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Adds new tasks to the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param task to be added into the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Size of the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Returns the task at the specified index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index of the task to retrieve"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return Task at the specified index of the TaskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assert(index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the task at the specified index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that we wish to change."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newTask The new task that is about to replace the old one."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void changeTask(int index, Task newTask) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.taskList.set(index, newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Deletes the task at the specific index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index of the task to delete."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assert(index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Marks the task as done in the specified index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index of the task that is done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assert(index \u003e\u003d 0 \u0026\u0026 index \u003c taskList.size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        taskList.set(index, taskList.get(index).markDone());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Changes the description of the task at the specified index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task that we are wish to change the description of."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDesc The new description of the task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void changeDescription(int index, String newDesc) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        taskList.set(index, taskList.get(index).changeDesc(newDesc));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Modifies the time of the given event or deadline task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newTime The new time of the task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void modifyTime(int index, LocalTime newTime) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Task taskToBeModified \u003d taskList.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (taskToBeModified instanceof Deadline) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Deadline task \u003d (Deadline) taskToBeModified;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.set(index, task.changeTime(newTime));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (taskToBeModified instanceof Event) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Event task \u003d (Event) taskToBeModified;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.set(index, task.changeTime(newTime));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Modifies the date of the given event or deadline."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param newDate The new date of the task."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public void modifyDate(int index, LocalDate newDate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Task taskToBeModified \u003d taskList.get(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (taskToBeModified instanceof Deadline) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Deadline task \u003d (Deadline) taskToBeModified;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.set(index, task.changeDate(newDate));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (taskToBeModified instanceof Event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Event task \u003d (Event) taskToBeModified;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.set(index, task.changeDate(newDate));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //Method that converts the saved tasks in the file which is in String format"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //into Task objects in the task list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static Task convertToTask(String line) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (line.startsWith(\"[T]\", 2)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //It is an simple Task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return convertToTodoTask(line);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (line.startsWith(\"[E]\", 2)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //It is an event task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return convertToEventTask(line);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Is a deadline task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return convertToDeadlineTask(line);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static Task convertToTodoTask(String line) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (line.contains(\"[✘]\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return new Task(parts[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return new Task(parts[1]).markDone();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static Event convertToEventTask(String line) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] split \u003d parts[1].split(\"\\\\(at:\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String desc \u003d split[0];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String timeInfo \u003d split[1].split(\"\\\\)\")[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] dateTime \u003d timeInfo.trim().split(\", \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String date \u003d dateTime[1];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String time \u003d dateTime[2];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (line.contains(\"[✘]\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return new Event(desc, LocalDate.parse(date, myDateFormat), LocalTime.parse(time, myTimeFormat));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return new Event(desc, LocalDate.parse(date, myDateFormat),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    LocalTime.parse(time, myTimeFormat)).markDone();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private static Deadline convertToDeadlineTask(String line) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] split \u003d parts[1].split(\"\\\\(by:\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String desc \u003d split[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String timeInfo \u003d split[1].split(\"\\\\)\")[0];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] dateTime \u003d timeInfo.trim().split(\", \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String date \u003d dateTime[1];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String time \u003d dateTime[2];"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (line.contains(\"[✘]\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return new Deadline(desc, LocalDate.parse(date, myDateFormat), LocalTime.parse(time, myTimeFormat));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return new Deadline(desc, LocalDate.parse(date, myDateFormat),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    LocalTime.parse(time, myTimeFormat)).markDone();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 198
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * The user interface class that communicates with the user and the system to get"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " * what the user wants."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String updateType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private int updateIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private UI(Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.updateType \u003d \"Not updating\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.updateIndex \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Initialises the UI with the storage, so that UI can now access the storage information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param storage The storage that the UI is going to have access to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return UI The UI that is now ready to communicate with the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static UI getAccessTo(Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new UI(storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Reads a starting message at the start of UI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String showStartMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"Hi! I\u0027m Duke\" + \"\\n\" + this.readSavedTasks() + \"\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Processes the input of the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @return String The response of the Duke bot."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * @throws IOException If there is an error with the user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String processInput(String input) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (this.isUpdatingTask()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return this.processUpdate(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int parseResult \u003d this.parser.parse(input, this.storage.getSizeofTasks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assert(parseResult \u003e 0 \u0026\u0026 parseResult \u003c 7);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (isListCommand(parseResult)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return this.readSavedTasks();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (isDoneCommand(parseResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return processDoneCommand(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (isDeleteCommand(parseResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return processDeleteCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (isFindCommand(parseResult)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return processFindCommand(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (isUpdateCommand(parseResult)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return verifyUpdateCommand(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (parser.isTerminateCommand(input)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return processTerminateCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //If reached here, means input must be a task command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return processTaskCommand(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return e + \"\\n\" + \"Please enter a valid command\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return e + \"\\n\" + \"Please enter a valid input\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Reads the list of saved tasks in the storage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String readSavedTasks() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int size \u003d this.storage.getSizeofTasks();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"You currently have no tasks!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String tasks \u003d \"Here are your current tasks:\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks +\u003d \"\\n\" + (i + 1) + \". \" + this.storage.getTaskFromList(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String getListOfMatches(String ... keywords) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int size \u003d this.storage.getSizeofTasks();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int increment \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String listOfMatches \u003d \" Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String keyword \u003d keywords[i];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (this.storage.getTaskFromList(j).toString().contains(keyword)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    listOfMatches +\u003d \"\\n\" + \"  \" + increment + \". \" + this.storage.getTaskFromList(j).toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    increment++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //If increment is 1 means that there are no matching tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (increment \u003d\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"There seems to be no matches...\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return listOfMatches;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     * Catches the exception and reads the corresponding message of the exception."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String showError(Exception exception) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return exception.getMessage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String processDoneCommand(String input) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int index \u003d this.parser.getIndex(input);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.storage.markDone(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                + \"\\n\" + \"  \" + this.storage.getTaskFromList(index).toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String processDeleteCommand(String input) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int index \u003d this.parser.getIndex(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Task toBeDeleted \u003d this.storage.getTaskFromList(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.storage.deleteTask(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\" + \"\\n\" + \"  \" + toBeDeleted"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                + \"\\n\" + \"Now you have \" + (this.storage.getSizeofTasks()) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String processFindCommand(String input) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] keywords \u003d this.parser.getKeyword(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return getListOfMatches(keywords);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //Verify if the task at the index of the update command can be updated as stated by the user."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String verifyUpdateCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Get update type: time, task, desc, date"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateType \u003d this.parser.getUpdateType(input);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        int index \u003d this.parser.getIndex(input);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String taskType \u003d this.storage.getTaskType(index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Check if the task at the index can be updated this way"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.parser.verifyTaskCanUpdate(updateType, taskType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.updateType \u003d updateType;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.updateIndex \u003d index;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"Ok, please type in the new \" + updateType + \",\" + \"\\nor type \\\"abort\\\" to cancel update.\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //Checks if the next input by the user is the required update."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String processUpdate(String input) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.parser.isAbortUpdate(input)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.updateType \u003d \"Not updating\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.updateIndex \u003d -1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"Update aborted.\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Task taskToBeChange \u003d this.storage.getTaskFromList(this.updateIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int updateStatus \u003d this.parser.checkInputMatchesUpdate(input, this.updateType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.proceedUpdate(updateStatus, input);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return e.toString() + \"\\nType \\\"abort\\\" to cancel update.\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return e.toString() + \"\\nType \\\"abort\\\" to cancel update.\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Task taskChangedTo \u003d this.storage.getTaskFromList(this.updateIndex);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.updateType \u003d \"Not updating\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.updateIndex \u003d -1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"Updated:\" + \"\\n\" + taskToBeChange + \"\\n\" + \"    ↓\" + \"\\n\" + taskChangedTo;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //Proceed to process the update."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private void proceedUpdate(int updateStatus, String input) throws InvalidInputException, InvalidCommandException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateStatus \u003d\u003d 1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //replace date"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            LocalDate newDate \u003d LocalDate.parse(trimmedInput);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.storage.changeDate(this.updateIndex, newDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateStatus \u003d\u003d 2) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //replace time"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            LocalTime newTime \u003d LocalTime.parse(trimmedInput);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.storage.changeTime(this.updateIndex, newTime);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateStatus \u003d\u003d 3) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //replace task"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Task newTask \u003d this.parser.getTask(trimmedInput);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.storage.replaceTask(this.updateIndex, newTask);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (updateStatus \u003d\u003d 4) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            this.storage.changeDesc(this.updateIndex, trimmedInput);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String processTerminateCommand() throws IOException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.storage.save();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"See you again!\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String processTaskCommand(String input) throws InvalidInputException, InvalidCommandException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Task newTask \u003d this.parser.getTask(input);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.storage.addTask(newTask);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                + \"\\n\" + \"  \" + this.storage.getTaskFromList(this.storage.getSizeofTasks() - 1)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                + \"\\n\" + \"Now you have \" + this.storage.getSizeofTasks() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private boolean isUpdatingTask() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return !this.updateType.equals(\"Not updating\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private boolean isListCommand(int num) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return num \u003d\u003d 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private boolean isDoneCommand(int num) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return num \u003d\u003d 2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private boolean isDeleteCommand(int num) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return num \u003d\u003d 3;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private boolean isFindCommand(int num) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return num \u003d\u003d 4;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private boolean isUpdateCommand(int num) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return num \u003d\u003d 5;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 264
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@DialogBox.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\"  minWidth\u003d\"-Infinity\" stylesheets\u003d\"@DialogBox.css\" text\u003d\"Label\" textFill\u003d\"#250202\" textOverrun\u003d\"WORD_ELLIPSIS\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            \u003cFont name\u003d\"Monospaced Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" styleClass\u003d\"imageView\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"400\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"textField\" stylesheets\u003d\"@MainWindow.css\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"400.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"100.0\" stylesheets\u003d\"@MainWindow.css\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"11.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"500.0\" styleClass\u003d\"VBox\" stylesheets\u003d\"@MainWindow.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_deleteCommandInvalidNum_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String invalidCommand \u003d \"delete 3\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.parse(invalidCommand, 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Number is invalid!\", e.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_deleteCommandString_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String invalidCommand \u003d \"delete string\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.parse(invalidCommand, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Please input number after the command!\", e.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_deleteCommandNoNum_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String invalidCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.parse(invalidCommand, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Please give an index.\", e.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_deleteCommandWrongFormat_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String invalidCommand \u003d \"delete 3 3\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.parse(invalidCommand, 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Sorry wrong format!\", e.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_findCommandNoKeyword_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String invalidCommand \u003d \"find\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.parse(invalidCommand, 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Find what?\", e.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_findCommandBlankKeyword_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String invalidCommand \u003d \"find     \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.parse(invalidCommand, 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Find what?\", e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_findCommand_noError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String validCommand \u003d \"find test this\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(4, parser.parse(validCommand, 2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_listCommand_noError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String validCommand \u003d \"  list \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(1, parser.parse(validCommand, 2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_doneCommand_noError() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String validCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(2, parser.parse(validCommand, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_deleteCommand_noError() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String validCommand \u003d \"delete 1\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(3, parser.parse(validCommand, 2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_updateCommand_noError() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String validCommand \u003d \"update time 1\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(5, parser.parse(validCommand, 2));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void parse_randomWords_noError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String validCommand \u003d \"testing\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(6, parser.parse(validCommand, 2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getKeyword_validFindCommand_noError() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String findCommand \u003d \"find      test\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"test\", parser.getKeyword(findCommand)[0]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getKeyword_findCommandManyKey_noError() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String findCommand \u003d \"find   test   play\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"test\", parser.getKeyword(findCommand)[0]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"play\", parser.getKeyword(findCommand)[1]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getUpdateType_timeUpdate() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateCommand \u003d \"update time 1\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"time\", parser.getUpdateType(updateCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getUpdateType_descUpdate() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateCommand \u003d \"update   desc   1\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"desc\", parser.getUpdateType(updateCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getUpdateType_taskUpdate() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateCommand \u003d \"update task     1\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"task\", parser.getUpdateType(updateCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getUpdateType_dateUpdate() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateCommand \u003d \"update    date 1\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        assertEquals(\"date\", parser.getUpdateType(updateCommand));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void verifyTaskCanUpdate_updateTimeOnTodo_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String taskType \u003d \"Task\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateType \u003d \"time\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.verifyTaskCanUpdate(updateType, taskType);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Sorry, can\u0027t update the task this way.\", e.toString());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void verifyTaskCanUpdate_updateDateOnTodo_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String taskType \u003d \"Task\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateType \u003d \"date\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.verifyTaskCanUpdate(updateType, taskType);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Sorry, can\u0027t update the task this way.\", e.toString());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void verifyTaskCanUpdate_updateTaskOnTodo_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String taskType \u003d \"Task\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateType \u003d \"task\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.verifyTaskCanUpdate(updateType, taskType);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void verifyTaskCanUpdate_updateDescOnTodo_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String taskType \u003d \"Task\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String updateType \u003d \"desc\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.verifyTaskCanUpdate(updateType, taskType);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_invalidInput_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"test\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Sorry, I don\u0027t know what \\\"test\\\" means.\", e.toString());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_missingKeyWord_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"event test \");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Missing /at keyword!\", e.toString());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_missingDescriptionEvent_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"event /at 2020-09-09 23:59\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Missing task description!\", e.toString());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_missingDescriptionTodo_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"todo   \");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Missing task description!\", e.toString());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_wrongDateFormat_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"event test /at snjdan 23:59\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Wrong date format!\", e.toString());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_wrongTimeFormat_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"event test /at 2020-09-09 23.10\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Wrong time format!\", e.toString());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void getTask_missingDateTime_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            parser.getTask(\"event test /at\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(\"Missing date!\", e.toString());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 324
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private File testFile \u003d new File(\"data/TestFile.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void generateList_validFile() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.generateList(testFile);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void generateList_nonExistentFile() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            File file \u003d new File(\"testFile.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            taskList.generateList(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"good\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    void size_correctSize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            list.generateList(testFile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            list.add(new Task(\"test\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            assertEquals(3, list.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 51
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "if"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "  )"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 7,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/InvalidCommandException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/InvalidInputException.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Event.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Deadline.java"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 6
    }
  }
]
