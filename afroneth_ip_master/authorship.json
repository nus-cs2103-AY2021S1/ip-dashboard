[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 16,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "T|0|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "D|0|CS2103T project|11/11/2020 1345"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "E|0|interview|30/10/2020 1100"
      }
    ],
    "authorContributionMap": {
      "afroneth": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Duke is a chat-bot application that helps you to manage your daily tasks through command line interface."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "* [Feature Details](#feature-details)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/afroneth/ip/master/docs/Ui.png\" width\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "## \u003cins\u003eQuick Start\u003c/ins\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "1. Download  and execute `jar` file from release. GUI should appear in a few seconds."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "2. Type in commands and press `enter` on the keyboard or click the \"Send\" button to execute commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "3. Type `help` command to list commands available."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "## \u003cins\u003eFeatures\u003c/ins\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### Feature 1 - Task Management"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Duke helps you to manage important tasks that you need to complete in your daily life. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "There are a total of 3 types of tasks: **Todo**, **Deadline** and **Event**. Tasks will be saved to a local file "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "automatically, and you can re-open it anytime to perform further updates."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### Feature 2 - Task Update"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Duke allows you to mark your tasks as \u0027Done\u0027 after you have completed them successfully."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "You may also remove them from your list via the `delete` command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### Feature 3 - Intuitive Command Line Interface"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Duke allows you to record your tasks with simple command line commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "## \u003cins\u003eFeature Details\u003c/ins\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `todo` - Adds a todo task to your task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `todo` followed by a description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`todo \u003cdescription of todo\u003e`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Thank you for your input. The following task has been added to the list:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    [T][x] \u003cdescription of todo\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "You have at total of 1 task in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `event` - Adds an event task to your task list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `event` followed by the description of your event, `/at`, followed by  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "dates in `\u003cDD/MM/YYYY\u003e \u003cHHMM\u003e` format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`event my event /at 19/09/2019 2349 `"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Thank you for your input. The following task has been added to the list:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     [E][x] my event (at: 19th of September 2019, 11:49pm)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "You have at total of 2 tasks in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `deadline` - Adds a deadline task to your task list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `deadline` followed by description of the deadline, `/by`, followed by "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "dates in `\u003cDD/MM/YYYY\u003e \u003cHHMM\u003e` format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`deadline my deadline /by 20/03/2020 1303`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Thank you for your input. The following task has been added to the list:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    [D][x] my deadline (by: 20th of March 2020, 1:03pm)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "You have at total of 3 tasks in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `list` - Displays all tasks in your task list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "These are the tasks in your list:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "1. [T][x] description of todo"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "2. [E][x] my event (at: 19th of September 2019, 11:49pm)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "3. [D][x] my deadline (by: 20th of March 2020, 1:03pm)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `find` - Searches for a matching task in your task list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `find` followed by search term to search for."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`find my`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "These are the matching tasks in your list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\t[E][x] my event (at: 19th of September 2019, 11:49pm)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\t[D][x] my deadline (by: 20th of March 2020, 1:03pm)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `delete` - remove a task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `delete` followed by index of task to delete"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "The following task has been successfully removed:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\t[T][x] description of todo"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "You have at total of 2 tasks in the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `done` - Marks a task as done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `done` followed by index of task that has been completed"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Great job! The following task has been marked as done:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "  [E][✓] my event (at: 19th of September 2019, 11:49pm)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `sort` - Sorts your list alphabetically according to task description or task type"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `sort` followed by `description` or `type`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage 1:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`sort description`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Your list has been sorted in alphabetical order with respect to task description."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "These are the tasks in your list:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "1. [D][✓] my deadline (by: 20th of March 2020, 1:03pm)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "2. [E][x] my event (at: 19th of September 2019, 11:49pm)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage 2:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`sort type`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Your list has been sorted in alphabetical order with respect to task type."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "These are the tasks in your list:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "1. [D][✓] my deadline (by: 20th of March 2020, 1:03pm)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "2. [D][✓] new deadline added (by: 30th of March 2019, 11:03pm)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "3. [E][x] my event (at: 19th of September 2019, 11:49pm)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `help` - Displays all available commands in Duke application"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `help`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\"List of commands are as follows:\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                1. [list]: Lists all tasks"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                2. [delete \u003cindex\u003e]: Removes task from list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                3. [done \u003cindex\u003e]: Marks task as done"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                4. [todo \u003ctask\u003e]: Creates Todo Task"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                5. [deadline \u003ctask\u003e /by DD/MM/YY HHMM]: Creates Deadline task with desired date"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                6. [event \u003ctask\u003e /at DD/MM/YY HHMM]: Creates Event task with desired date"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                7. [find \u003cquery\u003e] Returns matching tasks in list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                8. [sort \u003cdescription\u003e or \u003ctype\u003e]: Sorts list   according to input parameter"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                9. [help]: Displays all available features in Duke   application\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                10. [bye]: Closes program"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": "### `bye` - Saves any changes to task list and exits Duke application"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afroneth"
        },
        "content": "input `bye` to exit the application"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afroneth"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome (no changes made to task list):"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Goodbye. Hope to see you again soon!"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Expected outcome (changes made to task list):"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Tasks have been successfully saved to duke.txt!"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afroneth"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "afroneth": 187,
      "-": 16
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for ByeCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to exit Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d ui.printByeMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (storage.isStorageChanged()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                storage.saveToDisk(arrayOfTasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                responseObject \u003d ui.finishWriting();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                return ui.writeError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return boolean true to signal exit from Duke program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 38
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Abstract class for all command classes."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String typeOfCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets the specific command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return The specific command in String."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getCommandType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return typeOfCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs the specific command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskList Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response message object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public abstract Response runCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return boolean True only if command is a ByeCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public abstract boolean exitChecker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 33
    }
  },
  {
    "path": "src/main/java/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Formats date for output."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static final String[] ARRAY_MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Date object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param date Date from input file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Date(String date) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert !date.equals(\"\") : \"Date cannot be empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] dateElements \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.day \u003d Integer.parseInt(dateElements[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.month \u003d Integer.parseInt(dateElements[1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.year \u003d Integer.parseInt(dateElements[2]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Oops. Day field should be between 1 and 31!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Oops. Month field should be between 1 and 12!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String formattedDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (day % 10 \u003d\u003d 1 \u0026\u0026 day !\u003d 11) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"st\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if ((day % 10 \u003d\u003d 2 \u0026\u0026 day !\u003d 12)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"nd\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if (day % 10 \u003d\u003d 3 \u0026\u0026 day !\u003d 13) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"rd\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedDate \u003d day + \"th\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        formattedDate \u003d formattedDate + \" of \" + ARRAY_MONTHS[month - 1] + \" \" + year;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return formattedDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 52
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for Deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Date deadlineDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Timing deadlineTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Deadline object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Deadline(String description, String deadlineDate) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineDate \u003d new Date(deadlineDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Deadline object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineTime Time of deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Deadline(String description, String deadlineDate, String deadlineTime) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineDate \u003d new Date(deadlineDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineTime \u003d new Timing(deadlineTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Deadline object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param boolDone 1 if it is a done command, 0 if it is not a done command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineTime Time of deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Deadline(int boolDone, String description, String deadlineDate, String deadlineTime) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.DEADLINE, boolDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineDate \u003d new Date(deadlineDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineTime \u003d new Timing(deadlineTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Date of deadline object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return deadlineDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Timing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Timing of deadline object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Timing getTiming() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return deadlineTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return super.toString() + \" (by: \" + deadlineDate.toString() + \", \" + deadlineTime.toString() + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 70
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for DeadlineCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task deadlineTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DeadlineCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of deadline command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineDate Date of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param deadlineTime Time of deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DeadlineCommand(String description, String deadlineDate, String deadlineTime) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.deadlineTask \u003d new Deadline(description, deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle deadline command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.addTask(deadlineTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return ui.addedMessage(deadlineTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 44
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for DeleteCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected int taskIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DeleteCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Index of task to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle delete command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (taskIndex \u003c 0 || taskIndex \u003e\u003d arraySize) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"The task number that you want to delete \" + \"(\" + (taskIndex + 1) + \") \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"can not be found in your list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task taskToDelete \u003d arrayOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return ui.removeMessage(taskToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 48
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets a dialog box containing inputs from user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Attaches user\u0027s image beside the dialog box."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param text User\u0027s input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param img User\u0027s image."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return DialogBox object that contains user input and image."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets a dialog box containing inputs from Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Attaches Duke\u0027s image beside the dialog box."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param text Duke\u0027s input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param img Duke\u0027s image."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return DialogBox object that contains Duke\u0027s input and image."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 74
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for DoneCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected int taskIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DoneCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Index of task to be deleted."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle done command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (taskIndex \u003c 0 || taskIndex \u003e\u003d arraySize) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"The task number that you have input \" + \"(\" + (taskIndex + 1) + \") \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"can not be found in your list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.get(taskIndex).setDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task doneTask \u003d arrayOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return ui.doneMessage(doneTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Since this is not a exit command, it does not signal the program to exit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 47
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Main driver class for Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TaskList arrayOfTasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Duke object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param path File path giving the location of the input file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert !path.equals(\"\") : \"File path should not be empty!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Loads input from duke.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        File file \u003d new File(\"data\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        file.mkdir();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            this.arrayOfTasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            System.out.println(\"Error loading from specified file path\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            this.arrayOfTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets UI object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return UI object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Ui getUI() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Response object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response getResponse(String userInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert !userInput.equals(\"\") : \"String from user input should not be empty!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response response \u003d execute(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInput command to be parsed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Response execute(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Command parsedCommand \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            responseObject \u003d parsedCommand.runCommand(arrayOfTasks, ui, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String errorMsg \u003d error.getMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            responseObject \u003d ui.returnError(errorMsg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert responseObject !\u003d null : \"There is no Response object being returned by Command object.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 72,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements exception methods for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates DukeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param errorMessage Error message to be displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 24
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for Event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Date eventDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Timing eventTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Event(String description, String eventTime) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTime \u003d new Timing(eventTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructor to instantiate Event object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventDate Date of event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Event(String description, String eventDate, String eventTime) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventDate \u003d new Date(eventDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTime \u003d new Timing(eventTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Constructor to instantiate Event object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param boolDone 1 if it is a done command, 0 if it is not a done command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventDate Date of event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Event(int boolDone, String description, String eventDate, String eventTime) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.EVENT, boolDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventDate \u003d new Date(eventDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTime \u003d new Timing(eventTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Date of event object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets Timing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Timing of event object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Timing getTiming() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return super.toString() + \" (at: \" + eventDate.toString() + \", \" + eventTime.toString() + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 70
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for EventCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task eventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates EventCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of event command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventDate Date of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param eventTime Time of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public EventCommand(String description, String eventDate, String eventTime) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.eventTask \u003d new Event(description, eventDate, eventTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle event command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.addTask(eventTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return ui.addedMessage(eventTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 44
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String[] searchTerms;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates FindCommand object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param searchTerms Keyword to find."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public FindCommand(String[] searchTerms) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.searchTerms \u003d searchTerms;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle find command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of Tasks that we have parsed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        TaskList matchedTasksList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int arraySize \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (index \u003c arraySize) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Task matchedTask \u003d arrayOfTasks.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String[] splitElements \u003d matchedTask.description.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            boolean isMatching \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String delimiter \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String keyword \u003d String.join(delimiter, searchTerms);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String taskInList \u003d String.join(delimiter, splitElements);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int keywordLength \u003d keyword.length();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int taskLength \u003d taskInList.length();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (isSubSequence(keyword, taskInList, keywordLength, taskLength)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                isMatching \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (!isMatching) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                // Do nothing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                matchedTasksList.addTask(matchedTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (matchedTasksList.taskArraySize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.noMatchMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.matchingMessage(matchedTasksList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Since this is not a exit command, it does not signal the program to exit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    // Code retrieved from GeeksForGeeks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    static boolean isSubSequence(String keyword, String task, int keywordLength, int taskLength) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (keywordLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (taskLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // If last characters of two strings are matching"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (keyword.charAt(keywordLength - 1) \u003d\u003d task.charAt(taskLength - 1)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return isSubSequence(keyword, task, keywordLength - 1, taskLength - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        // If last characters are not matching"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isSubSequence(keyword, task, keywordLength, taskLength - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 86
    }
  },
  {
    "path": "src/main/java/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for HelpCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle find command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d ui.helpText();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "afroneth": 31
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs Duke application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        System.out.println(\"running from Launcher Class\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 14
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for ListCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle list command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (arrayOfTasks.taskArraySize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"There is nothing to list as the list is currently empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.listTasks(arrayOfTasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.listError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 37
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDukeUI(duke.getUI());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            stage.setMinWidth(388);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            stage.setMinHeight(400);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            stage.setTitle(\"Duke Application\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Thread.sleep(2600);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (InterruptedException error) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            error.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 42
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static javafx.application.Platform.exit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Initializes Duke GUI with welcome message and profile picture."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                DialogBox.getDukeDialog(ui.printWelcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setDukeUI(Ui ui) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String responseMessage \u003d response.getInputMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert responseMessage !\u003d null : \"Response message should not be empty!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                DialogBox.getDukeDialog(responseMessage, dukeImage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (response.exitChecker()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 72
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": " *  Parses user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parse method to handle all types of commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputLine String that is input by user on command line."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Command object that has been specified by input file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public static Command parse(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Command newTaskObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] userInputArray \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert(userInputArray.length \u003e 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String commandCheck \u003d userInputArray[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int numOfInput \u003d userInputArray.length;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        switch (commandCheck) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processByeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processDoneCommand(userInputArray, numOfInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processTodoCommand(userInputArray, numOfInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                newTaskObject \u003d processEventCommand(userInputArray, numOfInput, inputLine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Error encountered while parsing event command. Please ensure \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"that the event command is in the following format: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"(event) (description) (/at) (date).\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                newTaskObject \u003d processDeadlineCommand(userInputArray, numOfInput, inputLine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException error) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                throw new DukeException(\"Error encountered while parsing deadline command. Please ensure \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"that the deadline command is in the following format: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                        + \"(deadline) (description) (/by) (date).\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processDeleteCommand(userInputArray, numOfInput, inputLine);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processFindCommand(inputLine);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processHelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            newTaskObject \u003d processSortCommand(userInputArray, numOfInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Catastrophe detected! I\u0027m sorry, but \u0027\" + commandCheck"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"\u0027 is not within my realm of knowledge. \" + \"\\u2620 \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return newTaskObject;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements bye command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return ByeCommand object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static ByeCommand processByeCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements list command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return ListCommand object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static ListCommand processListCommand() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements done command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInputArray Entire string input by user as an array"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param numOfInput Number of separate strings in user input"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return DoneCommand object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static DoneCommand processDoneCommand(String[] userInputArray, Integer numOfInput) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003c 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Please specify which task you have completed.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Integer.parseInt(userInputArray[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Please input task index as a valid integer.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int indexOfDoneTask \u003d Integer.parseInt(userInputArray[1]) - 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new DoneCommand(indexOfDoneTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Todo command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInputArray Entire string input by user as an array"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param numOfInput Number of separate strings in user input"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return TodoCommand object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static TodoCommand processTodoCommand(String[] userInputArray, Integer numOfInput) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\\u2620 Oh no! The description of a todo task cannot be empty.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder todoString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int j \u003d 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (j \u003c numOfInput) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            todoString.append(userInputArray[j]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            todoString.append(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            j++;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputTodoDesc \u003d todoString.toString().trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new TodoCommand(outputTodoDesc);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Event command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInputArray Entire string input by user as an array"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param numOfInput Number of separate strings in user input"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputLine String that is input by user on command line."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return EventCommand object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static EventCommand processEventCommand(String[] userInputArray, Integer numOfInput, String inputLine)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                    throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\\u2620 Oh no! The description of an event task cannot be empty.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003c 4) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\\u2620 Oh no! The correct way to log an event is: (event) \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    + \"(description) (/at) (date)\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean checkForEvent \u003d false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder eventString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder eventDateField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder eventTimingField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String trimmedEvent \u003d inputLine.split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] splitElements \u003d trimmedEvent.split(\" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int numOfElements \u003d splitElements.length;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfElements !\u003d 2) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Date and Timing fields has not been specified correctly. \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"Please try again.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int z \u003d 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (z \u003c numOfInput) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (userInputArray[z].equals(\"/at\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                checkForEvent \u003d true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (!checkForEvent) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    eventString.append(userInputArray[z]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    eventString.append(\" \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    if (z \u003d\u003d numOfInput - 1) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        eventTimingField.append(userInputArray[z]);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        eventDateField.append(userInputArray[z]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            z++;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputEventDesc \u003d eventString.toString().trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputEventDate \u003d eventDateField.toString().trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputEventTime \u003d eventTimingField.toString().trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new EventCommand(outputEventDesc, outputEventDate, outputEventTime);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Deadline command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInputArray Entire string input by user as an array"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param numOfInput Number of separate strings in user input"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputLine String that is input by user on command line."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return DeadlineCommand object."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static DeadlineCommand processDeadlineCommand(String[] userInputArray, Integer numOfInput, String inputLine)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                          throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\\u2620 Oh no! The description of a deadline task \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"cannot be empty.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003c 4) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\\u2620 Oh no! The correct way to log a deadline is: (deadline) \""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"(description) (/by) (date)\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        boolean checkForDate \u003d false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder deadlineString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder dateField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder timingField \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String trimmedDeadline \u003d inputLine.split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] splitElements1 \u003d trimmedDeadline.split(\" \");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int noOfElements \u003d splitElements1.length;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (noOfElements !\u003d 2) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Date and Timing fields has not been specified correctly. \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                    + \"Please try again.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int m \u003d 1;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (m \u003c numOfInput) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            if (userInputArray[m].equals(\"/by\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                checkForDate \u003d true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (!checkForDate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    deadlineString.append(userInputArray[m]);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    deadlineString.append(\" \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    if (m \u003d\u003d numOfInput - 1) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        timingField.append(userInputArray[m]);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                        dateField.append(userInputArray[m]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            m++;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputDeadlineDesc \u003d deadlineString.toString().trim();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputDeadlineDate \u003d dateField.toString().trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String outputDeadlineTime \u003d timingField.toString().trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new DeadlineCommand(outputDeadlineDesc, outputDeadlineDate, outputDeadlineTime);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Delete command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInputArray Entire string input by user as an array"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param numOfInput Number of separate strings in user input"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputLine String that is input by user on command line."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return DeleteCommand object."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static DeleteCommand processDeleteCommand(String[] userInputArray, Integer numOfInput, String inputLine)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                                      throws DukeException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003c 2) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Please specify which task you wish to delete.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Integer.parseInt(userInputArray[1]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Please input task index as a valid integer.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String indexToDelete \u003d inputLine.split(\" \")[1];"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int indexOfTemp \u003d Integer.parseInt(indexToDelete);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int currentTaskIndex \u003d indexOfTemp - 1;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new DeleteCommand(currentTaskIndex);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Find command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputLine String that is input by user on command line."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return FindCommand object."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static FindCommand processFindCommand(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] arrayOfElements \u003d inputLine.split(\" \");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int numOfTokens \u003d arrayOfElements.length;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfTokens \u003c 2) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Please specific keyword to locate task. Eg. find book\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] copiedArray \u003d Arrays.copyOfRange(arrayOfElements, 1, arrayOfElements.length);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new FindCommand(copiedArray);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Help command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return HelpCommand object."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static HelpCommand processHelpCommand() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Implements Sort command."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param userInputArray Entire string input by user as an array"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param numOfInput Number of separate strings in user input"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return SortCommand object."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private static SortCommand processSortCommand(String[] userInputArray, int numOfInput) throws DukeException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (numOfInput \u003d\u003d 1) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"\\u2620 Oh no! The description of a sort command cannot be empty.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String typeOfSort \u003d userInputArray[1];"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new SortCommand(typeOfSort);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 319
    }
  },
  {
    "path": "src/main/java/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String inputMsg;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Response object with input message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputMsg Message to output."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response(String inputMsg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.inputMsg \u003d inputMsg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Response object with input message and exit check."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputMsg Message to be delivered."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param exitCheck Check to exit program or not."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response(String inputMsg, boolean exitCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.inputMsg \u003d inputMsg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isExit \u003d exitCheck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Determines if Response object is to exit or not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Boolean True if we want to exit, Boolean False if we do not want to exit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets message that needs to be output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String message that needs to be printed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getInputMessage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return inputMsg;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 44
    }
  },
  {
    "path": "src/main/java/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for SortCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String typeOfCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TodoCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param typeOfCommand Description of sorting command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public SortCommand(String typeOfCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.typeOfCommand \u003d typeOfCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle todo command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (typeOfCommand.equals(\"description\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            sortByDescription(arrayOfTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.listTaskByDesc(ui, arrayOfTasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if (typeOfCommand.equals(\"type\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            sortByType(arrayOfTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.listTaskByType(ui, arrayOfTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return ui.sortError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sorts list alphabetically according to task description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void sortByDescription(TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ArrayList\u003cTask\u003e copiedArray \u003d arrayOfTasks.getTasks();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        copiedArray.sort(Comparator.comparing(Task::getDescription));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Sorts list alphabetically according to task type."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private void sortByType(TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ArrayList\u003cTask\u003e copiedArray \u003d arrayOfTasks.getTasks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        copiedArray.sort(Comparator.comparingInt(this::getTaskType)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets the type of task required."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return First alphabet of the type of task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private char getTaskType(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if ((task.getClass().equals(Todo.class))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \u0027T\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if ((task.getClass().equals(Deadline.class))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \u0027D\u0027;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else if ((task.getClass().equals(Event.class))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \u0027E\u0027;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return isExit as False"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 83
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": " *  Deals with saving and loading tasks from input path."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isFileChanged \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Storage object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param path Filepath to load and read input file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses strings from input text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return ArrayList that contains the parsed strings from input text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            ArrayList\u003cTask\u003e outputTaskArray \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileReader fileToRead \u003d new FileReader(path);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assert fileToRead !\u003d null : \"File to be read should not be empty!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileToRead);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String inputData \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            while (inputData !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String taskType \u003d getTaskType(inputData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Todo newTodo \u003d parseToDo(inputData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputTaskArray.add(newTodo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Deadline newDeadline \u003d parseDeadline(inputData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputTaskArray.add(newDeadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Event newEvent \u003d parseEvent(inputData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputTaskArray.add(newEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                inputData \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return outputTaskArray;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"File cannot be loaded from the specified file path. Please try again!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Saves parsed strings to output text file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that contains all tasks read from input text file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @throws DukeException if there is an issue."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void saveToDisk(TaskList arrayOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            final int isDone \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            final int notDone \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String outputLine \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int sizeOfArray \u003d arrayOfTasks.taskArraySize();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            int check;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            while (index \u003c sizeOfArray) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                Task task \u003d arrayOfTasks.get(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if (task.isDone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    check \u003d isDone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    check \u003d notDone;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                if ((task.getClass().equals(Todo.class))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputLine \u003d \"T\" + \"|\" + check + \"|\" + task.description;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else if ((task.getClass().equals(Deadline.class))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Deadline deadlineTask \u003d (Deadline) task;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputLine \u003d \"D\" + \"|\" + check + \"|\" + deadlineTask.description + \"|\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + deadlineTask.deadlineDate.date + \" \" + deadlineTask.deadlineTime.timing;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else if ((task.getClass().equals(Event.class))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    Event eventTask \u003d (Event) task;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    outputLine \u003d \"E\" + \"|\" + check + \"|\" + eventTask.description + \"|\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                            + eventTask.eventDate.date + \" \" + eventTask.eventTime.timing;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    // Do nothing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                String separator \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                writer.write(outputLine + separator);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (Exception error) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Error writing to specified file path. Please try again.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Asserts that there have been changes made to the file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void changeFile() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isFileChanged \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if there are any changes made to the storage files."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return True if files have been changed, False if no changes have been made."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean isStorageChanged() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isFileChanged;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses deadline command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputData String input by user on command line."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Deadline object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Deadline parseDeadline(String inputData) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] userInputArray \u003d inputData.split(\"\\\\|\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] dateTimeTokens \u003d userInputArray[3].split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskDate \u003d dateTimeTokens[0];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskTime \u003d dateTimeTokens[1];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskDesc \u003d userInputArray[2];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int boolDone \u003d Integer.valueOf(userInputArray[1]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new Deadline(boolDone, taskDesc, taskDate, taskTime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses Todo command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputData String input by user on command line."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Todo object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Todo parseToDo(String inputData) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] userInputArray \u003d inputData.split(\"\\\\|\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int boolDone \u003d Integer.valueOf(userInputArray[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskDesc \u003d userInputArray[2];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new Todo(taskDesc, boolDone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Parses Event command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputData String input by user on command line."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Event object."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private Event parseEvent(String inputData) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] userInputArray \u003d inputData.split(\"\\\\|\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] dateTimeTokens \u003d userInputArray[3].split(\" \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskDate \u003d dateTimeTokens[0];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskTime \u003d dateTimeTokens[1];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String taskDesc \u003d userInputArray[2];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int boolDone \u003d Integer.valueOf(userInputArray[1]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return new Event(boolDone, taskDesc, taskDate, taskTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Obtains type of task/command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param inputData String input by user on command line."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return First alphabet of task in string."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private String getTaskType(String inputData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String[] userInputArray \u003d inputData.split(\"\\\\|\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return userInputArray[0];"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 180
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for all types of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected static int totalTasks \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskType Type of the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskType Type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param done Checks if it is a done command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Task(String description, TaskType taskType, int done) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Asserts that the task is completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets the task\u0027s description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Task description in String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return taskType + \"[\\u2714] \" + this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return taskType + \"[\\u2718] \" + this.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 63
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods to manipulate the array containing all of the tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected ArrayList\u003cTask\u003e arrayOfTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TaskList object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.arrayOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TaskList object with specified ArrayList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Parsed array of tasks read from input file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e arrayOfTasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.arrayOfTasks \u003d arrayOfTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Adds task to the ArrayList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param newTask New task to add."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.add(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Removes task from the ArrayList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Task to remove."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.remove(taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Retrieves this specific task from the ArrayList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param taskIndex Task to retrieve."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Task object specified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Task get(int taskIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return arrayOfTasks.get(taskIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Retrieves size of ArrayList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Size of ArrayList as int."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public int taskArraySize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return arrayOfTasks.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return arrayOfTasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int size \u003d arrayOfTasks.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        while (index \u003c size) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Task curr \u003d arrayOfTasks.get(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(index + 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(\". \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(curr.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d output.toString().trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 87
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Ensures that these are the only 3 types of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * @return String in our desired format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"[D]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * @return String in our desired format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"[E]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         * @return String in our desired format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"[T]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 36
    }
  },
  {
    "path": "src/main/java/Timing.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Formats timing for output."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Timing {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String timing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int minute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final int hour;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final boolean isPM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Timing object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param timing Timing read from input text file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Timing(String timing) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert !timing.equals(\"\") : \"Date cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        int timeInt \u003d Integer.parseInt(timing);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.minute \u003d timeInt % 100;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.hour \u003d timeInt / 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (minute \u003c 0 || minute \u003e\u003d 60) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Oops. Minute field should be between 0 and 59!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (hour \u003c 0 || hour \u003e\u003d 24) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            throw new DukeException(\"Oops. Hour field should be between 0 and 23!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (this.hour \u003c 12) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            isPM \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            isPM \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String formattedTiming;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String meridiem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (hour \u003d\u003d 0 || hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedTiming \u003d \"12\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedTiming \u003d hour % 12 + \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (minute !\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            formattedTiming \u003d formattedTiming + \":\" + String.format(\"%02d\", minute);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (isPM) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            meridiem \u003d \"pm\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            meridiem \u003d \"am\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return formattedTiming + meridiem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 62
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements constructor methods for Todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Todo object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of todo command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Todo object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of todo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param done Checks if it is a done command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Todo(String description, int done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        super(description, TaskType.TODO, done);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task.totalTasks++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Overrides toString method so as to customize output string format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return String in our desired format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 32
    }
  },
  {
    "path": "src/main/java/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods for TodoCommand."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task toDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates TodoCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param description Description of todo command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        toDoTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Runs command to handle todo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Array of tasks that we have parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param ui Ui object to aid in program execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param storage Storage object to aid in program execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response runCommand(TaskList arrayOfTasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assert arrayOfTasks !\u003d null || ui !\u003d null || storage !\u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                : \"arrayOfTasks, Ui and Storage objects cannot be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        arrayOfTasks.addTask(toDoTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        ui.printTaskCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return ui.addedMessage(toDoTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Checks if the program has to exit Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return exitCheck as False"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public boolean exitChecker() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 41
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": " * Implements methods that prints out messages to console."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    private final BufferedReader inputReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Instantiates Ui object and BufferedReader object to scan user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Reader inputStreamReader \u003d new InputStreamReader(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        this.inputReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs the total number of tasks in ArrayList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String printTaskCount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        if (Task.totalTasks \u003e 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"You have a total of \" + Task.totalTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            return \"You have a total of \" + Task.totalTasks + \" task in the list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs welcome message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public String printWelcomeMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String message \u003d \"Hello there! My name is Duke. \\nHow may I assist you?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs exit message after exiting program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response printByeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String goodbye \u003d \"Goodbye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(goodbye, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs done message after task is completed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param doneTask Task that is added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response doneMessage(Task doneTask) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String done \u003d \"Great job! The following task has been marked as done:\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d done + \"\\n\" + doneTask;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs added message after task is added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response addedMessage(Task newTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String added \u003d \"Thank you for your input. The following task has been added to the list:\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d added + \"\\n\" + \" \" + newTask.toString() + \"\\n\" + printTaskCount();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Outputs remove message after task is removed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response removeMessage(Task deletedTask) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String removeMsg \u003d \"The following task has been successfully removed:\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d removeMsg + \"\\n\" + deletedTask + \"\\n\" + printTaskCount();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Lists tasks in ArrayList."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @param arrayOfTasks Our main ArrayList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response listTasks(TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String listMsg \u003d \"These are the tasks in your list:\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d listMsg + \"\\n\" + arrayOfTasks.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Prints message to show matching tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response matchingMessage(TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String matchingMsg \u003d \"These are the matching tasks in your list\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d matchingMsg + \"\\n\" + arrayOfTasks.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Prints message to say that there are no matching tasks found."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response noMatchMessage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String noMatchMsg \u003d \"There are no matching tasks!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(noMatchMsg);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output error message if unable to write to file path."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response writeError() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String goodbye \u003d \"Bye. Hope to see you again!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d \"Tasks could not be saved to \u0027duke.txt\u0027. Please check that you have a \u0027data\u0027 folder \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                             + \"containing \u0027duke.txt\u0027.\" + \"\\n\\n\" + goodbye;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput, true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output message if done writing to file path."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response finishWriting() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String goodbye \u003d \"Goodbye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d \"Tasks have been successfully saved to duke.txt!\" + \"\\n\\n\" + goodbye;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output generic error message."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response returnError(String errorMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(errorMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output error message for list command failure."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response listError() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String output \u003d \"Failed to list tasks as your list is currently empty.\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(output);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output help message for list of commands."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response helpText() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String finalOutput \u003d \"List of commands are as follows:\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"1. [list]: Lists all tasks\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"2. [delete \u003cindex\u003e]: Removes task from list\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"3. [done \u003cindex\u003e]: Marks task as done \\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"4. [todo \u003ctask\u003e]: Creates Todo Task \\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"5. [deadline \u003ctask\u003e /by DD/MM/YY HHMM]: \\n   Creates Deadline task with desired date \\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"6. [event \u003ctask\u003e /at DD/MM/YY HHMM]: \\n   Creates Event task with desired date \\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"7. [find \u003cquery\u003e] Returns matching tasks in list \\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"8. [sort \u003cdescription\u003e or \u003ctype\u003e]: Sorts list\\n   according to input parameter\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"9. [help]: Displays all available features in Duke\\n   application\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \"10. [bye]: Closes program\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(finalOutput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output sorted list in alphabetical order according to task description."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response listTaskByDesc(Ui ui, TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String output \u003d \"Your list has been sorted in alphabetical order with respect to task description.\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response finalResponse \u003d ui.listTasks(arrayOfTasks);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(output + \"\\n\\n\" + finalResponse.getInputMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output sorted list in alphabetical order according to task type."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response listTaskByType(Ui ui, TaskList arrayOfTasks) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String output \u003d \"Your list has been sorted in alphabetical order with respect to task type.\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response finalResponse \u003d ui.listTasks(arrayOfTasks);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(output + \"\\n\\n\" + finalResponse.getInputMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * Output error message for invalid sort command input."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     * @return Response object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afroneth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public Response sortError() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String output \u003d \"The sort command is invalid. Please enter \u0027sort description\u0027 or \u0027sort type\u0027.\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Response responseObject \u003d new Response(output);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        return responseObject;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 219
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"490.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #ADD8E6; -fx-background-radius: 10; -fx-border-color: black; -fx-border-insets: 0.55; -fx-border-radius: 4.5; -fx-border-width: 1.3;\" text\u003d\"Text\" textOverrun\u003d\"WORD_ELLIPSIS\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cInsets left\u003d\"6\" right\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"13.5\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cInsets bottom\u003d\"6\" left\u003d\"6\" right\u003d\"6\" top\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Hi, how may I assist you?\" style\u003d\"-fx-border-color: #48d1cc;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"324.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-border-color: black;\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #ffebcd;\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "afroneth": 26
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task event \u003d new Event(\"project meeting\", \"17/7/2015\", \"1842\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected String testCommand \u003d \"testCommand\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public ParserTest() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void parseCommand_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Parser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Parser.parse(testCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"Catastrophe detected! I\u0027m sorry, but \u0027\" + testCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                    + \"\u0027 is not within my realm of knowledge. \" + \"\\u2620 \", error.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void setDone_validInput_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String correctOutput \u003d \"[E][\\u2714] project meeting (at: 17th of July 2015, 6:42pm)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        event.setDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(event.toString(), correctOutput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void doneCommand_missingIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Parser.parse(\"done\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"Please specify which task you have completed.\", error.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void eventCommand_missingTiming_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Parser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            Parser.parse(\"event project meeting /at 4/1/2018\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"Date and Timing fields has not been specified correctly. Please try again.\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                         error.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 55
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void load_invalidFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            String wrongPath \u003d \"data/randomFile.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            new Storage(wrongPath).load();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "            assertEquals(\"File cannot be loaded from the specified file path. Please try again!\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "                                  error.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void changeFile_validInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        storage.changeFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(storage.isFileChanged);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 26
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task todo \u003d new Todo(\"sleep\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    protected Task event \u003d new Event(\"project meeting\", \"17/11/2015\", \"1532\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public TaskListTest() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void taskArraySize_validInput_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.addTask(todo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.addTask(event);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(2, todoList.taskArraySize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.deleteTask(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        todoList.deleteTask(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(0, todoList.taskArraySize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    void getTask_validInput_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String toDoTask \u003d taskList.get(0).toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        String eventTask \u003d taskList.get(1).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(\"[T][\\u2718] sleep\", toDoTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertEquals(\"[E][\\u2718] project meeting (at: 17th of November 2015, 3:32pm)\", eventTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 33
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void doneTask_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task task \u003d new Todo(\"Todo\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        task \u003d new Event(\"Event\", \"4/3/2014\", \"1543\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    public void undoneTask_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        Task deadline \u003d new Deadline(\"Deadline\", \"20/5/1984\", \"1239\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "        assertFalse(deadline.isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afroneth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afroneth": 23
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "deadline return book /by 5/7/2018 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "event project meeting /at 12/3/2019 1100"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "find book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "afroneth": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "afroneth": 2,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\ByeCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Command.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Date.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DeadlineCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DeleteCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DoneCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\EventCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\FindCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\ListCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Parser.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Storage.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\TaskList.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\TaskType.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Timing.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\TodoCommand.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afroneth"
        },
        "content": "C:\\Users\\Kenneth\\Desktop\\duke-ip\\src\\main\\java\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "afroneth": 22
    }
  }
]
