[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "T | 1 | work"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "T | 1 | homework"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "T | 0 | work"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "T | 0 | work"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "E | 0 | tomorrow  | home"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 5
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The command class is used to handle and execute commands"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * after input by user is processed by the parser."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes a Command object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param task The input task given by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param action The type of action take as given by the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Command(String task, String action) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert task !\u003d null \u0026\u0026 action !\u003d null : \"task and action cannot be null!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Executes the action on task given."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskList the current task list in use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param ui the user interface object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskList !\u003d null \u0026 ui !\u003d null : \"taskList and ui should not be null!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return ui.showEnd();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return ui.showList(taskList.getList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String[] split \u003d task.split(\"done \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                Integer taskNumber \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                return taskList.checkOff(taskNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                return \"Please input a valid number\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return taskList.delete(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return taskList.addToDo(task) + ui.showAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return taskList.addDeadline(task) + ui.showAdded();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return taskList.addEvent(task) + ui.showAdded();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String toFind \u003d task.split(\"find \")[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d taskList.getList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            ArrayList\u003cTask\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return getSize(toFind, ui, list, filtered);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return ui.showInvalidCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private String getSize(String toFind, Ui ui, ArrayList\u003cTask\u003e list, ArrayList\u003cTask\u003e filtered) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return \"You do not have any tasks yet\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String toReturn \u003d \"Here are the tasks that matches \u0027\" + toFind + \"\u0027\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                String task \u003d list.get(i).toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                if (task.contains(toFind)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    filtered.add(list.get(i));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d ui.showList(filtered);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 82
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The Duke class is the main class in which the program is run."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Storage storage \u003d new Storage(\"./src/main/java/data/duke.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes a Duke object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(err.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(\"File not found in filepath provided\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String getResponse(String input) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Command nextCommand \u003d parser.interpret(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return nextCommand.execute(taskList, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 34
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 28
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Parser class to interpret the input given by the user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes the parser object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Parser () {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Interprets the input given by the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param line input given by user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return Command object determined by the interpretation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Command interpret (String line) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (line.indexOf(\"todo\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"todo\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.indexOf(\"delete\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"delete\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.indexOf(\"deadline\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"deadline\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.indexOf(\"event\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"event\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.indexOf(\"done\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"done\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"bye\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (line.indexOf(\"find\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"find\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return new Command(line, \"invalid\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 38
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The Storage class deals with handling the writing and reading of data to the file specified"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private final File dataFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"CheckStyle\"})"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes a storage object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param filePath String representing the filepath to load the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            if (dataFile.createNewFile()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                System.out.println(\"data file has been created\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(\"error opening file\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Appends task to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param task String representing task to be appended"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void appendFile (String task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fw.write(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(\"error writing \" + task + \" to file storage\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Overwrites the file with data from the list given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param list representing the list of tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void overwriteFile (ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            for (Task currentTask : list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                fw.write(identifyTask(currentTask));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(\"error overwriting file.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(\"error interpreting task\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Loads the file into an array list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return ArrayList of type Task stored in the file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws FileNotFoundException file not found"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeException error with files"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        ArrayList\u003cTask\u003e toReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Scanner reader \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        while (reader.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String currentTask \u003d reader.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String[] splits \u003d currentTask.split(\" \\\\| \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            boolean done \u003d Integer.parseInt(splits[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String type \u003d splits[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String task \u003d splits[2];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String frequency \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            boolean isRepetitive \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            if (splits.length \u003e 4) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                frequency \u003d splits[4].toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                isRepetitive \u003d !frequency.equals(\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            case (\"T\"):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                Task todoTask \u003d new Todo(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    todoTask.checkOff();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                toReturn.add(todoTask);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            case (\"D\"):"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                String date \u003d splits[3];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                Deadline deadlineTask \u003d isRepetitive"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                            ? new Deadline(task, date, frequency)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                            : new Deadline(task, date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    deadlineTask.checkOff();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                toReturn.add(deadlineTask);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            case (\"E\"):"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                String day \u003d splits[3];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                Event eventTask \u003d isRepetitive"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                    ? new Event(task, day, frequency)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                    : new Event(task, day);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    eventTask.checkOff();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                toReturn.add(eventTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                System.out.println(\"this should not occur, error in loading of files\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Identifies the type of the current task"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param currentTask the current task to identify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return String to write into the file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeException when current task does not fit any description"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private String identifyTask(Task currentTask) throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String done \u003d currentTask.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Boolean isRepetitive \u003d currentTask.getIsRepetitive();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        System.out.println(\"is repetitive? \" + isRepetitive);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String frequency \u003d isRepetitive ? currentTask.getFrequency() : \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        System.out.println(\"frequency is: \" + frequency);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (currentTask instanceof Event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return \"E | \" + done + \" | \" + currentTask.getTaskName() + \" | \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + ((Event) currentTask).getDate() + \" | \" + frequency + \"\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (currentTask instanceof Deadline) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return \"D | \" + done + \" | \" + currentTask.getTaskName() + \" | \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + ((Deadline) currentTask).getDate() + \" | \" + frequency + \"\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (currentTask instanceof Todo) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return \"T | \" + done + \" | \" + currentTask.getTaskName() + \"\\n\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeException(\"error interpreting task\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 159
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidDayException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The TaskList class is used to keep track of the tasks given by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Interacts with a storage object when changes to the task list is made."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private final ArrayList\u003cTask\u003e todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initialize a TaskList object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param storage object in which the file data is read, written and stored in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws FileNotFoundException file not found, check file path"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeException issue creating duke object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public TaskList(Storage storage) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        this.todo \u003d storage.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param line the line in which the command of delete was given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeException issue creating duke object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String delete(String line) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String[] splits \u003d line.split(\"delete \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d Ui.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            if (splits.length \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(splits[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                if (taskNumber - 1 \u003e\u003d todo.size() || taskNumber - 1 \u003c 0 || todo.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    throw new DukeException(\"Invalid task number\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    System.out.println(\"actually deleting\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    int size \u003d todo.size() - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    toReturn +\u003d \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            + todo.get(taskNumber - 1) + \"\\n\" + \"Now you have \" + size + \" task in the list \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    toReturn +\u003d Ui.showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    todo.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    storage.overwriteFile(todo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    return toReturn;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                throw new DukeException(\"Please key in the task number to be marked done\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return \"please input a valid number\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Adds an event task to the task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param line the line in which the command of adding event was given."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException task given is invalid"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidDayException day given is invalid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String addEvent (String line) throws DukeInvalidDayException, DukeInvalidTaskException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert line !\u003d null : \"event given cannot be null\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String[] splits \u003d line.split(\"event |/at | /repeat \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        boolean isRepetitive \u003d splits.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d Ui.showLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (splits.length \u003e 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(splits[3]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Event task \u003d isRepetitive"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            ? new Event(splits[1], splits[2], splits[3])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            : new Event(splits[1], splits[2]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            todo.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d \"Got it. I\u0027ve added this to task: \\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + \"Now you have \" + todo.size() + \" tasks in the list \\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + Ui.showLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String textToAppend \u003d \"\\nE | 0 | \" + splits[1] + \" | \" + splits[2] + \" | \" + splits[3];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            storage.appendFile(textToAppend);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (splits.length \u003e 1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidDayException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidTaskException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Adds an deadline task to the task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param line the line in which the command of adding deadline task was given."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidDateException date given is invalid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException task given is invalid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String addDeadline (String line) throws DukeInvalidDateException, DukeInvalidTaskException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert line !\u003d null : \"deadline task given cannot be null\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String[] splits \u003d line.split(\"deadline |/by | /repeat \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        boolean isRepetitive \u003d splits.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d Ui.showLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (splits.length \u003e 2) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Deadline task \u003d isRepetitive"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                ? new Deadline(splits[1], splits[2], splits[3])"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                : new Deadline(splits[1], splits[2]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            todo.add(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d \"Got it. I\u0027ve added this to task: \\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + \"Now you have \" + todo.size() + \" tasks in the list \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + Ui.showLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String textToAppend \u003d \"\\nD | 0 | \" + splits[1] + \" | \" + splits[2] + \" | \" + splits[3];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            storage.appendFile(textToAppend);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else if (splits.length \u003e 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidDateException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidTaskException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Adds an todo task to the task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param line the line in which the command of adding todo task was given."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException task given is invalid"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String addToDo (String line) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String[] splits \u003d line.split(\"todo \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d Ui.showLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (splits.length \u003e 1) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Todo task \u003d new Todo(splits[1]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            todo.add(task);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d \"Got it. I\u0027ve added this to task: \\n\" + task + \"\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + \"Now you have \" + todo.size() + \" tasks in the list \\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                    + Ui.showLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String textToAppend \u003d \"\\nT | 0 | \" + splits[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            storage.appendFile(textToAppend);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return toReturn;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidTaskException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Marks the task in the task list as done."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskNumber task number in which the task is done."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String checkOff (Integer taskNumber) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Task task \u003d todo.get(taskNumber - 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        boolean isRepetitive \u003d task.getIsRepetitive();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        System.out.println(isRepetitive);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        System.out.println(task.getDate());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d Ui.showLine() + \"Nice! I\u0027ve marked this task as done: \\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (isRepetitive) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            task.updateDate();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d \"As this task is a repetitive task, the date has been updated. \\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                        + todo.get(taskNumber - 1) + \"\\n\" + Ui.showLine();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            task.checkOff();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d task + \"\\n\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d Ui.showLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        storage.overwriteFile(todo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Returns the Array list in which the tasks are stored"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return this.todo;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 187
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * User Interface class where interactions with user are handled"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Scanner input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes the Ui object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Ui() { }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Shows a line to dictate separation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static String showLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return \"_______________________________________________________ \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Displays a welcome message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static String showWelcomeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d showLine()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                + \"Hello! Welcome to Duke, your personal task manager! What can I do for you? \\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"COMMANDS: \\nTo see your list of tasks - list \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"To mark a task as done - done {task number} \\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"To delete your tasks - delete {task number} \\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"To find certain tasks - find {keyword} \\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"To add a todo item to your list of tasks - todo {task} \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"To add an event item to your list of tasks - event {event details} /at {date/event} \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d \"To add a todo item to your list of tasks - deadline {deadline details} /by {date} \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn \u003d toReturn + showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Displays a message to show that the task has been added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String showAdded () {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return \"Okay! I\u0027ve added it to the list.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                + \" To view your current tasks, type \u0027list\u0027\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Displays the list of tasks stored."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param list in which tasks are stored"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String showList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert list.size() \u003e\u003d 0 : \"list size should not be negative\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            toReturn +\u003d \"you do not have any tasks yet\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                int number \u003d i + 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                toReturn +\u003d \" \" + number + \".\" + list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        toReturn +\u003d showLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Displays a message to the user indicating that the command is invalid"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String showInvalidCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return \"I\u0027m sorry I don\u0027t understand :(\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Displays a message indicating that the program has come to an end."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static String showEnd() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return showLine() + \" Bye. Hope to see you again soon!\" + \"\\n\" + showLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 87
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class DukeInvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public DukeInvalidDateException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(\"Date is invalid, date cannot be left blank :(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidDayException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class DukeInvalidDayException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public DukeInvalidDayException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(\"Day of event is invalid :(, please do not leave it as empty\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public DukeInvalidTaskException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(\"Task is invalid, description cannot be empty :(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 7
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 61
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 10
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private void handleUserInput() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 71
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The Deadline class is used to represent the task of a deadline nature."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * This object contains the task name as well as the day/date of the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Inherits from Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes a Deadline object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskName name or description of task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param date date in which task has to be completed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidDateException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Deadline(String taskName, String date) throws DukeInvalidDateException, DukeInvalidTaskException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskName !\u003d null : \"TaskName should not be null!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert date !\u003d null : \"Date should not be null!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert !date.equals(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        repeatedFrequency \u003d Frequency.NONE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (!date.equals(null) \u0026\u0026 !date.equals(\" \")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                super.dateTime \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            } catch (DateTimeParseException err) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidDateException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes a Deadline object that is repetitive"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskName name or description of task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param date date in which task has to be completed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param frequency frequency of the task to be repeated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidDateException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Deadline(String taskName, String date, String frequency)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throws DukeInvalidDateException, DukeInvalidTaskException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskName !\u003d null : \"TaskName should not be null!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert date !\u003d null : \"Date should not be null!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert !date.equals(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert frequency !\u003d null : \"Frequency cannot be null!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        repeatedFrequency \u003d translateToFrequency(frequency);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        setIsRepetitive();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (!date.equals(null) \u0026\u0026 !date.equals(\" \")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                super.dateTime \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            } catch (DateTimeParseException err) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidDateException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Gets the date of the Deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a String representing the date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return dateTime.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Get a string representation of the object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a String representing the Deadline object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String finished \u003d this.isDone ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String frequency \u003d isRepetitive"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                ? \", repeats \" + getFrequency()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                : \", does not repeat\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d dateTime \u003d\u003d null"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            ? \"[D]\" + \"[\" + finished + \"] \" + taskName + \" (by: \" + date + \")\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            : \"[D]\" + \"[\" + finished + \"] \" + taskName + \" (by: \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                + dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                + frequency + \")\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 109
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidDayException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The Event class is used to represent the task of an event nature."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * This object contains the task name as well as the day/date of the event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Inherits from Task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes the Event object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskName name or description of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param day day in which task has to be completed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidDayException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Event(String taskName, String day) throws DukeInvalidDayException, DukeInvalidTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskName !\u003d null : \"TaskName should not be null!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert day !\u003d null : \"Day should not be null!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert !day.equals(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        repeatedFrequency \u003d Frequency.NONE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (!day.equals(null) \u0026\u0026 !day.equals(\" \")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                super.dateTime \u003d LocalDate.parse(day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            } catch (DateTimeParseException err) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidDayException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes the Event object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskName name or description of task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param day day in which task has to be completed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param frequency frequency to repeat task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidDayException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Event(String taskName, String day, String frequency)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throws DukeInvalidDayException, DukeInvalidTaskException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskName !\u003d null : \"TaskName should not be null!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert day !\u003d null : \"Day should not be null!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert !day.equals(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        repeatedFrequency \u003d translateToFrequency(frequency);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        setIsRepetitive();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (!day.equals(null) \u0026\u0026 !day.equals(\" \")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                super.dateTime \u003d LocalDate.parse(day);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            } catch (DateTimeParseException err) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidDayException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Gets the date of the Event"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a String representing the day."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return dateTime.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return day;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Get a string representation of the object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a String representing the Event object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String finished \u003d this.isDone ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String frequency \u003d isRepetitive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                ? \", repeats \" + getFrequency()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                : \", does not repeat\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d dateTime \u003d\u003d null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            ? \"[E]\" + \"[\" + finished + \"] \" + taskName + \" (at: \" + day + \")\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                            : \"[E]\" + \"[\" + finished + \"] \" + taskName + \" (at: \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                + dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                                + frequency + \")\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 106
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Task object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    protected Boolean isRepetitive \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    protected LocalDate dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public enum Frequency {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        DAILY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        WEEKLY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        MONTHLY,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        YEARLY,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        NONE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    protected Frequency repeatedFrequency;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes the task object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskName task name or description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Task(String taskName) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskName !\u003d null : \"TaskName should not be null!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        if (!taskName.equals(null) \u0026\u0026 !taskName.equals(\" \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            throw new DukeInvalidTaskException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Marks the task as done"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void checkOff() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Checks if the task is done"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a boolean indicating if the task is done"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Boolean isDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Gets the task name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return String representing the task\u0027s name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    protected void setIsRepetitive() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        isRepetitive \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * checks if task is repetitive"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return true if task is repetitive"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Boolean getIsRepetitive() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return isRepetitive;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Returns the frequency of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a string describing the frequency"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String getFrequency() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return this.repeatedFrequency.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * updates the date based on frequency stated"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void updateDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert dateTime !\u003d null : \"dateTime should not be null!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        System.out.println(\"update date\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        System.out.println(dateTime \u003d\u003d null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        switch (repeatedFrequency) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(dateTime.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            dateTime \u003d dateTime.plusDays(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(dateTime.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            dateTime \u003d dateTime.plusWeeks(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            dateTime \u003d dateTime.plusMonths(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case YEARLY:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            dateTime \u003d dateTime.plusYears(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            System.out.println(\"This is not a repetitive task\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return dateTime.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Gets a representation of the task object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return String object representing the task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String finished \u003d this.isDone ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String toReturn \u003d \"[\" + finished + \"]\" + taskName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    private Frequency evaluateFrequency(String frequency) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return translateToFrequency(frequency);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Translate a string frequency into a Enum Frequency object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param frequency"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return Frequency"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public static Frequency translateToFrequency(String frequency) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        switch (frequency) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return Frequency.DAILY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return Frequency.WEEKLY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return Frequency.MONTHLY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        case \"yearly\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return Frequency.YEARLY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            return Frequency.NONE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 150
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * The Todo class is used to represent the task of a Todo nature with no time specified"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " * Inherits from Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Initializes a Todo object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @param taskName name or description of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @throws DukeInvalidTaskException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public Todo(String taskName) throws DukeInvalidTaskException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        assert taskName !\u003d null : \"taskName should be null\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * Get a String representation of the object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     * @return a String representing the object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        String finished \u003d this.isDone ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        return \"[T]\" + \"[\" + finished + \"] \" + taskName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void toString_correctDateFormat_properDateFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Deadline task \u003d new Deadline(\"hi\", \"2020-01-01\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String expected \u003d \"[D][✗] hi (by: Jan 1 2020)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (DukeInvalidTaskException | DukeInvalidDateException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void toString_wrongDateFormat_inproperDateFormat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Deadline task \u003d new Deadline(\"hi\", \"01\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String expected \u003d \"[D][✗] hi (by: 01)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (DukeInvalidTaskException | DukeInvalidDateException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 33
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    public void initializeTodo() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            Todo task \u003d new Todo(\"hi\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            String expected \u003d \"[T]\" + \"[✗] hi\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        } catch (DukeInvalidTaskException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "todo work"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "todo return books"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "deadline this friday /by sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yongmingyang"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "yongmingyang": 5,
      "-": 20
    }
  }
]
