[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 1,
      "-": 45
    }
  },
  {
    "path": "dobbylist.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "[D][✘] ip task for week 3 (by: Aug 27 2020 11:59 pm)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "[E][✘] lecture (at: Aug 28 2020 4:00 pm)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "[T][✘] push new levels to github"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 3
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 2,
      "-": 103
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * The settings file is used to specify which projects to include in your build."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Detailed information about configuring a multi-project build in Gradle can be found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * in the user manual at https://docs.gradle.org/6.5/userguide/multi_project_builds.html"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "rootProject.name \u003d \u0027ip\u0027"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 10
    }
  },
  {
    "path": "src/main/java/dobby/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Specifies all commands the chat bot can work with"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    TODO(\"\\n      todo _description_\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    DEADLINE(\"\\n      deadline _description_ /by dd/mm/yyyy hhhh(optional)\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    EVENT(\"\\n      event _description_ /at dd/mm/yyyy hhhh(optional)\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    LIST(\"\\n      list\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    DONE(\"\\n      done _task_number_\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    DELETE(\"\\n      delete _task_number_\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    BYE(\"\\n      bye\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    FINDTYPE(\"\\n      findtype _T/D/E_\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    FIND(\"\\n      find _keyword_\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    SCHEDULED(\"\\n      scheduled dd/mm/yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String usage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Commands (String usage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getUsage () {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.usage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 27
    }
  },
  {
    "path": "src/main/java/dobby/Dobby.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Main class which begins the running of the chat bot"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Dobby {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Dobby (String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        parser \u003d new Parser(this.tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.storage \u003d new Storage(filePath, tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Takes in user input as long as user gives and terminated when user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * enter bye"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.storage.readFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String text \u003d ui.getInput();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                ui.reply(parser.getMessage(text));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DobbyException e) { // prints error message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (text.equals(\"bye\")) { // terminates program after bye command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                storage.rewriteFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Main function"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        File dobbyFile \u003d new File(\"../dobbylist.txt\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (!dobbyFile.exists()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                dobbyFile.getParentFile().mkdirs(); // Will create parent directories if not exists"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                dobbyFile.createNewFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                FileOutputStream s \u003d new FileOutputStream(dobbyFile, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        new Dobby(dobbyFile.getPath()).run();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 71
    }
  },
  {
    "path": "src/main/java/dobby/DobbyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Exception class with specified message"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class DobbyException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public DobbyException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 10
    }
  },
  {
    "path": "src/main/java/dobby/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Parses the input given by the user and interacts with TaskList accordingly"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String ALL_COMMANDS \u003d \"\\n    You can use the following commands in this chat bot:\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.TODO).getUsage()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.DEADLINE).getUsage()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.EVENT).getUsage()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.LIST).getUsage()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.DONE).getUsage()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.DELETE).getUsage()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.SCHEDULED).getUsage()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.FIND).getUsage()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.FINDTYPE).getUsage()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.BYE).getUsage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Parser(TaskList tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns the chat bot reply or the error message depending on the input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param text text inputted by user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message reply to user based on input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @throws DobbyException based on conditions with customised message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getMessage(String text) throws DobbyException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (text.equalsIgnoreCase(\"bye\")) { // bye command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"\\n    Goodbye. Hope to see you again soon!\\n    \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"todo\")) { // todo command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(5).trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Todo todo \u003d new Todo(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                this.tasks.addToList(todo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d \"\\n    Great! I\u0027ve added the following task:\\n      \" + todo.getDescription()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + String.format(\"\\n    Now you have %d task%s in the list.\\n    \", (this.tasks).getSize(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        this.tasks.getSize() \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. Description cannot be empty. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\" + (Commands.TODO).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"deadline\")) { // deadline command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String by \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(9).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (text.indexOf(\"/by\") \u003c\u003d 1) { // empty description or /by missing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. Description cannot be empty. \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\" + (Commands.DEADLINE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                by \u003d text.substring(text.indexOf(\"/by\") + 4).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(0, text.indexOf(\"/by\") - 1).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Deadline deadline \u003d new Deadline(text, by);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (by.substring(1 + by.lastIndexOf(\u0027 \u0027)).length() \u003e 4) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command.\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"\\n    Details of time should be in 24hr format with only 4 digits. \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\" + (Commands.DEADLINE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                this.tasks.addToList(deadline);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d \"\\n    Great! I\u0027ve added the following task:\\n      \" + deadline.getDescription()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + String.format(\"\\n    Now you have %d task%s in the list.\\n    \", (this.tasks).getSize(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                                this.tasks.getSize() \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (text.startsWith(\"deadline\") || text \u003d\u003d null) { // description empty"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. Description cannot be empty. \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\" + (Commands.DEADLINE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                } else { // no deadline details specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. Deadline details cannot be empty. \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.DEADLINE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. The format of the date in incorrect. \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.DEADLINE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DobbyException e) { // empty description or /by missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"event\")) { // event command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String at \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(6).trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (text.indexOf(\"/at\") \u003c\u003d 1) { // empty description or /at missing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. Description cannot be empty. \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.EVENT).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                at \u003d text.substring(text.indexOf(\"/at\") + 4);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(0, text.indexOf(\"/at\") - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Event event \u003d new Event(text, at);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (at.substring(1 + at.lastIndexOf(\u0027 \u0027)).length() \u003e 4) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command.\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"\\n    Details of time should be in 24hr format with only 4 digits. Please try again.\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.EVENT).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                this.tasks.addToList(event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d \"\\n    Great! I\u0027ve added the following task:\\n      \" + event.getDescription()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + String.format(\"\\n    Now you have %d task%s in the list.\\n    \", (this.tasks).getSize(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        this.tasks.getSize() \u003e 1 ? \"s\" : \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (text.startsWith(\"event\") || text \u003d\u003d null) { // description empty"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. Description cannot be empty. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\" + (Commands.EVENT).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                } else { // no schedule details specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. Schedule details cannot be empty. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\" + (Commands.EVENT).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. The format of the date in incorrect. \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please try again.\" + (Commands.EVENT).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DobbyException e) { // empty description or /at missing"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.equalsIgnoreCase(\"list\")) { // list command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d (this.tasks).getListedTasks();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"done\")) { // done command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(4).trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                int index \u003d Integer.parseInt(text);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if ((this.tasks).getSize() \u003c index) { // if index is out of range throw exception"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Task number must be within the correct range.\" + (Commands.DONE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Task task \u003d (this.tasks).getTask(index - 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                task.setDone();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d \"\\n    Great! I\u0027ve marked this task as done:\\n      \" + task.getDescription() + \"\\n    \";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DobbyException e) { // if index is out of range return message"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (Exception e) { // missing number after done"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. Please enter a task number after done.\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.DONE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"delete\")) { // delete command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                text \u003d text.substring(6).trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                int index \u003d Integer.parseInt(text);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if ((this.tasks).getSize() \u003c index) { // if index is out of range throw exception"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Task number must be within the correct range.\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.DELETE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                this.tasks.removeTask(index - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d \"\\n    Noted. I\u0027ve removed this task:\\n      \" + task.getDescription() + \"\\n    \";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DobbyException e) { // if index is out of range return message"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (Exception e) { // missing number after done"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Please enter a task number after delete.\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.DELETE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"scheduled\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String dt \u003d text.substring(text.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String day \u003d dt.substring(0, dt.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String month \u003d dt.substring(dt.indexOf(\u0027/\u0027) + 1, dt.lastIndexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String year \u003d dt.substring(dt.lastIndexOf(\u0027/\u0027) + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                LocalDate parsedDate \u003d LocalDate.parse(year + \"-\" + month + \"-\" + day);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d (this.tasks).getScheduledTasks(parsedDate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"The format of the date in incorrect. Please try again.\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.SCHEDULED).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"The format of the date in incorrect. Please try again.\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.SCHEDULED).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"findtype\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String type \u003d text.substring(text.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (type.length() \u003e 1) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Please try again.\" + (Commands.FINDTYPE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (!(type.equalsIgnoreCase(\"T\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        || type.equalsIgnoreCase(\"D\")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        || type.equalsIgnoreCase(\"E\"))) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Type can be T, D, or E only. Please try again.\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.FINDTYPE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d (this.tasks).findOfType(type);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Type required cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.FINDTYPE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (text.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String keyword \u003d (text.substring(text.indexOf(\u0027 \u0027))).substring(1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (keyword.indexOf(\u0027 \u0027) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"You can only give a single word. Please try again.\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.FINDTYPE).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                } else if (keyword.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + \"Keyword required cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                            + (Commands.FIND).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d (this.tasks).findWithKeyword(keyword);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                throw new DobbyException(\"\\n    Incorrect usage of command. \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + \"Keyword required cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + (Commands.FIND).getUsage() + \"\\n    \");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else { // unexpected input"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"\\n    Sorry that command is not supported. Please try again.\" + ALL_COMMANDS + \"\\n    \";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            throw new DobbyException(message);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 241
    }
  },
  {
    "path": "src/main/java/dobby/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Reads the stored tasks at updates the storage file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    Storage(String filePath, TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Reads the storage file and add tasks to the TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void readFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                String str \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    this.tasks.createFromStorage(str);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                } catch (ParseException e) { // should never be called"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    Ui.reply(\"\\n    \" + e.getMessage() + \"\\n    \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Ui.reply(\"\\n    \" + e.getMessage() + \"\\n    \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Updates current tasks to the storage file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void rewriteFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fw.flush();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            for (int i \u003d 0; i \u003c (this.tasks).getSize() - 1; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                Task task \u003d (this.tasks).getTask(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                fw.write(task.getDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if ((this.tasks).getSize() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                fw.write(tasks.getTask((this.tasks).getSize() - 1).getDescription());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            Ui.reply(\"\\n    \" + e.getMessage() + \"\\n    \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 67
    }
  },
  {
    "path": "src/main/java/dobby/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.TimedTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import dobby.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Stores the tasks and performs operations or returns details depending on function called"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Create task with details from the input string and add to the tasks list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void createFromStorage(String str) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        boolean isDone \u003d str.charAt(4) \u003d\u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (str.charAt(1) \u003d\u003d \u0027T\u0027) { // TODO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String decription \u003d str.substring(str.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task \u003d new Todo(decription);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (str.charAt(1) \u003d\u003d \u0027D\u0027) { // DEADLINE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d str.substring(str.indexOf(\u0027 \u0027) + 1, str.indexOf(\"(by: \") - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String by \u003d str.substring(str.indexOf(\"(by: \") + 5, str.length() - 1); //Aug 28 2020 4:00 pm"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int thirdIndex \u003d by.indexOf(\u0027 \u0027, 10);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String dt \u003d by.substring(0, thirdIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String tm \u003d by.substring(thirdIndex + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dt, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task \u003d new Deadline(description, tm, date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else { // EVENT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String description \u003d str.substring(str.indexOf(\u0027 \u0027) + 1, str.indexOf(\"(at: \") - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String at \u003d str.substring(str.indexOf(\"(at: \") + 5, str.length() - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            int thirdIndex \u003d at.indexOf(\u0027 \u0027, 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String dt \u003d at.substring(0, thirdIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String tm \u003d at.substring(thirdIndex + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dt, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task \u003d new Event(description, tm, date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void addToList(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a string format of all the tasks in the list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return String all tasks in the list in a particular format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getListedTasks() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String allTasks \u003d \"\\n    \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task : (this.tasks)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            allTasks \u003d allTasks + i + \". \" + task.getDescription() + \"\\n    \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            allTasks \u003d allTasks + \"The task list is currently empty.\\n    \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a string format of all the tasks in the list ,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * scheduled on a particular date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param date scheduled at"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return String all tasks in the list scheduled on given date,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * in a particular format"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getScheduledTasks(LocalDate date) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\\n    \";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (task instanceof TimedTask) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                TimedTask timedTask \u003d (TimedTask) task;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                if (date.equals(timedTask.getDate())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                    message \u003d message + String.format(\"%d. %s\\n    \", ++counter, timedTask.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return counter \u003d\u003d 0 ? message + \"The task list is currently empty.\\n    \" : message;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Checks for tasks of the type of user requirement and returns a message of those tasks listed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param type either D or T or E"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message list of task descriptions of given type"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String findOfType(String type) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\\n    \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if ((task.getTag()).equals(\"[\" + type + \"]\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d message"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + String.format(\"%d. %s\\n    \", ++counter, task.getDescription());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d message + \"There are no tasks of type \" + type + \"\\n    \";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a message list of tasks whose descriptions contain the given keyword"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param keyword keyword to search for"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return message list of task descriptions of containing given keyword"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String findWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\\n    \";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if ((task.getDescription()).indexOf(keyword) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                message \u003d message"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                        + String.format(\"%d. %s\\n    \", ++counter, task.getDescription());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d \"\\n    There are no tasks of containing the word - \" + keyword + \"\\n    \";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 166
    }
  },
  {
    "path": "src/main/java/dobby/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Interacts with the user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    // String for output format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String UNDERSCORE \u003d \"_________________________________________\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + \"______________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String ALL_COMMANDS \u003d \"\\n    You can use the following commands in this chat bot:\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.TODO).getUsage()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.DEADLINE).getUsage()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.EVENT).getUsage()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.LIST).getUsage()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.DONE).getUsage()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.DELETE).getUsage()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.SCHEDULED).getUsage()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.FIND).getUsage()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.FINDTYPE).getUsage()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            + (Commands.BYE).getUsage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final Scanner SC \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Calls reply function with greeting string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        reply(\"\\n    Hello! I\u0027m Dobby\" + ALL_COMMANDS + \"\\n    How can I help you?\\n    \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns string which is entered by user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return String user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String text \u003d SC.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (text.equals(\"bye\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            SC.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Prints reply message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public static void reply(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        System.out.println(\"    \" + UNDERSCORE + message + UNDERSCORE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 50
    }
  },
  {
    "path": "src/main/java/dobby/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Class for deadline tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String TAG \u003d \"[D]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, by, TAG);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Deadline(String description, String time, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, time, date, TAG);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 18
    }
  },
  {
    "path": "src/main/java/dobby/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Class for Event task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String TAG \u003d \"[E]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, at, TAG);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Event(String description, String time, LocalDate date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, time, date, TAG);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 18
    }
  },
  {
    "path": "src/main/java/dobby/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Parent class for all tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    Task(String description, String tag) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns the full description of the task object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return description full description of the Task object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String checkbox \u003d \"[\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (this.isDone()) { // tick or cross"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            checkbox \u003d checkbox + \"\\u2713] \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            checkbox \u003d checkbox + \"\\u2718] \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return checkbox + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 45
    }
  },
  {
    "path": "src/main/java/dobby/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Parent class for deadline and event classes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TimedTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Constructor used for tasks input by user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public TimedTask(String description, String time, String tag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, tag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String dt \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (time.indexOf(\u0027 \u0027) \u003e 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            dt \u003d time.substring(0, time.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            String tm \u003d time.substring(time.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            this.time \u003d parseTime(tm);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            dt \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            this.time \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        date \u003d parseDate(dt);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Constructor used for tasks read from storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public TimedTask(String description, String time, LocalDate date, String tag) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, tag);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Takes in user date input and parses it to give a LocalDate object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param dt date in user input format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return parsedDate date parsed into java LocalDate class formatted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private LocalDate parseDate(String dt) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String day \u003d dt.substring(0, dt.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String month \u003d dt.substring(dt.indexOf(\u0027/\u0027) + 1, dt.lastIndexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String year \u003d dt.substring(dt.lastIndexOf(\u0027/\u0027) + 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        parsedDate \u003d LocalDate.parse(year + \"-\" + month + \"-\" + day);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Takes in user time input and parses it to give a required format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @param time time in user input format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return time time parsed into required format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private String parseTime(String time) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        int tm \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String hr \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String ampm \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String min \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (tm / 100 \u003e 12) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            hr \u003d String.format(\"%d:\", (tm / 100) % 12);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            ampm \u003d \" pm\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            hr \u003d String.format(\"%d:\", (tm / 100));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            ampm \u003d \" am\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (tm % 100 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            min \u003d \"00\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            min \u003d String.valueOf(tm % 100);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            if (tm % 100 \u003c 10) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                min \u003d \"0\" + min;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (time.equals(\"1200\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            return \"12:00 pm\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return hr + min + ampm;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d this.tag + super.getDescription() + \" \" + this.getSchedule();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * Returns a string to compare scheduling of Task object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     * @return schedule string to indicate scheduling details"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getSchedule() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String timeTag \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        if (super.getTag() \u003d\u003d \"[D]\") {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            timeTag \u003d \"(by: \";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } else if (super.getTag() \u003d\u003d \"[E]\") {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            timeTag \u003d \"(at: \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return timeTag + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy \"))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + time + \")\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 131
    }
  },
  {
    "path": "src/main/java/dobby/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " * Class for todo tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    private static final String TAG \u003d \"[T]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        super(description, TAG);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        return TAG + super.getDescription();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 17
    }
  },
  {
    "path": "src/test/java/dobby/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageByeTest () {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test bye command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String bye;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            bye \u003d parser.getMessage(\"bye\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            bye \u003d e.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Goodbye. Hope to see you again soon!\\n    \", bye);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageTodoTest () {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for todo command with no description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String todoNoDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoNoDescription \u003d parser.getMessage(\"todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoNoDescription \u003d e.getMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Description cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + (Commands.TODO).getUsage() + \"\\n    \", todoNoDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for valid todo command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String todoTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoTask \u003d parser.getMessage(\"todo test todo command\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            todoTask \u003d e.getMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Great! I\u0027ve added the following task:\\n      [T][\\u2718] test todo command\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\n    Now you have 1 task in the list.\\n    \", todoTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageDeadlineTest () {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for deadline command with no description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String deadlineNoDescription;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineNoDescription \u003d parser.getMessage(\"deadline\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineNoDescription \u003d e.getMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Description cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + (Commands.DEADLINE).getUsage() + \"\\n    \", deadlineNoDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for deadline command with no deadline details"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String emptyDeadlineDetails;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyDeadlineDetails \u003d parser.getMessage(\"deadline week3 iP /by \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyDeadlineDetails \u003d e.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Deadline details cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + (Commands.DEADLINE).getUsage() + \"\\n    \", emptyDeadlineDetails);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for valid deadline command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String deadlineTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineTask \u003d parser.getMessage(\"deadline week3 iP /by 28/08/2020 1400\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deadlineTask \u003d e.getMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Great! I\u0027ve added the following task:\\n      [D][\\u2718] week3 iP \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"(by: Aug 28 2020 2:00 pm)\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\n    Now you have 1 task in the list.\\n    \", deadlineTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageEventTest () {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for event command with no description"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String eventNoDescription;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventNoDescription \u003d parser.getMessage(\"event\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventNoDescription \u003d e.getMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Description cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + (Commands.EVENT).getUsage() + \"\\n    \", eventNoDescription);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for event command with no schedule details"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String emptyEventDetails;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyEventDetails \u003d parser.getMessage(\"event week3 lec /at \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            emptyEventDetails \u003d e.getMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Schedule details cannot be empty. Please try again.\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + (Commands.EVENT).getUsage() + \"\\n    \", emptyEventDetails);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // for valid event command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String eventTask;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventTask \u003d parser.getMessage(\"event week3 lec /at 28/08/2020 1400\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            eventTask \u003d e.getMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Great! I\u0027ve added the following task:\\n      [E][\\u2718] week3 lec \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"(at: Aug 28 2020 2:00 pm)\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\n    Now you have 1 task in the list.\\n    \", eventTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageListDoneDeleteTest () {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // create a todo task for testing purpose"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"todo test done and delete commands\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test list command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String listTodo;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            listTodo \u003d parser.getMessage(\"list\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            listTodo \u003d e.getMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    1. [T][\\u2718] test done and delete commands\\n    \", listTodo);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test done command"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String doneTodo;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            doneTodo \u003d parser.getMessage(\"done 1\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            doneTodo \u003d e.getMessage();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Great! I\u0027ve marked this task as done:\\n      \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"[T][\\u2713] test done and delete commands\\n    \", doneTodo);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test delete command"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String deleteTodo;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deleteTodo \u003d parser.getMessage(\"delete 1\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            deleteTodo \u003d e.getMessage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Noted. I\u0027ve removed this task:\\n      \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"[T][\\u2713] test done and delete commands\\n    \", deleteTodo);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void getMessageScheduledTest () {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // deadline task for testing purpose"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"deadline push A-JUnit to github /by 24/08/2020 2359\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        // test scheduled command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String scheduled;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            scheduled \u003d parser.getMessage(\"scheduled 24/08/2020\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            scheduled \u003d e.getMessage();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    1. [D][\\u2718] push A-JUnit to github (by: Aug 24 2020 11:59 pm)\\n    \", scheduled);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void findTypeTest () {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String noType;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"todo test findtype command\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d parser.getMessage(\"findtype T\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noType \u003d parser.getMessage(\"findtype\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noType \u003d e.getMessage();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    1. [T][\\u2718] test findtype command\\n    \", message);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Please try again.\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"\\n      findtype _T/D/E_\\n    \", noType);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void findKeywordTest () {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        Parser parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String noKeyword;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String noTaskContainingKeyword;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            parser.getMessage(\"todo test findtype command\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            message \u003d parser.getMessage(\"find command\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noKeyword \u003d parser.getMessage(\"find\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noKeyword \u003d e.getMessage();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noTaskContainingKeyword \u003d parser.getMessage(\"find none\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (DobbyException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            noTaskContainingKeyword \u003d e.getMessage();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    1. [T][\\u2718] test findtype command\\n    \", message);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    Incorrect usage of command. Keyword required cannot be empty. \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                + \"Please try again.\\n      find _keyword_\\n    \", noKeyword);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    There are no tasks of containing the word - none\\n    \","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "                noTaskContainingKeyword);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 244
    }
  },
  {
    "path": "src/test/java/dobby/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "package dobby;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    public void taskListTest () {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            tasks.createFromStorage(\"[D][\\u2718] ip task for week 3 (by: Aug 27 2020 11:59 pm)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String allTasks \u003d tasks.getListedTasks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    1. [D][\\u2718] ip task for week 3 (by: Aug 27 2020 11:59 pm)\\n    \", allTasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-27\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        String scheduledTasks \u003d tasks.getScheduledTasks(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "        assertEquals(\"\\n    1. [D][\\u2718] ip task for week 3 (by: Aug 27 2020 11:59 pm)\\n    \", scheduledTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete n"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline /by 27/08/2020 2359"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline ip task for week 3 /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline ip task for week 3 /by 27/08/2020 2359"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event /at 28/08/2020 1600"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at 28/08/2020 1600"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo push new levels to github"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "scheduled 28/08/2020"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "find"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "find nomatch"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "find lecture"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "findtype"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "findtype D"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 33
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/dobby/*.java ../src/main/java/dobby/task/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "java -classpath ../bin dobby.Dobby \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4,
      "-": 36
    }
  },
  {
    "path": "text-ui-test/testing-deadline-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline /by week8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline cs2103t /by"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "deadline r /by 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 6
    }
  },
  {
    "path": "text-ui-test/testing-done-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo ip"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done n"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 7
    }
  },
  {
    "path": "text-ui-test/testing-event-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event /at friday 4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "event lecture /at friday 4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 6
    }
  },
  {
    "path": "text-ui-test/testing_todo-exceptions.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "todo ip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sagarsureka"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "sagarsureka": 4
    }
  }
]
