[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"dependencies {"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"}"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"run {"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"    enableAssertions \u003d true"},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":23,"-":44}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"E|✘|meeting |08 Jul 2020|07.00pm to 08.00pm"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"D|✓|submit |08 Aug 2019|09.00am"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"T|✓|play"}],"authorContributionMap":{"chiamyunqing":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"# User Guide for Doraemon Task Bot"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"Doraemon Task Bot is a desktop app for managing your tasks."},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"## Quick Start"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"2. Download the latest doraemon.jar from [here](https://github.com/chiamyunqing/ip/releases/tag/A-Release)."},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"3. Copy the file to the folder you want to use as the home folder for your Task Bot."},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"4. Double-click the file to start the app. "},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"5. Type the command in the command box and press Enter to execute it.  Refer to the Features below for details of each command."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"### Adding a todo task: `todo`"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"Adds a todo task to the task bot. A todo task only has a description of the task and optionally, notes for the task."},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"Format: `todo [task to be done]` "},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"Optional field: `/[any notes for this task]` "},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *todo play games /need some rest yo* "},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"### Adding a deadline task: `deadline`"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"Adds a deadline task to the task bot. A deadline task has a description of the task, deadline date and time and optionally, notes for the task."},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"Format: `deadline [task to be done] /YYYY-MM-DD HHMM`"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"Optional field: `/[any notes for this task]` "},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *deadline CS2103T IP /2020-12-12 1200 /help me pls* "},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"### Adding an event task: `event`"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"Adds an event task to the task bot. An event task has a description of the task, event date, start and end time and optionally, notes for the task."},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"Format: `event [task to be done] /YYYY-MM-DD HHMM-HHMM`"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"Optional field: `/[any notes for this task]` "},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *event party /2020-10-10 2000-2300 /have fun yay* "},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"### Listing all tasks: `list`"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"Shows a list of tasks stored in the task bot."},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"Format: `list`"},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"### Completing a task: `done`"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"Marks a task, specified by the task number in the updated task list, as done."},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"Format: `done [task number]` (Task number refers to the task number shown in the displayed task list)"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *done 6*"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"### Deleting a task: `delete`"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"Deletes a task that is specified by the task number in the updated task list."},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"Format: `delete [task number]`  (Task number refers to the task number shown in the displayed task list)"},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *delete 7*"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":"### Finding a task by description: `find`"},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"Finds tasks with description that matches the keyword. "},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"Format: `find [keyword]`"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *find play* "},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"### Finding a task by date: `print`"},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"Finds tasks with the same date keyed in by you."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"Format: `print YYYY-MM-DD`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"Example of usage: *print 2020-12-12* "},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"### Exiting the bot: `bye`"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"Exits the program. "},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"chiamyunqing"},"content":"Format: `bye` and click on the `exit` button"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"chiamyunqing"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"chiamyunqing"},"content":"## Command summary"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"chiamyunqing"},"content":"Action | Format, Examples"},{"lineNumber":94,"author":{"gitId":"chiamyunqing"},"content":"--------|------------------"},{"lineNumber":95,"author":{"gitId":"chiamyunqing"},"content":"**Add Todo Task** | `todo [task to be done] /[any notes for this task]` \u003cbr\u003e e.g. `todo play games /need some rest yo`"},{"lineNumber":96,"author":{"gitId":"chiamyunqing"},"content":"**Add Deadline Task** | `deadline [task to be done] /YYYY-MM-DD HHMM` \u003cbr\u003e e.g. `deadline CS2103T IP /2020-12-12 1200 /help me pls`"},{"lineNumber":97,"author":{"gitId":"chiamyunqing"},"content":"**Add Event Task** | `event [task to be done] /YYYY-MM-DD HHMM-HHMM /[any notes for this task]`\u003cbr\u003e e.g. `event party /2020-10-10 2000-2300 /have fun yay`"},{"lineNumber":98,"author":{"gitId":"chiamyunqing"},"content":"**List Tasks** | `list`"},{"lineNumber":99,"author":{"gitId":"chiamyunqing"},"content":"**Done Task** | `done [task number]` \u003cbr\u003e e.g.`done 4`"},{"lineNumber":100,"author":{"gitId":"chiamyunqing"},"content":"**Delete Task** | `delete [task number]`\u003cbr\u003e e.g. `delete 3`"},{"lineNumber":101,"author":{"gitId":"chiamyunqing"},"content":"**Find Task By Description** | `find [keyword]` \u003cbr\u003e e.g.`find play`"},{"lineNumber":102,"author":{"gitId":"chiamyunqing"},"content":"**Find Task By Date** | `print YYYY-MM-DD` \u003cbr\u003e e.g. `print 2020-12-12`"},{"lineNumber":103,"author":{"gitId":"chiamyunqing"},"content":"**Exit** | `bye`"}],"authorContributionMap":{"chiamyunqing":93,"-":10}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":" *  Represents a deadline task."},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":" *  A deadline task has a deadline date and time."},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    private LocalDate deadlineDate;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"    private LocalTime deadlineTime;"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"     * Create a deadline task"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"     * @param description of task"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"     * @param deadlineDate of task"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"     * @param deadlineTime of task"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"     * @param notes of task"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    public Deadline(String description, LocalDate deadlineDate,"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime deadlineTime, Optional\u003cString\u003e notes) {"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"        super(description, notes.map(note -\u003e \"|Note: \" + note));"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"        this.deadlineDate \u003d deadlineDate;"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"        this.deadlineTime \u003d deadlineTime;"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"     * Returns an Optional of the deadline date."},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"     * @return an Optional of deadline date."},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"    public Optional\u003cLocalDate\u003e getDate() {"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"        return Optional.of(deadlineDate);"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"        return \"D|\" + super.toString() + \"|\""},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"                + deadlineDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \"|\""},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"                + deadlineTime.format(DateTimeFormatter.ofPattern(\"hh.mma\"))"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"                + notes.orElse(\"\");"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":43}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":" * An example of a custom control using FXML."},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":" * containing text from the speaker."},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"    private final Circle clip \u003d new Circle(50, 50, 50);"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"        dialog.setText(text);"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"        displayPicture.setImage(img);"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"        displayPicture.setClip(clip); //convert image to circular"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"    //Solution below adapted from https://se-education.org/guides/tutorials/javaFx.html"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":62}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":" * The main class that directs the required actions to the respective classes."},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"    private Parser parser;"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"    public Duke() {"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"        this(\"data/duke.txt\");"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"     * Create a duke object"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"     * @param filePath of the duke.txt memory"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"        parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"     * Returns the reply for the respective commands after processing them."},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"     * @param processedCommand the command after processing by parser."},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"     * @return the reply for the respective commands."},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"     * @throws DukeException if user inputs invalid commands."},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"    private String generateReply(String[] processedCommand) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"        switch (processedCommand[0].toLowerCase()) {"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"        case \"bye\":"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showByeMessage();"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"        case \"list\":"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showListTasks(tasks.getAllTasks()) + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"        case \"print\":"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showRequiredTasks(tasks.getSameDateTasks(processedCommand[1]))"},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"                    + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"        case \"done\":"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"            Task doneTask \u003d tasks.markDone(Integer.parseInt(processedCommand[1]));"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showDoneTask(doneTask) + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"        case \"delete\":"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"            Task deletedTask \u003d tasks.deleteTask(Integer.parseInt(processedCommand[1]));"},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showDeleteTask(deletedTask) + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"        case \"todo\":"},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasTodoNotes \u003d processedCommand.length \u003d\u003d 3;"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"            Task todoTsk \u003d new Todo(processedCommand[1].toUpperCase(), ("},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":"                    hasTodoNotes) ? Optional.of(processedCommand[2]) : Optional.empty());"},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"            tasks.addTask(todoTsk);"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showAddTask(todoTsk) + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"        case \"deadline\":"},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasDeadlineNotes \u003d processedCommand.length \u003d\u003d 5;"},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":"            Task deadlineTsk \u003d new Deadline(processedCommand[1].toUpperCase(),"},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"                    LocalDate.parse(processedCommand[2], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime.parse(processedCommand[3], DateTimeFormatter.ofPattern(\"HHmm\")), ("},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"                    hasDeadlineNotes) ? Optional.of(processedCommand[4]) : Optional.empty());"},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":"            tasks.addTask(deadlineTsk);"},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showAddTask(deadlineTsk) + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":"        case \"event\":"},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasEventNotes \u003d processedCommand.length \u003d\u003d 6;"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":"            Task eventTsk \u003d new Event(processedCommand[1].toUpperCase(),"},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"                    LocalDate.parse(processedCommand[2], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),"},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime.parse(processedCommand[3], DateTimeFormatter.ofPattern(\"HHmm\")),"},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime.parse(processedCommand[4], DateTimeFormatter.ofPattern(\"HHmm\")), ("},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"                    hasEventNotes) ? Optional.of(processedCommand[5]) : Optional.empty());"},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"            tasks.addTask(eventTsk);"},{"lineNumber":78,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showAddTask(eventTsk) + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"        case \"find\":"},{"lineNumber":80,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showRequiredTasks(tasks.getTasksWithKeyWord(processedCommand[1]))"},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"                    + \"\\n\" + ui.showTotalTasks(tasks.getNumTasks());"},{"lineNumber":82,"author":{"gitId":"chiamyunqing"},"content":"        default:"},{"lineNumber":83,"author":{"gitId":"chiamyunqing"},"content":"            throw new NotTaskException();"},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":87,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"chiamyunqing"},"content":"     * Processes the command and returns bot reply."},{"lineNumber":89,"author":{"gitId":"chiamyunqing"},"content":"     * @param input the user command."},{"lineNumber":90,"author":{"gitId":"chiamyunqing"},"content":"     * @return the response from the bot."},{"lineNumber":91,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"chiamyunqing"},"content":"    public String getResponse(String input) {"},{"lineNumber":93,"author":{"gitId":"chiamyunqing"},"content":"        assert(tasks !\u003d null); //ensure tasklist is initialised by Duke"},{"lineNumber":94,"author":{"gitId":"chiamyunqing"},"content":"        StringBuilder response \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"chiamyunqing"},"content":"            String[] processedCommand \u003d parser.parse(input);"},{"lineNumber":97,"author":{"gitId":"chiamyunqing"},"content":"            String reply \u003d generateReply(processedCommand);"},{"lineNumber":98,"author":{"gitId":"chiamyunqing"},"content":"            storage.updateFile(tasks.toString()); //reload the file"},{"lineNumber":99,"author":{"gitId":"chiamyunqing"},"content":"            return reply;"},{"lineNumber":100,"author":{"gitId":"chiamyunqing"},"content":"        } catch (DukeException e) {"},{"lineNumber":101,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showDukeError(e);"},{"lineNumber":102,"author":{"gitId":"chiamyunqing"},"content":"        } catch (IOException e) {"},{"lineNumber":103,"author":{"gitId":"chiamyunqing"},"content":"            return ui.showLoadingError();"},{"lineNumber":104,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chiamyunqing":103,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":" * Generic outline of the Duke exceptions."},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"abstract class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"    DukeException(String s) {"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"        super(s);"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":8}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":" *  Represents an event task."},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":" *  An event task has an event date and the start time and end time of event."},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    private LocalDate eventDate;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"    private LocalTime startTime;"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"    private LocalTime endTime;"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"     * Create an event task"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"     * @param description of task"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"     * @param eventDate of task"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"     * @param startTime of task"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"     * @param endTime of task"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"     * @param notes of task"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    public Event(String description, LocalDate eventDate, LocalTime startTime,"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"                 LocalTime endTime, Optional\u003cString\u003e notes) {"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"        super(description, notes.map(note -\u003e \"|Note: \" + note));"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"     * Returns an Optional of the event date."},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"     * @return An Optional of event date."},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"    public Optional\u003cLocalDate\u003e getDate() {"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"        return Optional.of(eventDate);"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"        return \"E|\" + super.toString() + \"|\""},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"                + eventDate.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \"|\""},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"                + startTime.format(DateTimeFormatter.ofPattern(\"hh.mma\")) + \" to \""},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"                + endTime.format(DateTimeFormatter.ofPattern(\"hh.mma\"))"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"                + notes.orElse(\"\");"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"}"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":""}],"authorContributionMap":{"chiamyunqing":48}},{"path":"src/main/java/InvalidDateAndTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":" * The exception that is thrown when the user input date and time in wrong format."},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"public class InvalidDateAndTimeException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"     * Creates an invalid date and time exception when user key in"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"     * wrong date and time format."},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"    public InvalidDateAndTimeException() {"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"        super(\"Kindly input the date in this format YYYY-MM-DD.\\n\""},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"                + \"For events, input the time in this format HHMM-HHMM.\\n\""},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"                + \"Did you know my magic number is 1293?\");"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":15}},{"path":"src/main/java/InvalidTaskNumber.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":" * The exception that is thrown when a user intends to act on a task number that does not exist."},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"public class InvalidTaskNumber extends DukeException {"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"    public InvalidTaskNumber() {"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"        super(\"Oh no, don\u0027t be blur like Nobita \u003e_\u003c. This task number does not exist!\");"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":8}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":" * A GUI for Duke using FXML. Solution adapted from https://se-education.org/guides/tutorials/javaFx.html"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"            stage.setTitle(\"Doraemon Task Bot\");"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"            stage.setResizable(false);"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":31}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import javafx.geometry.Insets;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.Pane;"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/nobita.png\"));"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/doraemon.png\"));"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"     * Initialises the stage with a welcome message."},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"        assert(userImage !\u003d null);"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"        assert(dukeImage !\u003d null);"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Ui.showWelcomeMessage(), dukeImage));"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"        duke \u003d d;"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"        if (response.equals(Ui.showByeMessage())) {"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"            HBox exitButton \u003d setExitButton();"},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"                    DialogBox.getDukeDialog(response, dukeImage),"},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":"                    exitButton);"},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"                    DialogBox.getUserDialog(input, userImage),"},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":"            );"},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"        userInput.clear();"},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"    private HBox setExitButton() {"},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":"        //Solution below adapted from https://stackoverflow.com/questions/39214586/how-to-align-a-button-right-in-javafx"},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"        HBox hbox \u003d new HBox();"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":"        Pane spacer \u003d new Pane();"},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"        HBox.setHgrow(spacer, Priority.ALWAYS);"},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":"        Button exitButton \u003d new Button(\"Exit\");"},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":"        exitButton.setPadding(new Insets(10, 10, 10, 10));"},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"        exitButton.setOnAction(e -\u003e closeStage());"},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"        hbox.getChildren().addAll(spacer, exitButton);"},{"lineNumber":78,"author":{"gitId":"chiamyunqing"},"content":"        return hbox;"},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"    @FXML"},{"lineNumber":82,"author":{"gitId":"chiamyunqing"},"content":"    void closeStage() {"},{"lineNumber":83,"author":{"gitId":"chiamyunqing"},"content":"        Stage stage \u003d (Stage) userInput.getScene().getWindow();"},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"        stage.close();"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":86}},{"path":"src/main/java/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":" * The exception that is thrown when the user provides no description for a task."},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"public class NoDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"     * Creates a no description exception when user did not key in description."},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"    public NoDescriptionException(String taskIdentifier) {"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"        super(\"Can you tell me the description of \" + taskIdentifier"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"                + \" properly? Well, I was a factory rejected toy after all :( but my creator loves me a lot!\");"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":12}},{"path":"src/main/java/NotTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":" * The exception that is thrown when the user command is invalid."},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"public class NotTaskException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"     * Creates an exception if the user did not input any task."},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"    public NotTaskException() {"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"        super(\"I know you like to talk to me :D But I cannot understand what task this is...\""},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"                + \"Is it because my ears got bitten by a mouse? :(\");"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":12}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":" * Represents a parser that will make sense of user commands and break down"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":" * to various components for ease of processing."},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"     * Returns an array of string where the commands for tasks have been broken"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"     * into its various parts for ease of processing."},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"     * @param command The user command."},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"     * @return An array of string which has been processed."},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidDateAndTimeException If input date/time is invalid."},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidTaskNumber If an improper integer task number is called in delete and done."},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"     * @throws NoDescriptionException If there is no task description for addition of tasks."},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"     * @throws NotTaskException If an invalid command is being input."},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    public String[] parse(String command) throws InvalidDateAndTimeException,"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"            InvalidTaskNumber, NoDescriptionException, NotTaskException {"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"        String[] cmd \u003d command.split(\" \");"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"        switch(cmd[0].toLowerCase()) {"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"        case \"bye\":"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"        case \"list\":"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"        case \"find\":"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"            return cmd;"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        case \"print\":"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"            return checkValidDate(cmd);"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"        case \"done\":"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"        case \"delete\":"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"            return checkValidTaskNum(cmd);"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"        case \"todo\":"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"            return checkValidTodo(command, cmd);"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"        case \"deadline\":"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"            return checkValidDeadline(command, cmd);"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"        case \"event\":"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"            return checkValidEvent(command, cmd);"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"        default:"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"            throw new NotTaskException();"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the command has a valid date."},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"     * @param cmd The command in array from user."},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"     * @return The command if date is valid."},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidDateAndTimeException if an invalid date is called."},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkValidDate(String[] cmd) throws InvalidDateAndTimeException {"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"            LocalDate.parse(cmd[1], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"            return cmd;"},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"            throw new InvalidDateAndTimeException();"},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the user has given a proper task number as input."},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"     * @param cmd The command in array from user."},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"     * @return The command if task number is an integer."},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidTaskNumber if the task number is not an integer."},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkValidTaskNum(String[] cmd) throws InvalidTaskNumber {"},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":"            Integer.parseInt(cmd[1]);"},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"            return cmd;"},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"            throw new InvalidTaskNumber();"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the to-do command has a description and processes it."},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"     * @param command The original command from user."},{"lineNumber":78,"author":{"gitId":"chiamyunqing"},"content":"     * @param cmd The command in array from user."},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"     * @return A processed command in the format: [to-do, task description, notes(if present)]."},{"lineNumber":80,"author":{"gitId":"chiamyunqing"},"content":"     * @throws NoDescriptionException if no description was provided by user."},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkValidTodo(String command, String[] cmd) throws NoDescriptionException {"},{"lineNumber":83,"author":{"gitId":"chiamyunqing"},"content":"        if (cmd.length \u003c 2) {"},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"            throw new NoDescriptionException(cmd[0]);"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"chiamyunqing"},"content":"            String[] detectNotes \u003d command.split(\"/\");"},{"lineNumber":87,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasNotes \u003d detectNotes.length \u003e 1;"},{"lineNumber":88,"author":{"gitId":"chiamyunqing"},"content":"            if (hasNotes) {"},{"lineNumber":89,"author":{"gitId":"chiamyunqing"},"content":"                return new String[]{cmd[0], detectNotes[0].replaceFirst(cmd[0] + \" \", \"\"),"},{"lineNumber":90,"author":{"gitId":"chiamyunqing"},"content":"                        detectNotes[1]};"},{"lineNumber":91,"author":{"gitId":"chiamyunqing"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"chiamyunqing"},"content":"                return new String[]{cmd[0], detectNotes[0].replaceFirst(cmd[0] + \" \", \"\")};"},{"lineNumber":93,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":97,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the deadline command has a description and valid date time and processes it."},{"lineNumber":99,"author":{"gitId":"chiamyunqing"},"content":"     * @param command The original command from user."},{"lineNumber":100,"author":{"gitId":"chiamyunqing"},"content":"     * @param cmd The command in array from user."},{"lineNumber":101,"author":{"gitId":"chiamyunqing"},"content":"     * @return A processed command in the format: [deadline, task description, date, time, notes (if present)]."},{"lineNumber":102,"author":{"gitId":"chiamyunqing"},"content":"     * @throws NoDescriptionException if no description was provided by user."},{"lineNumber":103,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidDateAndTimeException if an invalid date is called."},{"lineNumber":104,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkValidDeadline(String command, String[] cmd) throws NoDescriptionException,"},{"lineNumber":106,"author":{"gitId":"chiamyunqing"},"content":"            InvalidDateAndTimeException {"},{"lineNumber":107,"author":{"gitId":"chiamyunqing"},"content":"        if (cmd.length \u003c 2 || cmd[1].contains(\"/\")) {"},{"lineNumber":108,"author":{"gitId":"chiamyunqing"},"content":"            throw new NoDescriptionException(cmd[0]);"},{"lineNumber":109,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":110,"author":{"gitId":"chiamyunqing"},"content":"            try {"},{"lineNumber":111,"author":{"gitId":"chiamyunqing"},"content":"                String[] splitBySlash \u003d command.split(\"/\");"},{"lineNumber":112,"author":{"gitId":"chiamyunqing"},"content":"                String[] getDateAndTime \u003d checkDeadlineInputDateTime(splitBySlash[1]);"},{"lineNumber":113,"author":{"gitId":"chiamyunqing"},"content":"                String date \u003d getDateAndTime[0];"},{"lineNumber":114,"author":{"gitId":"chiamyunqing"},"content":"                String time \u003d getDateAndTime[1];"},{"lineNumber":115,"author":{"gitId":"chiamyunqing"},"content":"                LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":116,"author":{"gitId":"chiamyunqing"},"content":"                LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":117,"author":{"gitId":"chiamyunqing"},"content":"                boolean hasNotes \u003d splitBySlash.length \u003e 2;"},{"lineNumber":118,"author":{"gitId":"chiamyunqing"},"content":"                if (hasNotes) {"},{"lineNumber":119,"author":{"gitId":"chiamyunqing"},"content":"                    return new String[] {cmd[0], splitBySlash[0].replaceFirst(cmd[0] + \" \", \"\"),"},{"lineNumber":120,"author":{"gitId":"chiamyunqing"},"content":"                        date, time, splitBySlash[2]};"},{"lineNumber":121,"author":{"gitId":"chiamyunqing"},"content":"                } else {"},{"lineNumber":122,"author":{"gitId":"chiamyunqing"},"content":"                    return new String[]{cmd[0], splitBySlash[0].replaceFirst(cmd[0] + \" \", \"\"), date, time};"},{"lineNumber":123,"author":{"gitId":"chiamyunqing"},"content":"                }"},{"lineNumber":124,"author":{"gitId":"chiamyunqing"},"content":"            } catch (DateTimeParseException | InvalidDateAndTimeException e) {"},{"lineNumber":125,"author":{"gitId":"chiamyunqing"},"content":"                throw new InvalidDateAndTimeException();"},{"lineNumber":126,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":130,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the user has correctly input date and time for deadline."},{"lineNumber":132,"author":{"gitId":"chiamyunqing"},"content":"     * @param dateTimeInput the string to be parsed for date and time."},{"lineNumber":133,"author":{"gitId":"chiamyunqing"},"content":"     * @return an array {date, time}."},{"lineNumber":134,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidDateAndTimeException if date or time detected in the incorrect format."},{"lineNumber":135,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkDeadlineInputDateTime(String dateTimeInput) throws InvalidDateAndTimeException {"},{"lineNumber":137,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":138,"author":{"gitId":"chiamyunqing"},"content":"            return new String[]{dateTimeInput.split(\" \")[0], dateTimeInput.split(\" \")[1]};"},{"lineNumber":139,"author":{"gitId":"chiamyunqing"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":140,"author":{"gitId":"chiamyunqing"},"content":"            throw new InvalidDateAndTimeException();"},{"lineNumber":141,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the event command has a description and valid date time and processes it."},{"lineNumber":145,"author":{"gitId":"chiamyunqing"},"content":"     * @param command The original command from user."},{"lineNumber":146,"author":{"gitId":"chiamyunqing"},"content":"     * @param cmd The command in array from user."},{"lineNumber":147,"author":{"gitId":"chiamyunqing"},"content":"     * @return A processed command in the format: [event, task description, date, start time,"},{"lineNumber":148,"author":{"gitId":"chiamyunqing"},"content":"     * end time, notes (if present)]."},{"lineNumber":149,"author":{"gitId":"chiamyunqing"},"content":"     * @throws NoDescriptionException if no description was provided by user."},{"lineNumber":150,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidDateAndTimeException if an invalid date time is called."},{"lineNumber":151,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkValidEvent(String command, String[] cmd) throws NoDescriptionException,"},{"lineNumber":153,"author":{"gitId":"chiamyunqing"},"content":"            InvalidDateAndTimeException {"},{"lineNumber":154,"author":{"gitId":"chiamyunqing"},"content":"        if (cmd.length \u003c 2 || cmd[1].contains(\"/\")) {"},{"lineNumber":155,"author":{"gitId":"chiamyunqing"},"content":"            throw new NoDescriptionException(cmd[0]);"},{"lineNumber":156,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":157,"author":{"gitId":"chiamyunqing"},"content":"            try {"},{"lineNumber":158,"author":{"gitId":"chiamyunqing"},"content":"                String[] splitBySlash \u003d command.split(\"/\");"},{"lineNumber":159,"author":{"gitId":"chiamyunqing"},"content":"                String[] getDateAndTime \u003d checkEventInputDateTime(splitBySlash[1]);"},{"lineNumber":160,"author":{"gitId":"chiamyunqing"},"content":"                String date \u003d getDateAndTime[0];"},{"lineNumber":161,"author":{"gitId":"chiamyunqing"},"content":"                String startTime \u003d getDateAndTime[1];"},{"lineNumber":162,"author":{"gitId":"chiamyunqing"},"content":"                String endTime \u003d getDateAndTime[2];"},{"lineNumber":163,"author":{"gitId":"chiamyunqing"},"content":"                LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":164,"author":{"gitId":"chiamyunqing"},"content":"                LocalTime.parse(startTime, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":165,"author":{"gitId":"chiamyunqing"},"content":"                LocalTime.parse(endTime, DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":166,"author":{"gitId":"chiamyunqing"},"content":"                boolean hasNotes \u003d splitBySlash.length \u003e 2;"},{"lineNumber":167,"author":{"gitId":"chiamyunqing"},"content":"                if (hasNotes) {"},{"lineNumber":168,"author":{"gitId":"chiamyunqing"},"content":"                    return new String[] {cmd[0], splitBySlash[0].replaceFirst(cmd[0] + \" \", \"\"),"},{"lineNumber":169,"author":{"gitId":"chiamyunqing"},"content":"                        date, startTime, endTime, splitBySlash[2]};"},{"lineNumber":170,"author":{"gitId":"chiamyunqing"},"content":"                } else {"},{"lineNumber":171,"author":{"gitId":"chiamyunqing"},"content":"                    return new String[] {cmd[0], splitBySlash[0].replaceFirst(cmd[0] + \" \", \"\"),"},{"lineNumber":172,"author":{"gitId":"chiamyunqing"},"content":"                        date, startTime, endTime};"},{"lineNumber":173,"author":{"gitId":"chiamyunqing"},"content":"                }"},{"lineNumber":174,"author":{"gitId":"chiamyunqing"},"content":"            } catch (DateTimeParseException | InvalidDateAndTimeException e) {"},{"lineNumber":175,"author":{"gitId":"chiamyunqing"},"content":"                throw new InvalidDateAndTimeException();"},{"lineNumber":176,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":177,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":180,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"chiamyunqing"},"content":"     * Checks if the user has correctly input date and time for event."},{"lineNumber":182,"author":{"gitId":"chiamyunqing"},"content":"     * @param dateTimeInput the string to be parsed for date and time."},{"lineNumber":183,"author":{"gitId":"chiamyunqing"},"content":"     * @return an array {date, startTime, endTime}."},{"lineNumber":184,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidDateAndTimeException if date or time detected in the incorrect format."},{"lineNumber":185,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"chiamyunqing"},"content":"    private String[] checkEventInputDateTime(String dateTimeInput) throws InvalidDateAndTimeException {"},{"lineNumber":187,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":188,"author":{"gitId":"chiamyunqing"},"content":"            return new String[]{dateTimeInput.split(\" \")[0],"},{"lineNumber":189,"author":{"gitId":"chiamyunqing"},"content":"                    dateTimeInput.split(\" \")[1].split(\"-\")[0],"},{"lineNumber":190,"author":{"gitId":"chiamyunqing"},"content":"                    dateTimeInput.split(\" \")[1].split(\"-\")[1]};"},{"lineNumber":191,"author":{"gitId":"chiamyunqing"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":192,"author":{"gitId":"chiamyunqing"},"content":"            throw new InvalidDateAndTimeException();"},{"lineNumber":193,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":195}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"import java.util.regex.Pattern;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":" * Represents a memory of the tasks of user. It loads tasks from file, saves and updates"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":" * the file."},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    private final String filePath;"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"    public Storage(String filePath) {"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"     * Creates a file if the file does not exist. Otherwise, it will use the existing file."},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"     * @throws IOException If the file cannot be created."},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"    private void createFile() throws IOException {"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"        if (!file.exists()) {"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"            file.createNewFile();"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"        return;"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"     * Returns a list of task to be loaded into the task list after"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"     * it had retrieved the existing tasks in the memory file."},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"     * @return A list of task to be loaded into task list."},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"     * @throws IOException If the file cannot be created."},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"    public List\u003cTask\u003e load() throws IOException {"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"        this.createFile();"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"        while (sc.hasNext()) {"},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"            Task taskToAdd \u003d processLine(sc.nextLine());"},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"            taskList.add(taskToAdd);"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"        return taskList;"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"     * Processes the line from the file and returns the task represented"},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"     * by the line"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"     * @param lineFromFile"},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":"     * @return the associated task"},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"    private Task processLine(String lineFromFile) {"},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"        //Format of each line: e.g. T|X|description or D|X|description|date|time"},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"        String[] taskComponent \u003d lineFromFile.split(Pattern.quote(\"|\"));"},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":"        switch (taskComponent[0]) {"},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"        case \"T\":"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasTodoNotes \u003d taskComponent.length \u003d\u003d 4;"},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"            Task todoTask \u003d new Todo(taskComponent[2], ("},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":"                    hasTodoNotes) ? Optional.of(taskComponent[3].replaceFirst(\"Note: \", \"\")) : Optional.empty());"},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"            if (taskComponent[1].equals(\"\\u2713\")) {"},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":"                todoTask.markAsDone();"},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":"            return todoTask;"},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"        case \"D\":"},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasDeadlineNotes \u003d taskComponent.length \u003d\u003d 6;"},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":"            Task deadlineTask \u003d new Deadline(taskComponent[2],"},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"                    LocalDate.parse(taskComponent[3], DateTimeFormatter.ofPattern(\"dd MMM yyyy\")),"},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime.parse(taskComponent[4], DateTimeFormatter.ofPattern(\"hh.mma\")), ("},{"lineNumber":78,"author":{"gitId":"chiamyunqing"},"content":"                    hasDeadlineNotes) ? Optional.of(taskComponent[5].replaceFirst(\"Note: \", \"\")) : Optional.empty());"},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"            if (taskComponent[1].equals(\"\\u2713\")) {"},{"lineNumber":80,"author":{"gitId":"chiamyunqing"},"content":"                deadlineTask.markAsDone();"},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"chiamyunqing"},"content":"            return deadlineTask;"},{"lineNumber":83,"author":{"gitId":"chiamyunqing"},"content":"        case \"E\":"},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"            boolean hasEventNotes \u003d taskComponent.length \u003d\u003d 6;"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"            Task eventTask \u003d new Event(taskComponent[2],"},{"lineNumber":86,"author":{"gitId":"chiamyunqing"},"content":"                    LocalDate.parse(taskComponent[3], DateTimeFormatter.ofPattern(\"dd MMM yyyy\")),"},{"lineNumber":87,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime.parse(taskComponent[4].split(\" to \")[0], DateTimeFormatter.ofPattern(\"hh.mma\")),"},{"lineNumber":88,"author":{"gitId":"chiamyunqing"},"content":"                    LocalTime.parse(taskComponent[4].split(\" to \")[1], DateTimeFormatter.ofPattern(\"hh.mma\")), ("},{"lineNumber":89,"author":{"gitId":"chiamyunqing"},"content":"                    hasEventNotes) ? Optional.of(taskComponent[5].replaceFirst(\"Note: \", \"\")) : Optional.empty());"},{"lineNumber":90,"author":{"gitId":"chiamyunqing"},"content":"            if (taskComponent[1].equals(\"\\u2713\")) {"},{"lineNumber":91,"author":{"gitId":"chiamyunqing"},"content":"                eventTask.markAsDone();"},{"lineNumber":92,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"chiamyunqing"},"content":"            return eventTask;"},{"lineNumber":94,"author":{"gitId":"chiamyunqing"},"content":"        default:"},{"lineNumber":95,"author":{"gitId":"chiamyunqing"},"content":"            return null;"},{"lineNumber":96,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":99,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"chiamyunqing"},"content":"     * Writes the input text to the file."},{"lineNumber":101,"author":{"gitId":"chiamyunqing"},"content":"     * @param textToAdd The text to be added to the file."},{"lineNumber":102,"author":{"gitId":"chiamyunqing"},"content":"     * @throws IOException If the writing of file fails."},{"lineNumber":103,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"chiamyunqing"},"content":"    private void writeToFile(String textToAdd) throws IOException {"},{"lineNumber":105,"author":{"gitId":"chiamyunqing"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);"},{"lineNumber":106,"author":{"gitId":"chiamyunqing"},"content":"        fw.write(textToAdd);"},{"lineNumber":107,"author":{"gitId":"chiamyunqing"},"content":"        fw.close();"},{"lineNumber":108,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":110,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"chiamyunqing"},"content":"     * Updates file content when the task list is updated."},{"lineNumber":112,"author":{"gitId":"chiamyunqing"},"content":"     * @param text The content of the task list to overwrite in the file."},{"lineNumber":113,"author":{"gitId":"chiamyunqing"},"content":"     * @throws IOException If the writing of file fails."},{"lineNumber":114,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"chiamyunqing"},"content":"    public void updateFile(String text) throws IOException {"},{"lineNumber":116,"author":{"gitId":"chiamyunqing"},"content":"        writeToFile(text);"},{"lineNumber":117,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":118}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":" * Represents a generic task. A task object has a description and an"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":" * indication of whether the task is done or not."},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"abstract class Task {"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    protected Optional\u003cString\u003e notes;"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"    public Task(String description, Optional\u003cString\u003e notes) {"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"        this.notes \u003d notes;"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"    public abstract Optional\u003cLocalDate\u003e getDate();"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"     * Mark the task as completed."},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    public void markAsDone() {"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"        this.isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"    public boolean searchFound(String keyword) {"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        return description.contains(keyword.toUpperCase());"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"    protected String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"        return isDone ? \"\\u2713\" : \"\\u2718\"; //return tick or X symbols"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"        return getStatusIcon() + \"|\" + description;"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":40}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":" * Represents a task list which keeps track of the list of tasks."},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":" * It supports operations to manipulate the task list such as adding tasks,"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":" * deleting tasks, changing tasks to completed and getting specific tasks from the list."},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"     * Adds a task to the task list."},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"     * @param tsk the task to be added to the list."},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"    public void addTask(Task tsk) {"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        taskList.add(tsk);"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"     * Deletes a task from the task list."},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"     * @param taskNum The task number to be deleted from the list."},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"     * @return The task that is deleted."},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidTaskNumber If the task number is out of range."},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"    public Task deleteTask(int taskNum) throws InvalidTaskNumber {"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"        if (taskNum \u003c 1 || taskNum \u003e taskList.size()) {"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"            throw new InvalidTaskNumber();"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"            Task tsk \u003d taskList.get(taskNum - 1);"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"            taskList.remove(taskNum - 1);"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"            return tsk;"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"     * Returns a list of all the tasks."},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"     * @return A list of all tasks."},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"    public List\u003cTask\u003e getAllTasks() {"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null); //must make sure task list is initialised"},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"        return taskList;"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":"     * Marks the specified task with the number as completed and"},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"     * returns the completed task."},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"     * @param taskNum The task number to be marked as done."},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"     * @return The completed task."},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"     * @throws InvalidTaskNumber If the task number is out of range."},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":"    public Task markDone(int taskNum) throws InvalidTaskNumber {"},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"        if (taskNum \u003c 1 || taskNum \u003e taskList.size()) {"},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":"            throw new InvalidTaskNumber();"},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":"            Task tsk \u003d taskList.get(taskNum - 1);"},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"            tsk.markAsDone();"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":"            return tsk;"},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"     * Returns a list of tasks with the specified date."},{"lineNumber":78,"author":{"gitId":"chiamyunqing"},"content":"     * @param date The date of the task to find."},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"     * @return A list of task with the specified date."},{"lineNumber":80,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"    public List\u003cTask\u003e getSameDateTasks(String date) {"},{"lineNumber":82,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":83,"author":{"gitId":"chiamyunqing"},"content":"        return taskList.stream()"},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"                .filter(task -\u003e {"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"                    LocalDate eventDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":86,"author":{"gitId":"chiamyunqing"},"content":"                    return eventDate.equals(task.getDate().orElse(null));"},{"lineNumber":87,"author":{"gitId":"chiamyunqing"},"content":"                })"},{"lineNumber":88,"author":{"gitId":"chiamyunqing"},"content":"                .collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":91,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"chiamyunqing"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":93,"author":{"gitId":"chiamyunqing"},"content":"     * @return The total number of tasks in list."},{"lineNumber":94,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"chiamyunqing"},"content":"    public int getNumTasks() {"},{"lineNumber":96,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":97,"author":{"gitId":"chiamyunqing"},"content":"        return taskList.size();"},{"lineNumber":98,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":100,"author":{"gitId":"chiamyunqing"},"content":"    public List\u003cTask\u003e getTasksWithKeyWord(String keyword) {"},{"lineNumber":101,"author":{"gitId":"chiamyunqing"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":102,"author":{"gitId":"chiamyunqing"},"content":"        return taskList.stream()"},{"lineNumber":103,"author":{"gitId":"chiamyunqing"},"content":"                .filter(task -\u003e task.searchFound(keyword))"},{"lineNumber":104,"author":{"gitId":"chiamyunqing"},"content":"                .collect(Collectors.toList());"},{"lineNumber":105,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":107,"author":{"gitId":"chiamyunqing"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"chiamyunqing"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitId":"chiamyunqing"},"content":"        StringBuilder content \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitId":"chiamyunqing"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":111,"author":{"gitId":"chiamyunqing"},"content":"            content.append(taskList.get(i));"},{"lineNumber":112,"author":{"gitId":"chiamyunqing"},"content":"            content.append(System.lineSeparator());"},{"lineNumber":113,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"chiamyunqing"},"content":"        return content.toString();"},{"lineNumber":115,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":116}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":" *  Represents a to-do task with only a description."},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"    public Todo(String description, Optional\u003cString\u003e notes) {"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"        super(description, notes.map(note -\u003e \"|Note: \" + note));"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"     * Returns an empty Optional since a to-do task does not have a date."},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"     * @return an emptu Optional."},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"    public Optional\u003cLocalDate\u003e getDate() {"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"        return Optional.empty();"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"        return \"T|\" + super.toString() + notes.orElse(\"\");"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":24}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":" * Handles the interaction with user, such as reading input and"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":" * printing output."},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"    private Scanner sc;"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    public Ui() {"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"     * Returns the welcome message."},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    public static String showWelcomeMessage() {"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"        String intro \u003d \"Hello, I am Doraemon! I can help you remember and keep track of your tasks.\\n\""},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"                + \"I assume that you are as forgetful as Nobita. Remember to bribe me with loads of Dorayaki too!\";"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"        return intro;"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"     * Returns the goodbye message."},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"    public static String showByeMessage() {"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"        String bye \u003d \"Goodbye, I need to find my sister now! \u003e_\u003c\";"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"        return bye;"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"     * Returns string of the list of tasks when user calls for \u0027list\u0027."},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"     * @param taskList The list of task to be printed."},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"    public String showListTasks(List\u003cTask\u003e taskList) {"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":"        StringBuilder reply \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"        reply.append(\"I remembered your tasks well because I have such good memory! :D Here you go:\\n\");"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"            Task tsk \u003d taskList.get(i);"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"            reply.append(\"Task \" + (i + 1) + \": \" + tsk + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\"));"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"        return reply.toString();"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"     * Returns string of the list of tasks with same date as what user demands"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"     * when user calls for \u0027print /date\u0027."},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"     * @param taskList The list of tasks with same date."},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"    public String showRequiredTasks(List\u003cTask\u003e taskList) {"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"        if (taskList.size() \u003e 0) {"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"            StringBuilder reply \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"            reply.append(\"I have matched your queries as below. \""},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"                    + \"Don\u0027t forget to complete them if not your mom will scold you!\\n\");"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":57,"author":{"gitId":"chiamyunqing"},"content":"                reply.append((i + 1) + \". \" + taskList.get(i) + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\"));"},{"lineNumber":58,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"chiamyunqing"},"content":"            return reply.toString();"},{"lineNumber":60,"author":{"gitId":"chiamyunqing"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"chiamyunqing"},"content":"            String failToFindMsg \u003d \"Oh no \u003e_\u003c I can\u0027t seem to find any matching tasks.\";"},{"lineNumber":62,"author":{"gitId":"chiamyunqing"},"content":"            return failToFindMsg;"},{"lineNumber":63,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":66,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"chiamyunqing"},"content":"     * Prints the task that has been added to the list."},{"lineNumber":68,"author":{"gitId":"chiamyunqing"},"content":"     * @param tsk The task that has been added."},{"lineNumber":69,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"chiamyunqing"},"content":"    public String showAddTask(Task tsk) {"},{"lineNumber":71,"author":{"gitId":"chiamyunqing"},"content":"        String addTaskMsg \u003d \"I have added this task for you:\\n\" + tsk;"},{"lineNumber":72,"author":{"gitId":"chiamyunqing"},"content":"        return addTaskMsg;"},{"lineNumber":73,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":75,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"chiamyunqing"},"content":"     * Prints the task that has been marked as done when user calls \u0027done /task\u0027."},{"lineNumber":77,"author":{"gitId":"chiamyunqing"},"content":"     * @param tsk The task that is completed."},{"lineNumber":78,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"chiamyunqing"},"content":"    public String showDoneTask(Task tsk) {"},{"lineNumber":80,"author":{"gitId":"chiamyunqing"},"content":"        String doneTaskMsg \u003d \"Excellent! Don\u0027t procrastinate like Nobita :P. You have completed:\\n\" + tsk;"},{"lineNumber":81,"author":{"gitId":"chiamyunqing"},"content":"        return doneTaskMsg;"},{"lineNumber":82,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":84,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"chiamyunqing"},"content":"     * Prints the task that has been deleted when user calls for \u0027delete /task\u0027"},{"lineNumber":86,"author":{"gitId":"chiamyunqing"},"content":"     * @param tsk The task that is deleted."},{"lineNumber":87,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"chiamyunqing"},"content":"    public String showDeleteTask(Task tsk) {"},{"lineNumber":89,"author":{"gitId":"chiamyunqing"},"content":"        String deleteTaskMsg \u003d \"I have removed this task for you:\\n\" + tsk;"},{"lineNumber":90,"author":{"gitId":"chiamyunqing"},"content":"        return deleteTaskMsg;"},{"lineNumber":91,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":93,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"chiamyunqing"},"content":"     * Prints the total number of tasks in list."},{"lineNumber":95,"author":{"gitId":"chiamyunqing"},"content":"     * @param num The total number of tasks."},{"lineNumber":96,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"chiamyunqing"},"content":"    public String showTotalTasks(int num) {"},{"lineNumber":98,"author":{"gitId":"chiamyunqing"},"content":"        String totalTaskMsg \u003d \"You have \" + num + \" task(s) in your list!\";"},{"lineNumber":99,"author":{"gitId":"chiamyunqing"},"content":"        return totalTaskMsg;"},{"lineNumber":100,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":102,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"chiamyunqing"},"content":"     * Prints the error when an IOException occurs."},{"lineNumber":104,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chiamyunqing"},"content":"    public String showLoadingError() {"},{"lineNumber":106,"author":{"gitId":"chiamyunqing"},"content":"        String loadErrorMsg \u003d \"Error with reading / writing file!\";"},{"lineNumber":107,"author":{"gitId":"chiamyunqing"},"content":"        return loadErrorMsg;"},{"lineNumber":108,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":110,"author":{"gitId":"chiamyunqing"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"chiamyunqing"},"content":"     * Prints the error when a DukeException occurs."},{"lineNumber":112,"author":{"gitId":"chiamyunqing"},"content":"     * @param e The DukeException that arises."},{"lineNumber":113,"author":{"gitId":"chiamyunqing"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"chiamyunqing"},"content":"    public String showDukeError(DukeException e) {"},{"lineNumber":115,"author":{"gitId":"chiamyunqing"},"content":"        return e.toString();"},{"lineNumber":116,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":117}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"        \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"1.0\" style\u003d\"-fx-background-color: #FFFFE0#FFFFE0;\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"            \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"            \u003c/padding\u003e"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"                \u003cInsets /\u003e"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"            \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"110.0\" fitWidth\u003d\"110.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"                \u003cInsets /\u003e"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"            \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    \u003c/children\u003e"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"    \u003cpadding\u003e"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"    \u003c/padding\u003e"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"chiamyunqing":25}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"            \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"            \u003c/content\u003e"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"chiamyunqing":20}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"    public void testParse() {"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"        try {"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"            //we converted to string to compare because using String[] compares the address instead"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"            assertEquals(Arrays.toString(new String[]{\"event\", \"play games \", \"2020-08-09\", \"1700\", \"1800\"}),"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"                    Arrays.toString(new Parser().parse(\"event play games /at 2020-08-09 1700-1800\")));"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"            assertEquals(Arrays.toString(new String[]{\"todo\", \"sing song\"}),"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"                    Arrays.toString(new Parser().parse(\"todo sing song\")));"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"            assertEquals(Arrays.toString(new String[]{\"deadline\", \"study \", \"2020-08-09\", \"1800\"}),"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":"                    Arrays.toString(new Parser().parse(\"deadline study /by 2020-08-09 1800\")));"},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"            System.out.println(e);"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":24}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"public class TaskListTest {"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"    public void testGetNumTask() {"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"        assertEquals(0, new TaskList().getNumTasks());"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"        List\u003cTask\u003e listOfTask \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"chiamyunqing"},"content":"        listOfTask.add(new Todo(\"play\", Optional.empty()));"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"        listOfTask.add(new Todo(\"study\", Optional.empty()));"},{"lineNumber":17,"author":{"gitId":"chiamyunqing"},"content":"        assertEquals(2, new TaskList(listOfTask).getNumTasks());"},{"lineNumber":18,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":20,"author":{"gitId":"chiamyunqing"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"chiamyunqing"},"content":"    public void testGetSameDateTask() {"},{"lineNumber":22,"author":{"gitId":"chiamyunqing"},"content":"        class SimpleTask extends Task {"},{"lineNumber":23,"author":{"gitId":"chiamyunqing"},"content":"            private LocalDate date \u003d LocalDate.parse(\"2020-08-08\");"},{"lineNumber":24,"author":{"gitId":"chiamyunqing"},"content":"            SimpleTask() {"},{"lineNumber":25,"author":{"gitId":"chiamyunqing"},"content":"                super(\"test\", Optional.empty());"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"chiamyunqing"},"content":"            @Override"},{"lineNumber":28,"author":{"gitId":"chiamyunqing"},"content":"            public Optional\u003cLocalDate\u003e getDate() {"},{"lineNumber":29,"author":{"gitId":"chiamyunqing"},"content":"                return Optional.of(date);"},{"lineNumber":30,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"chiamyunqing"},"content":"        List\u003cTask\u003e listOfTask \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"chiamyunqing"},"content":"        listOfTask.add(new SimpleTask());"},{"lineNumber":34,"author":{"gitId":"chiamyunqing"},"content":"        assertEquals(listOfTask, new TaskList(listOfTask).getSameDateTasks(\"2020-08-08\"));"},{"lineNumber":35,"author":{"gitId":"chiamyunqing"},"content":"        assertEquals(new ArrayList\u003cTask\u003e(), new TaskList(listOfTask).getSameDateTasks(\"2020-08-09\"));"},{"lineNumber":36,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"chiamyunqing"},"content":""},{"lineNumber":38,"author":{"gitId":"chiamyunqing"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"chiamyunqing"},"content":"    public void testGetAllTasks() {"},{"lineNumber":40,"author":{"gitId":"chiamyunqing"},"content":"        class SimpleTask extends Task {"},{"lineNumber":41,"author":{"gitId":"chiamyunqing"},"content":"            private LocalDate date \u003d LocalDate.parse(\"2020-08-08\");"},{"lineNumber":42,"author":{"gitId":"chiamyunqing"},"content":"            SimpleTask() {"},{"lineNumber":43,"author":{"gitId":"chiamyunqing"},"content":"                super(\"test\", Optional.empty());"},{"lineNumber":44,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"chiamyunqing"},"content":"            @Override"},{"lineNumber":46,"author":{"gitId":"chiamyunqing"},"content":"            public Optional\u003cLocalDate\u003e getDate() {"},{"lineNumber":47,"author":{"gitId":"chiamyunqing"},"content":"                return Optional.of(date);"},{"lineNumber":48,"author":{"gitId":"chiamyunqing"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"chiamyunqing"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"chiamyunqing"},"content":"        List\u003cTask\u003e listOfTask \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"chiamyunqing"},"content":"        listOfTask.add(new SimpleTask());"},{"lineNumber":52,"author":{"gitId":"chiamyunqing"},"content":"        listOfTask.add(new SimpleTask());"},{"lineNumber":53,"author":{"gitId":"chiamyunqing"},"content":"        assertEquals(listOfTask, new TaskList(new ArrayList\u003cTask\u003e(listOfTask)).getAllTasks());"},{"lineNumber":54,"author":{"gitId":"chiamyunqing"},"content":"        assertEquals(new ArrayList\u003cTask\u003e(), new TaskList().getAllTasks());"},{"lineNumber":55,"author":{"gitId":"chiamyunqing"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chiamyunqing"},"content":"}"}],"authorContributionMap":{"chiamyunqing":56}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chiamyunqing"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"chiamyunqing"},"content":"deadline return book /by 2020-08-09 1700"},{"lineNumber":3,"author":{"gitId":"chiamyunqing"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"chiamyunqing"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"chiamyunqing"},"content":"delete 2"},{"lineNumber":6,"author":{"gitId":"chiamyunqing"},"content":"list"},{"lineNumber":7,"author":{"gitId":"chiamyunqing"},"content":"event project meeting /at 2020-08-08 1400-1500"},{"lineNumber":8,"author":{"gitId":"chiamyunqing"},"content":"todo individual project"},{"lineNumber":9,"author":{"gitId":"chiamyunqing"},"content":"deadline study /by 2020-08-09 1800"},{"lineNumber":10,"author":{"gitId":"chiamyunqing"},"content":"print 2020-08-09"},{"lineNumber":11,"author":{"gitId":"chiamyunqing"},"content":"event group project /at 2020-09-09 0900-1200"},{"lineNumber":12,"author":{"gitId":"chiamyunqing"},"content":"find project"},{"lineNumber":13,"author":{"gitId":"chiamyunqing"},"content":"list"},{"lineNumber":14,"author":{"gitId":"chiamyunqing"},"content":"bye"}],"authorContributionMap":{"chiamyunqing":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"chiamyunqing"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"chiamyunqing"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"chiamyunqing":2,"-":32}}]
