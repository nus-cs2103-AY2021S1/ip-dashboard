[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":45,"author":{"gitId":"yanlynnnnn"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":61,"author":{"gitId":"yanlynnnnn"},"content":""}],"authorContributionMap":{"yanlynnnnn":16,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"* Add a task to do: `todo`"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"* Add a task with a deadline: `deadline`"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"* Add an event: `event`"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"* Remove a task: `remove`"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"* Mark task as done: `done`"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"* Find task by keyword: `find`"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"* List tasks: `list`"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"* Exit the program: `bye`"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"### Add a task to do: todo"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"Adds a `todo` with the specified description to the task list."},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"Format: `todo TASK`"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":"Example: `todo walk the dog`"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"``` "},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":"     [T][x] walk the dog"},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"Now you have 3 tasks in the list"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlynnnnn"},"content":"### Add a task with a deadline: deadline"},{"lineNumber":29,"author":{"gitId":"yanlynnnnn"},"content":"Adds a `deadline` with the specified description to the task list."},{"lineNumber":30,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":31,"author":{"gitId":"yanlynnnnn"},"content":"Format: `deadline TASK /by DATE`"},{"lineNumber":32,"author":{"gitId":"yanlynnnnn"},"content":"* DATE format is in **YYYY-MM-DD**"},{"lineNumber":33,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":34,"author":{"gitId":"yanlynnnnn"},"content":"Example: deadline complete individual project /by 2020-09-18`"},{"lineNumber":35,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":36,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":37,"author":{"gitId":"yanlynnnnn"},"content":"``` "},{"lineNumber":38,"author":{"gitId":"yanlynnnnn"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":39,"author":{"gitId":"yanlynnnnn"},"content":"    [D][x] complete individual project (Sep 18 2020)"},{"lineNumber":40,"author":{"gitId":"yanlynnnnn"},"content":" Now you have 4 tasks in the list"},{"lineNumber":41,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":42,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":43,"author":{"gitId":"yanlynnnnn"},"content":"### Add an event: event"},{"lineNumber":44,"author":{"gitId":"yanlynnnnn"},"content":"Adds an `event` with the specified description to the task list."},{"lineNumber":45,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":46,"author":{"gitId":"yanlynnnnn"},"content":"Format: `event TASK /at DATE`"},{"lineNumber":47,"author":{"gitId":"yanlynnnnn"},"content":"* DATE format is in **YYYY-MM-DD**"},{"lineNumber":48,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":49,"author":{"gitId":"yanlynnnnn"},"content":"Example: `event music festival /at 2020-09-20`"},{"lineNumber":50,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":51,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":52,"author":{"gitId":"yanlynnnnn"},"content":"``` "},{"lineNumber":53,"author":{"gitId":"yanlynnnnn"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":54,"author":{"gitId":"yanlynnnnn"},"content":"        [E][x] music festival (Sep 20 2020)"},{"lineNumber":55,"author":{"gitId":"yanlynnnnn"},"content":"    Now you have 5 tasks in the list"},{"lineNumber":56,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":57,"author":{"gitId":"yanlynnnnn"},"content":"### Remove a task: remove"},{"lineNumber":58,"author":{"gitId":"yanlynnnnn"},"content":"Removes a task from the task list."},{"lineNumber":59,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":60,"author":{"gitId":"yanlynnnnn"},"content":"Format: `remove INDEX`"},{"lineNumber":61,"author":{"gitId":"yanlynnnnn"},"content":"* Removes the task at the specified index"},{"lineNumber":62,"author":{"gitId":"yanlynnnnn"},"content":"* The index refers to the index number of the task as shown in the list"},{"lineNumber":63,"author":{"gitId":"yanlynnnnn"},"content":"* The index **must be a positive integer** 1,2,3"},{"lineNumber":64,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":65,"author":{"gitId":"yanlynnnnn"},"content":"Example: `remove 2`"},{"lineNumber":66,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":67,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":68,"author":{"gitId":"yanlynnnnn"},"content":"``` "},{"lineNumber":69,"author":{"gitId":"yanlynnnnn"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":70,"author":{"gitId":"yanlynnnnn"},"content":"       [T][x] read book"},{"lineNumber":71,"author":{"gitId":"yanlynnnnn"},"content":"    Now you have 4 tasks in the list. "},{"lineNumber":72,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":73,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":74,"author":{"gitId":"yanlynnnnn"},"content":"### Mark task as done: done"},{"lineNumber":75,"author":{"gitId":"yanlynnnnn"},"content":"Marks a task as done in the task list."},{"lineNumber":76,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":77,"author":{"gitId":"yanlynnnnn"},"content":"Format: `done INDEX`"},{"lineNumber":78,"author":{"gitId":"yanlynnnnn"},"content":"* Marks the task at the specified index as done (using a tick)"},{"lineNumber":79,"author":{"gitId":"yanlynnnnn"},"content":"*  The index refers to the index number of the task as shown in the list"},{"lineNumber":80,"author":{"gitId":"yanlynnnnn"},"content":"* The index **must be a positive integer** 1,2,3"},{"lineNumber":81,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":82,"author":{"gitId":"yanlynnnnn"},"content":"Example: `done 2`"},{"lineNumber":83,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":84,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":85,"author":{"gitId":"yanlynnnnn"},"content":"``` "},{"lineNumber":86,"author":{"gitId":"yanlynnnnn"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":87,"author":{"gitId":"yanlynnnnn"},"content":"        [/] walk the dog"},{"lineNumber":88,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":89,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":90,"author":{"gitId":"yanlynnnnn"},"content":"### Find task by keyword: find"},{"lineNumber":91,"author":{"gitId":"yanlynnnnn"},"content":"Finds a task in the task list by keyword."},{"lineNumber":92,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":93,"author":{"gitId":"yanlynnnnn"},"content":"Format: `find KEYWORD`"},{"lineNumber":94,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":95,"author":{"gitId":"yanlynnnnn"},"content":"Example: `find music`"},{"lineNumber":96,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":97,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":98,"author":{"gitId":"yanlynnnnn"},"content":"``` "},{"lineNumber":99,"author":{"gitId":"yanlynnnnn"},"content":"Tasks Found:"},{"lineNumber":100,"author":{"gitId":"yanlynnnnn"},"content":"    5. [E][x] music festival (Sep 20 2020)"},{"lineNumber":101,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":102,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":103,"author":{"gitId":"yanlynnnnn"},"content":"### List tasks: list"},{"lineNumber":104,"author":{"gitId":"yanlynnnnn"},"content":"Lists the current task list."},{"lineNumber":105,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":106,"author":{"gitId":"yanlynnnnn"},"content":"Format: `list`"},{"lineNumber":107,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":108,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":109,"author":{"gitId":"yanlynnnnn"},"content":"```  "},{"lineNumber":110,"author":{"gitId":"yanlynnnnn"},"content":"Here are the tasks in your list:"},{"lineNumber":111,"author":{"gitId":"yanlynnnnn"},"content":"    1. [T][x] complete project "},{"lineNumber":112,"author":{"gitId":"yanlynnnnn"},"content":"```"},{"lineNumber":113,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":114,"author":{"gitId":"yanlynnnnn"},"content":"### Exit the program: bye"},{"lineNumber":115,"author":{"gitId":"yanlynnnnn"},"content":"Exits the program."},{"lineNumber":116,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":117,"author":{"gitId":"yanlynnnnn"},"content":"Format: `bye`"},{"lineNumber":118,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":119,"author":{"gitId":"yanlynnnnn"},"content":"Expected Outcome:"},{"lineNumber":120,"author":{"gitId":"yanlynnnnn"},"content":"`Bye. Hope to see you again soon!`"},{"lineNumber":121,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":122,"author":{"gitId":"yanlynnnnn"},"content":"### Saving data"},{"lineNumber":123,"author":{"gitId":"yanlynnnnn"},"content":"Task List data is automatically saved in the harddisk after any command that changes its data."},{"lineNumber":124,"author":{"gitId":"yanlynnnnn"},"content":"There is no need to save manually"},{"lineNumber":125,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":126,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":127,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":128,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":129,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":130,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":131,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":132,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yanlynnnnn":129,"-":11}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.geometry.Insets;"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlynnnnn"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"yanlynnnnn"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"yanlynnnnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"yanlynnnnn"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"yanlynnnnn"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"yanlynnnnn"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"yanlynnnnn"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"yanlynnnnn"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"yanlynnnnn"},"content":"        Circle circle \u003d new Circle();"},{"lineNumber":38,"author":{"gitId":"yanlynnnnn"},"content":"        circle.setCenterX(55);"},{"lineNumber":39,"author":{"gitId":"yanlynnnnn"},"content":"        circle.setCenterY(50);"},{"lineNumber":40,"author":{"gitId":"yanlynnnnn"},"content":"        circle.setRadius(40);"},{"lineNumber":41,"author":{"gitId":"yanlynnnnn"},"content":"        "},{"lineNumber":42,"author":{"gitId":"yanlynnnnn"},"content":"        displayPicture.setClip(circle);"},{"lineNumber":43,"author":{"gitId":"yanlynnnnn"},"content":"        dialog.setStyle(\"-fx-background-color: yellow;\" + \"-fx-background-radius: 20;\" "},{"lineNumber":44,"author":{"gitId":"yanlynnnnn"},"content":"                + \"-fx-min-width: 50; -fx-end-margin: 20\");"},{"lineNumber":45,"author":{"gitId":"yanlynnnnn"},"content":"        dialog.setPadding(new Insets(12));"},{"lineNumber":46,"author":{"gitId":"yanlynnnnn"},"content":"        "},{"lineNumber":47,"author":{"gitId":"yanlynnnnn"},"content":"        dialog.setText(text);"},{"lineNumber":48,"author":{"gitId":"yanlynnnnn"},"content":"        displayPicture.setImage(img);"},{"lineNumber":49,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":51,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"yanlynnnnn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":53,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yanlynnnnn"},"content":"    private void flip() {"},{"lineNumber":55,"author":{"gitId":"yanlynnnnn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":56,"author":{"gitId":"yanlynnnnn"},"content":"        Collections.reverse(tmp);"},{"lineNumber":57,"author":{"gitId":"yanlynnnnn"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":58,"author":{"gitId":"yanlynnnnn"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":59,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":60,"author":{"gitId":"yanlynnnnn"},"content":"        Circle circle \u003d new Circle();"},{"lineNumber":61,"author":{"gitId":"yanlynnnnn"},"content":"        circle.setCenterX(40);"},{"lineNumber":62,"author":{"gitId":"yanlynnnnn"},"content":"        circle.setCenterY(25);"},{"lineNumber":63,"author":{"gitId":"yanlynnnnn"},"content":"        circle.setRadius(30);"},{"lineNumber":64,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":65,"author":{"gitId":"yanlynnnnn"},"content":"        displayPicture.setClip(circle);"},{"lineNumber":66,"author":{"gitId":"yanlynnnnn"},"content":"        dialog.setStyle(\"-fx-background-color: pink;\" + \"-fx-background-radius: 20;\" "},{"lineNumber":67,"author":{"gitId":"yanlynnnnn"},"content":"                + \"-fx-min-width: 250; -fx-end-margin: 20\");"},{"lineNumber":68,"author":{"gitId":"yanlynnnnn"},"content":"        dialog.setPadding(new Insets(12));"},{"lineNumber":69,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":70,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":72,"author":{"gitId":"yanlynnnnn"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":73,"author":{"gitId":"yanlynnnnn"},"content":"        return new DialogBox(text, img);"},{"lineNumber":74,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":76,"author":{"gitId":"yanlynnnnn"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":77,"author":{"gitId":"yanlynnnnn"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":78,"author":{"gitId":"yanlynnnnn"},"content":"        db.flip();"},{"lineNumber":79,"author":{"gitId":"yanlynnnnn"},"content":"        return db;"},{"lineNumber":80,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"yanlynnnnn"},"content":"}"}],"authorContributionMap":{"yanlynnnnn":81}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.Scene;"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"import java.io.*;"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":" * Duke is a program to keep track of and organise tasks, including todo tasks, event tasks, and deadline tasks."},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":" * "},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":" * @author Yan Lyn"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"    private static Storage storage;"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"    private TaskList inputs;"},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"    private UI ui;"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"    private VBox dialogContainer;"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"yanlynnnnn"},"content":"    private Scene scene;"},{"lineNumber":29,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":30,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yanlynnnnn"},"content":"     * getResponse returns Duke\u0027s response to be shown on the user interface."},{"lineNumber":32,"author":{"gitId":"yanlynnnnn"},"content":"     * "},{"lineNumber":33,"author":{"gitId":"yanlynnnnn"},"content":"     * @throws DukeException "},{"lineNumber":34,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yanlynnnnn"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"yanlynnnnn"},"content":"        return new Duke(\"listStore.ser\").run(input);"},{"lineNumber":37,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":39,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"yanlynnnnn"},"content":"     * Duke constructor constructs Duke object, while initializing \u0027ui\u0027, \u0027storage\u0027 and \u0027inputs\u0027 variables. "},{"lineNumber":41,"author":{"gitId":"yanlynnnnn"},"content":"     * The \u0027inputs\u0027 TaskList is retrieved from the file specified by the filepath."},{"lineNumber":42,"author":{"gitId":"yanlynnnnn"},"content":"     * "},{"lineNumber":43,"author":{"gitId":"yanlynnnnn"},"content":"     * @param filepath"},{"lineNumber":44,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yanlynnnnn"},"content":"    public Duke(String filepath) {"},{"lineNumber":46,"author":{"gitId":"yanlynnnnn"},"content":"        assert filepath \u003d\u003d \"listStore.ser\";"},{"lineNumber":47,"author":{"gitId":"yanlynnnnn"},"content":"        ui \u003d new UI();"},{"lineNumber":48,"author":{"gitId":"yanlynnnnn"},"content":"        storage \u003d new Storage(filepath);"},{"lineNumber":49,"author":{"gitId":"yanlynnnnn"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"yanlynnnnn"},"content":"            inputs \u003d new TaskList(storage.readFile());"},{"lineNumber":51,"author":{"gitId":"yanlynnnnn"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"yanlynnnnn"},"content":"            ui.showLoadingError();"},{"lineNumber":53,"author":{"gitId":"yanlynnnnn"},"content":"            inputs \u003d new TaskList();"},{"lineNumber":54,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":57,"author":{"gitId":"yanlynnnnn"},"content":"    //Empty Constructor"},{"lineNumber":58,"author":{"gitId":"yanlynnnnn"},"content":"    public Duke() {"},{"lineNumber":59,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":61,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"yanlynnnnn"},"content":"     * The run() method runs the program by initializing a parser object to deal with making sense of user command "},{"lineNumber":63,"author":{"gitId":"yanlynnnnn"},"content":"     * and running the parse() method on the parser object."},{"lineNumber":64,"author":{"gitId":"yanlynnnnn"},"content":"     * The run() method directly returns the string \"Bye. Hope to see you again soon!\" if user input is \"bye\"."},{"lineNumber":65,"author":{"gitId":"yanlynnnnn"},"content":"     * "},{"lineNumber":66,"author":{"gitId":"yanlynnnnn"},"content":"     * @return Duke\u0027s output in a string"},{"lineNumber":67,"author":{"gitId":"yanlynnnnn"},"content":"     * @throws DukeException in case of DukeException when running parse() method on the parser object"},{"lineNumber":68,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"yanlynnnnn"},"content":"    public String run(String input) throws DukeException {"},{"lineNumber":70,"author":{"gitId":"yanlynnnnn"},"content":"        while (true) {"},{"lineNumber":71,"author":{"gitId":"yanlynnnnn"},"content":"           String nextLine \u003d input;"},{"lineNumber":72,"author":{"gitId":"yanlynnnnn"},"content":"            Parser parser \u003d new Parser(nextLine, inputs);"},{"lineNumber":73,"author":{"gitId":"yanlynnnnn"},"content":"            if (nextLine.equals(\"bye\")) {"},{"lineNumber":74,"author":{"gitId":"yanlynnnnn"},"content":"                return (\"Bye. Hope to see you again soon!\");"},{"lineNumber":75,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"yanlynnnnn"},"content":"            return parser.parse();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":80,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":81,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"yanlynnnnn"},"content":"     * Parser class deals with making sense of user command."},{"lineNumber":83,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"yanlynnnnn"},"content":"    public static class Parser {"},{"lineNumber":85,"author":{"gitId":"yanlynnnnn"},"content":"        private final String userInput;"},{"lineNumber":86,"author":{"gitId":"yanlynnnnn"},"content":"        private final TaskList savedTaskList;"},{"lineNumber":87,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitId":"yanlynnnnn"},"content":"    public static void main (String[]args) throws DukeException {"},{"lineNumber":89,"author":{"gitId":"yanlynnnnn"},"content":"        new Duke(\"listStore.ser\").run(\"Hello\");"},{"lineNumber":90,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"yanlynnnnn"},"content":"     "},{"lineNumber":92,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":93,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":94,"author":{"gitId":"yanlynnnnn"},"content":"        Parser(String nextLine, TaskList inputs) {"},{"lineNumber":95,"author":{"gitId":"yanlynnnnn"},"content":"            this.userInput \u003d nextLine;"},{"lineNumber":96,"author":{"gitId":"yanlynnnnn"},"content":"            this.savedTaskList \u003d inputs;"},{"lineNumber":97,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":99,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":100,"author":{"gitId":"yanlynnnnn"},"content":"         * Runs different methods on the TaskList based on user command."},{"lineNumber":101,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":102,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user command is not recognised or if methods in TaskList throw DukeException"},{"lineNumber":103,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":104,"author":{"gitId":"yanlynnnnn"},"content":"        String parse() throws DukeException {"},{"lineNumber":105,"author":{"gitId":"yanlynnnnn"},"content":"            try {"},{"lineNumber":106,"author":{"gitId":"yanlynnnnn"},"content":"                if (userInput.startsWith(\"done\")) {"},{"lineNumber":107,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.taskDone(userInput);"},{"lineNumber":108,"author":{"gitId":"yanlynnnnn"},"content":"                } else if (userInput.startsWith(\"remove\")) {"},{"lineNumber":109,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.removeTask(userInput);"},{"lineNumber":110,"author":{"gitId":"yanlynnnnn"},"content":"                } else if (userInput.startsWith(\"todo\")) {"},{"lineNumber":111,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.addTodoTask(userInput);"},{"lineNumber":112,"author":{"gitId":"yanlynnnnn"},"content":"                } else if (userInput.startsWith(\"deadline\")) {"},{"lineNumber":113,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.addDeadlineTask(userInput);"},{"lineNumber":114,"author":{"gitId":"yanlynnnnn"},"content":"                } else if (userInput.startsWith(\"event\")) {"},{"lineNumber":115,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.addEventTask(userInput);"},{"lineNumber":116,"author":{"gitId":"yanlynnnnn"},"content":"                } else if (userInput.startsWith(\"find\")) {"},{"lineNumber":117,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.findTask(userInput);"},{"lineNumber":118,"author":{"gitId":"yanlynnnnn"},"content":"                } else if (userInput.equals(\"list\")) {"},{"lineNumber":119,"author":{"gitId":"yanlynnnnn"},"content":"                    return savedTaskList.printList();"},{"lineNumber":120,"author":{"gitId":"yanlynnnnn"},"content":"                } else {"},{"lineNumber":121,"author":{"gitId":"yanlynnnnn"},"content":"                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":122,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":123,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (DukeException e) {"},{"lineNumber":124,"author":{"gitId":"yanlynnnnn"},"content":"                System.out.println(e.msg);"},{"lineNumber":125,"author":{"gitId":"yanlynnnnn"},"content":"                return e.msg;"},{"lineNumber":126,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":130,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"yanlynnnnn"},"content":"     * Input class represents input from the user in the form of tasks."},{"lineNumber":132,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"yanlynnnnn"},"content":"    public static class Input implements Serializable {"},{"lineNumber":134,"author":{"gitId":"yanlynnnnn"},"content":"        boolean done \u003d false;"},{"lineNumber":135,"author":{"gitId":"yanlynnnnn"},"content":"        String content;"},{"lineNumber":136,"author":{"gitId":"yanlynnnnn"},"content":"        String id;"},{"lineNumber":137,"author":{"gitId":"yanlynnnnn"},"content":"        LocalDate time;"},{"lineNumber":138,"author":{"gitId":"yanlynnnnn"},"content":"        String printTime;"},{"lineNumber":139,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":140,"author":{"gitId":"yanlynnnnn"},"content":"        Input(String content) {"},{"lineNumber":141,"author":{"gitId":"yanlynnnnn"},"content":"            this.content \u003d content;"},{"lineNumber":142,"author":{"gitId":"yanlynnnnn"},"content":"            boolean done \u003d false;"},{"lineNumber":143,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":145,"author":{"gitId":"yanlynnnnn"},"content":"        Input(boolean done, String content) {"},{"lineNumber":146,"author":{"gitId":"yanlynnnnn"},"content":"            this.done \u003d done;"},{"lineNumber":147,"author":{"gitId":"yanlynnnnn"},"content":"            this.content \u003d content;"},{"lineNumber":148,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":150,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":151,"author":{"gitId":"yanlynnnnn"},"content":"         * taskDone() method marks task as done by setting boolean \u0027done\u0027 as true."},{"lineNumber":152,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":153,"author":{"gitId":"yanlynnnnn"},"content":"        public void taskDone() {"},{"lineNumber":154,"author":{"gitId":"yanlynnnnn"},"content":"            System.out.println(\"check\");"},{"lineNumber":155,"author":{"gitId":"yanlynnnnn"},"content":"            this.done \u003d true;"},{"lineNumber":156,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":159,"author":{"gitId":"yanlynnnnn"},"content":"    public static class Todo extends Input {"},{"lineNumber":160,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":161,"author":{"gitId":"yanlynnnnn"},"content":"        Todo(String content) {"},{"lineNumber":162,"author":{"gitId":"yanlynnnnn"},"content":"            super(content);"},{"lineNumber":163,"author":{"gitId":"yanlynnnnn"},"content":"            this.id \u003d \"[T]\";"},{"lineNumber":164,"author":{"gitId":"yanlynnnnn"},"content":"            this.time \u003d null;"},{"lineNumber":165,"author":{"gitId":"yanlynnnnn"},"content":"            this.printTime \u003d \"\";"},{"lineNumber":166,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":168,"author":{"gitId":"yanlynnnnn"},"content":"        Todo(boolean done, String content) {"},{"lineNumber":169,"author":{"gitId":"yanlynnnnn"},"content":"            super(done, content);"},{"lineNumber":170,"author":{"gitId":"yanlynnnnn"},"content":"            this.id \u003d \"[T]\";"},{"lineNumber":171,"author":{"gitId":"yanlynnnnn"},"content":"            this.time \u003d null;"},{"lineNumber":172,"author":{"gitId":"yanlynnnnn"},"content":"            this.printTime \u003d \"\";"},{"lineNumber":173,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":176,"author":{"gitId":"yanlynnnnn"},"content":"    public static class Deadline extends Input {"},{"lineNumber":177,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":178,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":179,"author":{"gitId":"yanlynnnnn"},"content":"         * Constructor for Deadline Object."},{"lineNumber":180,"author":{"gitId":"yanlynnnnn"},"content":"         * Converts date specified by the user from a string to a LocalDate object, under the \u0027time\u0027 attribute."},{"lineNumber":181,"author":{"gitId":"yanlynnnnn"},"content":"         * Formats LocalDate and converts it back to a string for printing, under the \u0027printTime\u0027 attribute."},{"lineNumber":182,"author":{"gitId":"yanlynnnnn"},"content":"         * "},{"lineNumber":183,"author":{"gitId":"yanlynnnnn"},"content":"         * @param content"},{"lineNumber":184,"author":{"gitId":"yanlynnnnn"},"content":"         * @param deadlineTime"},{"lineNumber":185,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":186,"author":{"gitId":"yanlynnnnn"},"content":"        Deadline(String content, String deadlineTime) {"},{"lineNumber":187,"author":{"gitId":"yanlynnnnn"},"content":"            super(content);"},{"lineNumber":188,"author":{"gitId":"yanlynnnnn"},"content":"            this.time \u003d LocalDate.parse(deadlineTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":189,"author":{"gitId":"yanlynnnnn"},"content":"            this.id \u003d \"[D]\";"},{"lineNumber":190,"author":{"gitId":"yanlynnnnn"},"content":"            this.printTime \u003d \"(\" + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":191,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":193,"author":{"gitId":"yanlynnnnn"},"content":"        Deadline(boolean done, String content, String deadlineTime) {"},{"lineNumber":194,"author":{"gitId":"yanlynnnnn"},"content":"            super(done, content);"},{"lineNumber":195,"author":{"gitId":"yanlynnnnn"},"content":"            this.time \u003d LocalDate.parse(deadlineTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":196,"author":{"gitId":"yanlynnnnn"},"content":"            this.id \u003d \"[D]\";"},{"lineNumber":197,"author":{"gitId":"yanlynnnnn"},"content":"            this.printTime \u003d \"(\" + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":198,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":201,"author":{"gitId":"yanlynnnnn"},"content":"    public static class Event extends Input {"},{"lineNumber":202,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":203,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":204,"author":{"gitId":"yanlynnnnn"},"content":"         * Constructor for Event Object."},{"lineNumber":205,"author":{"gitId":"yanlynnnnn"},"content":"         * Converts date specified by the user from a string to a LocalDate object, under the \u0027time\u0027 attribute."},{"lineNumber":206,"author":{"gitId":"yanlynnnnn"},"content":"         * Formats LocalDate and converts it back to a string for printing, under the \u0027printTime\u0027 attribute."},{"lineNumber":207,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":208,"author":{"gitId":"yanlynnnnn"},"content":"         * @param content"},{"lineNumber":209,"author":{"gitId":"yanlynnnnn"},"content":"         * @param eventTime"},{"lineNumber":210,"author":{"gitId":"yanlynnnnn"},"content":"        */"},{"lineNumber":211,"author":{"gitId":"yanlynnnnn"},"content":"        Event(String content, String eventTime) {"},{"lineNumber":212,"author":{"gitId":"yanlynnnnn"},"content":"            super(content);"},{"lineNumber":213,"author":{"gitId":"yanlynnnnn"},"content":"            this.time \u003d LocalDate.parse(eventTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":214,"author":{"gitId":"yanlynnnnn"},"content":"            this.id \u003d \"[E]\";"},{"lineNumber":215,"author":{"gitId":"yanlynnnnn"},"content":"            this.printTime \u003d \"(\" + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":216,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":218,"author":{"gitId":"yanlynnnnn"},"content":"        Event(boolean done, String content, String eventTime) {"},{"lineNumber":219,"author":{"gitId":"yanlynnnnn"},"content":"            super(done, content);"},{"lineNumber":220,"author":{"gitId":"yanlynnnnn"},"content":"            this.time \u003d LocalDate.parse(eventTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":221,"author":{"gitId":"yanlynnnnn"},"content":"            this.id \u003d \"[E]\";"},{"lineNumber":222,"author":{"gitId":"yanlynnnnn"},"content":"            this.printTime \u003d \"(\" + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":223,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":226,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"yanlynnnnn"},"content":"     * DukeException class which inherits directly from Exception class."},{"lineNumber":228,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"yanlynnnnn"},"content":"    public static class DukeException extends Exception {"},{"lineNumber":230,"author":{"gitId":"yanlynnnnn"},"content":"        protected String msg;"},{"lineNumber":231,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":232,"author":{"gitId":"yanlynnnnn"},"content":"        DukeException(String msg) {"},{"lineNumber":233,"author":{"gitId":"yanlynnnnn"},"content":"            this.msg \u003d msg;"},{"lineNumber":234,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":237,"author":{"gitId":"yanlynnnnn"},"content":"    /** "},{"lineNumber":238,"author":{"gitId":"yanlynnnnn"},"content":"     * Storage Class deals with saving and retrieving data from a hard disk."},{"lineNumber":239,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"yanlynnnnn"},"content":"    public static class Storage {"},{"lineNumber":241,"author":{"gitId":"yanlynnnnn"},"content":"        private String filepath;"},{"lineNumber":242,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":243,"author":{"gitId":"yanlynnnnn"},"content":"        Storage(String filepath) {"},{"lineNumber":244,"author":{"gitId":"yanlynnnnn"},"content":"            this.filepath \u003d filepath;"},{"lineNumber":245,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":247,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":248,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":249,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves TaskList in a file which is based on the filepath in the Storage Class."},{"lineNumber":250,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":251,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves tasks in file specified by the filepath."},{"lineNumber":252,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":253,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":254,"author":{"gitId":"yanlynnnnn"},"content":"         * @param list of input tasks to be saved"},{"lineNumber":255,"author":{"gitId":"yanlynnnnn"},"content":"         * @catch IOException"},{"lineNumber":256,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":257,"author":{"gitId":"yanlynnnnn"},"content":"        void writeToFile(List\u003cInput\u003e list) {"},{"lineNumber":258,"author":{"gitId":"yanlynnnnn"},"content":"            try {"},{"lineNumber":259,"author":{"gitId":"yanlynnnnn"},"content":"                FileOutputStream writeData \u003d new FileOutputStream(filepath);"},{"lineNumber":260,"author":{"gitId":"yanlynnnnn"},"content":"                ObjectOutputStream writeStream \u003d new ObjectOutputStream(writeData);"},{"lineNumber":261,"author":{"gitId":"yanlynnnnn"},"content":"                writeStream.writeObject(list);"},{"lineNumber":262,"author":{"gitId":"yanlynnnnn"},"content":"                writeStream.flush();"},{"lineNumber":263,"author":{"gitId":"yanlynnnnn"},"content":"                writeStream.close();"},{"lineNumber":264,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (IOException e) {"},{"lineNumber":265,"author":{"gitId":"yanlynnnnn"},"content":"                e.printStackTrace();"},{"lineNumber":266,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":267,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":269,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":270,"author":{"gitId":"yanlynnnnn"},"content":"         * Retrieves TaskList from a file based on the filepath in the Storage Class."},{"lineNumber":271,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":272,"author":{"gitId":"yanlynnnnn"},"content":"         * @returns TaskList from file"},{"lineNumber":273,"author":{"gitId":"yanlynnnnn"},"content":"         * @catch FileNotFoundException if file does not exist, creates a new arraylist"},{"lineNumber":274,"author":{"gitId":"yanlynnnnn"},"content":"         * @catch IOException and ClassNotFoundException, returns null"},{"lineNumber":275,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":276,"author":{"gitId":"yanlynnnnn"},"content":"        List\u003cInput\u003e readFile() {"},{"lineNumber":277,"author":{"gitId":"yanlynnnnn"},"content":"            try {"},{"lineNumber":278,"author":{"gitId":"yanlynnnnn"},"content":"                FileInputStream readData \u003d new FileInputStream(filepath);"},{"lineNumber":279,"author":{"gitId":"yanlynnnnn"},"content":"                ObjectInputStream readStream \u003d new ObjectInputStream(readData);"},{"lineNumber":280,"author":{"gitId":"yanlynnnnn"},"content":"                Object obj \u003d readStream.readObject();"},{"lineNumber":281,"author":{"gitId":"yanlynnnnn"},"content":"                if (obj !\u003d null) {"},{"lineNumber":282,"author":{"gitId":"yanlynnnnn"},"content":"                    List\u003cInput\u003e inputList \u003d (List\u003cInput\u003e) obj;"},{"lineNumber":283,"author":{"gitId":"yanlynnnnn"},"content":"                    readStream.close();"},{"lineNumber":284,"author":{"gitId":"yanlynnnnn"},"content":"                    return inputList;"},{"lineNumber":285,"author":{"gitId":"yanlynnnnn"},"content":"                } else {"},{"lineNumber":286,"author":{"gitId":"yanlynnnnn"},"content":"                    return null;"},{"lineNumber":287,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":288,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (FileNotFoundException e) {"},{"lineNumber":289,"author":{"gitId":"yanlynnnnn"},"content":"                return new ArrayList\u003c\u003e();"},{"lineNumber":290,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (IOException | ClassNotFoundException e) {"},{"lineNumber":291,"author":{"gitId":"yanlynnnnn"},"content":"                e.printStackTrace();"},{"lineNumber":292,"author":{"gitId":"yanlynnnnn"},"content":"                return null;"},{"lineNumber":293,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":294,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":295,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":297,"author":{"gitId":"yanlynnnnn"},"content":"    /** "},{"lineNumber":298,"author":{"gitId":"yanlynnnnn"},"content":"     * TaskList class represents the list of input tasks."},{"lineNumber":299,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":300,"author":{"gitId":"yanlynnnnn"},"content":"    public static class TaskList {"},{"lineNumber":301,"author":{"gitId":"yanlynnnnn"},"content":"        List\u003cInput\u003e inputs;"},{"lineNumber":302,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":303,"author":{"gitId":"yanlynnnnn"},"content":"        TaskList() {"},{"lineNumber":304,"author":{"gitId":"yanlynnnnn"},"content":"            this.inputs \u003d new ArrayList\u003cInput\u003e();"},{"lineNumber":305,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":306,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":307,"author":{"gitId":"yanlynnnnn"},"content":"        TaskList(List\u003cInput\u003e inputs) throws DukeException {"},{"lineNumber":308,"author":{"gitId":"yanlynnnnn"},"content":"            try {"},{"lineNumber":309,"author":{"gitId":"yanlynnnnn"},"content":"                this.inputs \u003d inputs;"},{"lineNumber":310,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (Exception e) {"},{"lineNumber":311,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"Error making task!\");"},{"lineNumber":312,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":313,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":314,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":315,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":316,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":317,"author":{"gitId":"yanlynnnnn"},"content":"         * Identifies task specified by the user and invokes taskDone() method from Input class to mark task as done."},{"lineNumber":318,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves the resulting list to a hard disk."},{"lineNumber":319,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":320,"author":{"gitId":"yanlynnnnn"},"content":"         * Marks task, as specified by user, as done."},{"lineNumber":321,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":322,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":323,"author":{"gitId":"yanlynnnnn"},"content":"         * @return A string representing Duke\u0027s response to be shown to user"},{"lineNumber":324,"author":{"gitId":"yanlynnnnn"},"content":"         * @param nextLine representing user input"},{"lineNumber":325,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user does not specify which task done, or if task specified is not in list"},{"lineNumber":326,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":327,"author":{"gitId":"yanlynnnnn"},"content":"        String taskDone(String nextLine) throws DukeException {"},{"lineNumber":328,"author":{"gitId":"yanlynnnnn"},"content":"            if (nextLine.equals(\"done\") || nextLine.equals(\"done \")) {"},{"lineNumber":329,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! The description of done cannot be empty.\");"},{"lineNumber":330,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":331,"author":{"gitId":"yanlynnnnn"},"content":"            int numTaskDone \u003d Integer.valueOf(nextLine.substring(5));"},{"lineNumber":332,"author":{"gitId":"yanlynnnnn"},"content":"            if (numTaskDone \u003e inputs.size()) {"},{"lineNumber":333,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! Task does not exist.\");"},{"lineNumber":334,"author":{"gitId":"yanlynnnnn"},"content":"            } else if (inputs.size() \u003d\u003d 0) {"},{"lineNumber":335,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! List is empty!\");"},{"lineNumber":336,"author":{"gitId":"yanlynnnnn"},"content":"            } else { "},{"lineNumber":337,"author":{"gitId":"yanlynnnnn"},"content":"                Input inputType \u003d inputs.get(numTaskDone - 1);"},{"lineNumber":338,"author":{"gitId":"yanlynnnnn"},"content":"                inputType.taskDone();"},{"lineNumber":339,"author":{"gitId":"yanlynnnnn"},"content":"                storage.writeToFile(inputs);"},{"lineNumber":340,"author":{"gitId":"yanlynnnnn"},"content":"                return (\"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + \"[/] \" + inputType.content + \" \" + inputType.printTime);"},{"lineNumber":341,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":342,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":343,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":344,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":345,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":346,"author":{"gitId":"yanlynnnnn"},"content":"         * Identifies task specified by the user and removes the task from the list."},{"lineNumber":347,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves the resulting list to the hard disk."},{"lineNumber":348,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":349,"author":{"gitId":"yanlynnnnn"},"content":"         * removes task, as specified by the user, from list."},{"lineNumber":350,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":351,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":352,"author":{"gitId":"yanlynnnnn"},"content":"         * @return A string representing Duke\u0027s response to be shown to user"},{"lineNumber":353,"author":{"gitId":"yanlynnnnn"},"content":"         * @param nextLine, represents user input"},{"lineNumber":354,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user does not specify which task to remove or task is not in list"},{"lineNumber":355,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":356,"author":{"gitId":"yanlynnnnn"},"content":"        String removeTask(String nextLine) throws DukeException {"},{"lineNumber":357,"author":{"gitId":"yanlynnnnn"},"content":"            if (nextLine.equals(\"remove\") || nextLine.equals(\"remove \")) {"},{"lineNumber":358,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! The description of remove cannot be empty\");"},{"lineNumber":359,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":360,"author":{"gitId":"yanlynnnnn"},"content":"            int numTaskDone \u003d Integer.valueOf(nextLine.substring(7));"},{"lineNumber":361,"author":{"gitId":"yanlynnnnn"},"content":"            if (numTaskDone \u003e inputs.size()) {"},{"lineNumber":362,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! Task does not exist.\");"},{"lineNumber":363,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":364,"author":{"gitId":"yanlynnnnn"},"content":"            Input inputType \u003d inputs.get(numTaskDone - 1);"},{"lineNumber":365,"author":{"gitId":"yanlynnnnn"},"content":"            inputs.remove(numTaskDone - 1);"},{"lineNumber":366,"author":{"gitId":"yanlynnnnn"},"content":"            storage.writeToFile(inputs);"},{"lineNumber":367,"author":{"gitId":"yanlynnnnn"},"content":"            if (inputType.done) {"},{"lineNumber":368,"author":{"gitId":"yanlynnnnn"},"content":"                return \"Noted. I\u0027ve removed this task:\" + \"\\n\" + inputType.id + \"[/] \" + inputType.content "},{"lineNumber":369,"author":{"gitId":"yanlynnnnn"},"content":"                        + inputType.printTime + \"\\n\" + \"Now you have \" + inputs.size() + \" tasks in the list.\";"},{"lineNumber":370,"author":{"gitId":"yanlynnnnn"},"content":"            } else {"},{"lineNumber":371,"author":{"gitId":"yanlynnnnn"},"content":"                return \"Noted. I\u0027ve removed this task:\" + \"\\n\" + inputType.id + \"[x] \" + inputType.content"},{"lineNumber":372,"author":{"gitId":"yanlynnnnn"},"content":"                        + inputType.printTime + \"\\n\" + \"Now you have \" + inputs.size() + \" tasks in the list.\";"},{"lineNumber":373,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":374,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":375,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":376,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":377,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":378,"author":{"gitId":"yanlynnnnn"},"content":"         * Adds a to-do object to the list based on user input."},{"lineNumber":379,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves the resulting list to a hard disk."},{"lineNumber":380,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":381,"author":{"gitId":"yanlynnnnn"},"content":"         * Adds a to-do object to the list, and saves the list to hard disk."},{"lineNumber":382,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":383,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":384,"author":{"gitId":"yanlynnnnn"},"content":"         * @return A string representing Duke\u0027s response to be shown to user"},{"lineNumber":385,"author":{"gitId":"yanlynnnnn"},"content":"         * @param nextLine, represents user input"},{"lineNumber":386,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user does not specify task to-do"},{"lineNumber":387,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":388,"author":{"gitId":"yanlynnnnn"},"content":"        String addTodoTask(String nextLine) throws DukeException {"},{"lineNumber":389,"author":{"gitId":"yanlynnnnn"},"content":"            if (nextLine.equals(\"todo\") || nextLine.equals(\"todo \")) {"},{"lineNumber":390,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":391,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":392,"author":{"gitId":"yanlynnnnn"},"content":"            Todo todo \u003d new Todo(nextLine.substring(5));"},{"lineNumber":393,"author":{"gitId":"yanlynnnnn"},"content":"            if (taskExist(todo.content, null)) {"},{"lineNumber":394,"author":{"gitId":"yanlynnnnn"},"content":"                return \"Could not add task. Task already exists!\";"},{"lineNumber":395,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":396,"author":{"gitId":"yanlynnnnn"},"content":"            inputs.add(todo);"},{"lineNumber":397,"author":{"gitId":"yanlynnnnn"},"content":"            int count \u003d inputs.size();"},{"lineNumber":398,"author":{"gitId":"yanlynnnnn"},"content":"            storage.writeToFile(inputs);"},{"lineNumber":399,"author":{"gitId":"yanlynnnnn"},"content":"            assert inputs !\u003d null;"},{"lineNumber":400,"author":{"gitId":"yanlynnnnn"},"content":"            return \"Got it. I\u0027ve added this task: \\n\" + \"  [T][x] \" + todo.content"},{"lineNumber":401,"author":{"gitId":"yanlynnnnn"},"content":"                    + \"\\n Now you have \" + count + \" tasks in the list\";"},{"lineNumber":402,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":403,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":404,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":405,"author":{"gitId":"yanlynnnnn"},"content":"         * Adds a deadline object to the list based on user input."},{"lineNumber":406,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves the resulting list to a hard disk."},{"lineNumber":407,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":408,"author":{"gitId":"yanlynnnnn"},"content":"         * @return A string representing Duke\u0027s response to be shown to user"},{"lineNumber":409,"author":{"gitId":"yanlynnnnn"},"content":"         * @param nextLine, represents user input"},{"lineNumber":410,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user does not specify deadline task "},{"lineNumber":411,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":412,"author":{"gitId":"yanlynnnnn"},"content":"        String addDeadlineTask(String nextLine) throws DukeException {"},{"lineNumber":413,"author":{"gitId":"yanlynnnnn"},"content":"            try {"},{"lineNumber":414,"author":{"gitId":"yanlynnnnn"},"content":"                if (nextLine.equals(\"deadline\") || nextLine.equals(\"deadline \")) {"},{"lineNumber":415,"author":{"gitId":"yanlynnnnn"},"content":"                    throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":416,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":417,"author":{"gitId":"yanlynnnnn"},"content":"                int charLoc \u003d nextLine.indexOf(\"/by\");"},{"lineNumber":418,"author":{"gitId":"yanlynnnnn"},"content":"                Deadline deadline \u003d new Deadline(nextLine.substring(9, charLoc), nextLine.substring(charLoc + 4));"},{"lineNumber":419,"author":{"gitId":"yanlynnnnn"},"content":"                if (taskExist(deadline.content, deadline.time)) {"},{"lineNumber":420,"author":{"gitId":"yanlynnnnn"},"content":"                    return \"Could not add task. Task already exists!\";"},{"lineNumber":421,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":422,"author":{"gitId":"yanlynnnnn"},"content":"                inputs.add(deadline);"},{"lineNumber":423,"author":{"gitId":"yanlynnnnn"},"content":"                int count \u003d inputs.size();"},{"lineNumber":424,"author":{"gitId":"yanlynnnnn"},"content":"                storage.writeToFile(inputs);"},{"lineNumber":425,"author":{"gitId":"yanlynnnnn"},"content":"                assert inputs !\u003d null;"},{"lineNumber":426,"author":{"gitId":"yanlynnnnn"},"content":"                return (\"Got it. I\u0027ve added this task: \\n\" + \"  [D][x] \" + deadline.content"},{"lineNumber":427,"author":{"gitId":"yanlynnnnn"},"content":"                        + deadline.printTime + \"\\n Now you have \" + count + \" tasks in the list\");"},{"lineNumber":428,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (java.time.format.DateTimeParseException e) {"},{"lineNumber":429,"author":{"gitId":"yanlynnnnn"},"content":"                return \"Please provide proper date format!\";"},{"lineNumber":430,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":431,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":432,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":433,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":434,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":435,"author":{"gitId":"yanlynnnnn"},"content":"         * Adds an event object to the list based on user input."},{"lineNumber":436,"author":{"gitId":"yanlynnnnn"},"content":"         * Saves the resulting list to a hard disk."},{"lineNumber":437,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":438,"author":{"gitId":"yanlynnnnn"},"content":"         * Adds an event object to the list, and saves the list to hard disk."},{"lineNumber":439,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":440,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":441,"author":{"gitId":"yanlynnnnn"},"content":"         * @return A string representing Duke\u0027s response to be shown to user"},{"lineNumber":442,"author":{"gitId":"yanlynnnnn"},"content":"         * @param nextLine, represents user input"},{"lineNumber":443,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user does not specify event task"},{"lineNumber":444,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":445,"author":{"gitId":"yanlynnnnn"},"content":"        String addEventTask(String nextLine) throws DukeException {"},{"lineNumber":446,"author":{"gitId":"yanlynnnnn"},"content":"            try { "},{"lineNumber":447,"author":{"gitId":"yanlynnnnn"},"content":"                if (nextLine.equals(\"event\") || nextLine.equals(\"event \")) {"},{"lineNumber":448,"author":{"gitId":"yanlynnnnn"},"content":"                    throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":449,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":450,"author":{"gitId":"yanlynnnnn"},"content":"                int charLoc \u003d nextLine.indexOf(\"/at\");"},{"lineNumber":451,"author":{"gitId":"yanlynnnnn"},"content":"                Event event \u003d new Event(nextLine.substring(6, charLoc), nextLine.substring(charLoc + 4));"},{"lineNumber":452,"author":{"gitId":"yanlynnnnn"},"content":"                if (taskExist(event.content, event.time)) {"},{"lineNumber":453,"author":{"gitId":"yanlynnnnn"},"content":"                    return \"Could not add task. Task already exists!\";"},{"lineNumber":454,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":455,"author":{"gitId":"yanlynnnnn"},"content":"                inputs.add(event);"},{"lineNumber":456,"author":{"gitId":"yanlynnnnn"},"content":"                int count \u003d inputs.size();"},{"lineNumber":457,"author":{"gitId":"yanlynnnnn"},"content":"                storage.writeToFile(inputs);"},{"lineNumber":458,"author":{"gitId":"yanlynnnnn"},"content":"                assert inputs !\u003d null;"},{"lineNumber":459,"author":{"gitId":"yanlynnnnn"},"content":"                return (\"Got it. I\u0027ve added this task: \\n\" + \"  [E][x] \" + event.content"},{"lineNumber":460,"author":{"gitId":"yanlynnnnn"},"content":"                        + event.printTime + \"\\n Now you have \" + count + \" tasks in the list\");"},{"lineNumber":461,"author":{"gitId":"yanlynnnnn"},"content":"            } catch (java.time.format.DateTimeParseException e) {"},{"lineNumber":462,"author":{"gitId":"yanlynnnnn"},"content":"                return \"Please provide proper date format!\";"},{"lineNumber":463,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":464,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":465,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":466,"author":{"gitId":"yanlynnnnn"},"content":"            int charLoc \u003d nextLine.indexOf(\"/at\");"},{"lineNumber":467,"author":{"gitId":"yanlynnnnn"},"content":"            Event event \u003d new Event(nextLine.substring(6, charLoc), nextLine.substring(charLoc + 4));"},{"lineNumber":468,"author":{"gitId":"yanlynnnnn"},"content":"            inputs.add(event);"},{"lineNumber":469,"author":{"gitId":"yanlynnnnn"},"content":"            int count \u003d inputs.size();"},{"lineNumber":470,"author":{"gitId":"yanlynnnnn"},"content":"            storage.writeToFile(inputs);"},{"lineNumber":471,"author":{"gitId":"yanlynnnnn"},"content":"            assert inputs !\u003d null;"},{"lineNumber":472,"author":{"gitId":"yanlynnnnn"},"content":"            return (\"Got it. I\u0027ve added this task: \\n\" + \"  [E][x] \" + event.content"},{"lineNumber":473,"author":{"gitId":"yanlynnnnn"},"content":"                    + event.printTime + \"\\n Now you have \" + count + \" tasks in the list\");"},{"lineNumber":474,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":475,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":476,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":477,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":478,"author":{"gitId":"yanlynnnnn"},"content":"         * Find tasks which contains keyword specified by user."},{"lineNumber":479,"author":{"gitId":"yanlynnnnn"},"content":"         *"},{"lineNumber":480,"author":{"gitId":"yanlynnnnn"},"content":"         * @return A list of tasks containing the keyword"},{"lineNumber":481,"author":{"gitId":"yanlynnnnn"},"content":"         * @param nextLine, represents user input"},{"lineNumber":482,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException if user does not specify task to find"},{"lineNumber":483,"author":{"gitId":"yanlynnnnn"},"content":"         */        "},{"lineNumber":484,"author":{"gitId":"yanlynnnnn"},"content":"        String findTask(String nextLine) throws DukeException {"},{"lineNumber":485,"author":{"gitId":"yanlynnnnn"},"content":"            if (nextLine.equals(\"find\") || nextLine.equals(\"find \")) {"},{"lineNumber":486,"author":{"gitId":"yanlynnnnn"},"content":"                throw new DukeException(\"OOPS!!! The description of find cannot be empty\");"},{"lineNumber":487,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":488,"author":{"gitId":"yanlynnnnn"},"content":"            String keyword \u003d nextLine.substring(5);"},{"lineNumber":489,"author":{"gitId":"yanlynnnnn"},"content":"            int len \u003d inputs.size();"},{"lineNumber":490,"author":{"gitId":"yanlynnnnn"},"content":"            String stringList \u003d \"Tasks Found: \\n\";"},{"lineNumber":491,"author":{"gitId":"yanlynnnnn"},"content":"            for (int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":492,"author":{"gitId":"yanlynnnnn"},"content":"                Input input \u003d inputs.get(i);"},{"lineNumber":493,"author":{"gitId":"yanlynnnnn"},"content":"                if (input.content.contains(keyword)) {"},{"lineNumber":494,"author":{"gitId":"yanlynnnnn"},"content":"                    stringList +\u003d printTask(input, i);"},{"lineNumber":495,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":496,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":497,"author":{"gitId":"yanlynnnnn"},"content":"            return stringList;"},{"lineNumber":498,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":499,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":500,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":501,"author":{"gitId":"yanlynnnnn"},"content":"         * Prints a list of the tasks in the TaskList."},{"lineNumber":502,"author":{"gitId":"yanlynnnnn"},"content":"         * "},{"lineNumber":503,"author":{"gitId":"yanlynnnnn"},"content":"         * @return list of tasks in TaskList"},{"lineNumber":504,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":505,"author":{"gitId":"yanlynnnnn"},"content":"        String printList() {"},{"lineNumber":506,"author":{"gitId":"yanlynnnnn"},"content":"            if (this.inputs.size() \u003d\u003d 0) {"},{"lineNumber":507,"author":{"gitId":"yanlynnnnn"},"content":"                return \"No tasks in list\";"},{"lineNumber":508,"author":{"gitId":"yanlynnnnn"},"content":"            } else {"},{"lineNumber":509,"author":{"gitId":"yanlynnnnn"},"content":"                int len \u003d this.inputs.size();"},{"lineNumber":510,"author":{"gitId":"yanlynnnnn"},"content":"                String stringList \u003d \"Here are the tasks in your list: \\n\";"},{"lineNumber":511,"author":{"gitId":"yanlynnnnn"},"content":"                for (int i \u003d 0; i \u003c\u003d len-1; i++) {"},{"lineNumber":512,"author":{"gitId":"yanlynnnnn"},"content":"                    Input input \u003d this.inputs.get(i);"},{"lineNumber":513,"author":{"gitId":"yanlynnnnn"},"content":"                    stringList +\u003d printTask(input, i);"},{"lineNumber":514,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":515,"author":{"gitId":"yanlynnnnn"},"content":"                return stringList;"},{"lineNumber":516,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":517,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":518,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":519,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":520,"author":{"gitId":"yanlynnnnn"},"content":"         * Prints input task to a string, to be shown to the user as Duke\u0027s response."},{"lineNumber":521,"author":{"gitId":"yanlynnnnn"},"content":"         * Prints string with \u0027[/]\u0027 if input task is done, otherwise prints string with \u0027[x]\u0027."},{"lineNumber":522,"author":{"gitId":"yanlynnnnn"},"content":"         * "},{"lineNumber":523,"author":{"gitId":"yanlynnnnn"},"content":"         * @param input, which represents the input task to print to string."},{"lineNumber":524,"author":{"gitId":"yanlynnnnn"},"content":"         * @param i, which is the index of the task in the list"},{"lineNumber":525,"author":{"gitId":"yanlynnnnn"},"content":"         * @return string to be shown to user"},{"lineNumber":526,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":527,"author":{"gitId":"yanlynnnnn"},"content":"        String printTask(Input input, int i) {"},{"lineNumber":528,"author":{"gitId":"yanlynnnnn"},"content":"            if (input.done) {"},{"lineNumber":529,"author":{"gitId":"yanlynnnnn"},"content":"                return ((i+1) + \". \" + input.id + \"[/] \" + input.content + input.printTime + \"\\n\");"},{"lineNumber":530,"author":{"gitId":"yanlynnnnn"},"content":"            } else {"},{"lineNumber":531,"author":{"gitId":"yanlynnnnn"},"content":"                return ((i+1) + \". \" + input.id + \"[x] \" + input.content + input.printTime + \"\\n\");"},{"lineNumber":532,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":533,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":534,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":535,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":536,"author":{"gitId":"yanlynnnnn"},"content":"         * Checks if task already exists to avoid duplicates."},{"lineNumber":537,"author":{"gitId":"yanlynnnnn"},"content":"         * @param taskContent"},{"lineNumber":538,"author":{"gitId":"yanlynnnnn"},"content":"         * @return true if task exists, false if task does not exist"},{"lineNumber":539,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":540,"author":{"gitId":"yanlynnnnn"},"content":"        boolean taskExist(String taskContent, LocalDate taskDate) {"},{"lineNumber":541,"author":{"gitId":"yanlynnnnn"},"content":"            int len \u003d inputs.size();"},{"lineNumber":542,"author":{"gitId":"yanlynnnnn"},"content":"            for(int i \u003d 0; i \u003c len; i++) {"},{"lineNumber":543,"author":{"gitId":"yanlynnnnn"},"content":"                Input taskFromList \u003d inputs.get(i);"},{"lineNumber":544,"author":{"gitId":"yanlynnnnn"},"content":"                if (taskFromList.content.contains(taskContent) \u0026\u0026 taskDateMatch(taskFromList, taskDate)) {"},{"lineNumber":545,"author":{"gitId":"yanlynnnnn"},"content":"                    return true;"},{"lineNumber":546,"author":{"gitId":"yanlynnnnn"},"content":"                }"},{"lineNumber":547,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":548,"author":{"gitId":"yanlynnnnn"},"content":"            return false;"},{"lineNumber":549,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":550,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":551,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":552,"author":{"gitId":"yanlynnnnn"},"content":"         * Checks if the date of two tasks are the same. "},{"lineNumber":553,"author":{"gitId":"yanlynnnnn"},"content":"         * @param task "},{"lineNumber":554,"author":{"gitId":"yanlynnnnn"},"content":"         * @param taskDate "},{"lineNumber":555,"author":{"gitId":"yanlynnnnn"},"content":"         * @return true if the date of both tasks matches or the second task does not have a date "},{"lineNumber":556,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":557,"author":{"gitId":"yanlynnnnn"},"content":"        boolean taskDateMatch(Input task, LocalDate taskDate) {"},{"lineNumber":558,"author":{"gitId":"yanlynnnnn"},"content":"            if (taskDate \u003d\u003d null) {"},{"lineNumber":559,"author":{"gitId":"yanlynnnnn"},"content":"                return true;"},{"lineNumber":560,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":561,"author":{"gitId":"yanlynnnnn"},"content":"            if (task.time \u003d\u003d null) {"},{"lineNumber":562,"author":{"gitId":"yanlynnnnn"},"content":"                return false;"},{"lineNumber":563,"author":{"gitId":"yanlynnnnn"},"content":"            } else if (task.time.isEqual(taskDate)) {"},{"lineNumber":564,"author":{"gitId":"yanlynnnnn"},"content":"                return true;"},{"lineNumber":565,"author":{"gitId":"yanlynnnnn"},"content":"            } else {"},{"lineNumber":566,"author":{"gitId":"yanlynnnnn"},"content":"                return false;"},{"lineNumber":567,"author":{"gitId":"yanlynnnnn"},"content":"            }"},{"lineNumber":568,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":569,"author":{"gitId":"yanlynnnnn"},"content":"        "},{"lineNumber":570,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":571,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":572,"author":{"gitId":"yanlynnnnn"},"content":"    /** "},{"lineNumber":573,"author":{"gitId":"yanlynnnnn"},"content":"     * UI class deals with the User Input."},{"lineNumber":574,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":575,"author":{"gitId":"yanlynnnnn"},"content":"    public static class UI {"},{"lineNumber":576,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":577,"author":{"gitId":"yanlynnnnn"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":578,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":579,"author":{"gitId":"yanlynnnnn"},"content":"         * Prints \u0027Loading Error!\u0027 if DukeException is caught while constructing Duke Object."},{"lineNumber":580,"author":{"gitId":"yanlynnnnn"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":581,"author":{"gitId":"yanlynnnnn"},"content":"        /** "},{"lineNumber":582,"author":{"gitId":"yanlynnnnn"},"content":"         * Guides the TaskList based on user command."},{"lineNumber":583,"author":{"gitId":"yanlynnnnn"},"content":"         * "},{"lineNumber":584,"author":{"gitId":"yanlynnnnn"},"content":"         * @throws DukeException"},{"lineNumber":585,"author":{"gitId":"yanlynnnnn"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-A-Assertions"},{"lineNumber":586,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":587,"author":{"gitId":"yanlynnnnn"},"content":"        void showLoadingError() {"},{"lineNumber":588,"author":{"gitId":"yanlynnnnn"},"content":"            System.out.println(\"Loading Error!\");"},{"lineNumber":589,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":590,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":591,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":592,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":593,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yanlynnnnn":589,"-":4}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.geometry.Pos;"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"        "},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"public class Launcher {"},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"    public static void main(String args[]) {"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"}"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":""}],"authorContributionMap":{"yanlynnnnn":18}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yanlynnnnn"},"content":"}"}],"authorContributionMap":{"yanlynnnnn":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"     * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"        @FXML"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"        private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":"        @FXML"},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":"        private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":"        @FXML"},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"        private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"        @FXML"},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"        private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"        private Duke duke;"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":"        private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"yanlynnnnn"},"content":"        private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":30,"author":{"gitId":"yanlynnnnn"},"content":"        @FXML"},{"lineNumber":31,"author":{"gitId":"yanlynnnnn"},"content":"        public void initialize() {"},{"lineNumber":32,"author":{"gitId":"yanlynnnnn"},"content":"            scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlynnnnn"},"content":"        public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"yanlynnnnn"},"content":"            duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"yanlynnnnn"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":38,"author":{"gitId":"yanlynnnnn"},"content":"                    DialogBox.getDukeDialog(\"Welcome to Duke! How may I help you?\", dukeImage)"},{"lineNumber":39,"author":{"gitId":"yanlynnnnn"},"content":"            );"},{"lineNumber":40,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":42,"author":{"gitId":"yanlynnnnn"},"content":"        /**"},{"lineNumber":43,"author":{"gitId":"yanlynnnnn"},"content":"         * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":44,"author":{"gitId":"yanlynnnnn"},"content":"         * the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"yanlynnnnn"},"content":"         */"},{"lineNumber":46,"author":{"gitId":"yanlynnnnn"},"content":"        @FXML"},{"lineNumber":47,"author":{"gitId":"yanlynnnnn"},"content":"        private void handleUserInput() throws UnsupportedEncodingException, Duke.DukeException {"},{"lineNumber":48,"author":{"gitId":"yanlynnnnn"},"content":"            String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"yanlynnnnn"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"yanlynnnnn"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"yanlynnnnn"},"content":"                    DialogBox.getUserDialog(input, userImage),"},{"lineNumber":52,"author":{"gitId":"yanlynnnnn"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":53,"author":{"gitId":"yanlynnnnn"},"content":"            );"},{"lineNumber":54,"author":{"gitId":"yanlynnnnn"},"content":"            userInput.clear();"},{"lineNumber":55,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yanlynnnnn"},"content":""}],"authorContributionMap":{"yanlynnnnn":57}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"\u003c/fx:root\u003e"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":""}],"authorContributionMap":{"yanlynnnnn":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" "},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"                        style\u003d\"-fx-background-size:300 650; -fx-background-repeat: inherit;"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"                        -fx-background-image: url(https://i.pinimg.com/originals/d4/8a/1b/d48a1b6fc83f42ce880856fe88f92b6a.jpg)\"/\u003e"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":"            \u003c/content\u003e"},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":"      \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"    \u003c/children\u003e"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"yanlynnnnn":22}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"import org.junit.Test;"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"    public void dummyTest() {"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"        assertEquals(2,2);"},{"lineNumber":9,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":11,"author":{"gitId":"yanlynnnnn"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"yanlynnnnn"},"content":"    public void todoExceptionTest() throws Duke.DukeException {"},{"lineNumber":13,"author":{"gitId":"yanlynnnnn"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"yanlynnnnn"},"content":"            Duke.TaskList Tasks \u003d new Duke.TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":15,"author":{"gitId":"yanlynnnnn"},"content":"            Tasks.taskTodo(\"todo\");"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"        } catch (Duke.DukeException e) {"},{"lineNumber":17,"author":{"gitId":"yanlynnnnn"},"content":"            assertEquals(\"OOPS!!! The description of a todo cannot be empty.\", e.msg);"},{"lineNumber":18,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":21,"author":{"gitId":"yanlynnnnn"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"yanlynnnnn"},"content":"    public void deadlineExceptionTest() throws Duke.DukeException {"},{"lineNumber":23,"author":{"gitId":"yanlynnnnn"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"yanlynnnnn"},"content":"            Duke.TaskList Tasks \u003d new Duke.TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":25,"author":{"gitId":"yanlynnnnn"},"content":"            Tasks.taskDeadline(\"deadline\");"},{"lineNumber":26,"author":{"gitId":"yanlynnnnn"},"content":"        } catch (Duke.DukeException e) {"},{"lineNumber":27,"author":{"gitId":"yanlynnnnn"},"content":"            assertEquals(\"OOPS!!! The description of a deadline cannot be empty.\", e.msg);"},{"lineNumber":28,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":31,"author":{"gitId":"yanlynnnnn"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"yanlynnnnn"},"content":"    public void parserExceptionTest() throws Duke.DukeException {"},{"lineNumber":33,"author":{"gitId":"yanlynnnnn"},"content":"        try { "},{"lineNumber":34,"author":{"gitId":"yanlynnnnn"},"content":"            Duke.Parser testParser \u003d new Duke.Parser(\"blah\", new Duke.TaskList());"},{"lineNumber":35,"author":{"gitId":"yanlynnnnn"},"content":"            testParser.parse();"},{"lineNumber":36,"author":{"gitId":"yanlynnnnn"},"content":"        } catch (Duke.DukeException e) {"},{"lineNumber":37,"author":{"gitId":"yanlynnnnn"},"content":"            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.msg);"},{"lineNumber":38,"author":{"gitId":"yanlynnnnn"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"yanlynnnnn"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":41,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":42,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":43,"author":{"gitId":"yanlynnnnn"},"content":"    "},{"lineNumber":44,"author":{"gitId":"yanlynnnnn"},"content":"}"},{"lineNumber":45,"author":{"gitId":"yanlynnnnn"},"content":""}],"authorContributionMap":{"yanlynnnnn":45}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yanlynnnnn"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"yanlynnnnn"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"yanlynnnnn"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"yanlynnnnn"},"content":"list"},{"lineNumber":5,"author":{"gitId":"yanlynnnnn"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"yanlynnnnn"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"yanlynnnnn"},"content":"list"},{"lineNumber":8,"author":{"gitId":"yanlynnnnn"},"content":"bye"}],"authorContributionMap":{"yanlynnnnn":8}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"yanlynnnnn"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"yanlynnnnn"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT | cat -t"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"yanlynnnnn":2,"-":36}}]
