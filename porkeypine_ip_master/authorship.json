[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 17,
      "-": 45
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "T/1/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "E/1//2020-09-23"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "D/0/read book/2020-09-23"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "T/0/basldkjfalsd"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "T/0/testing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "E/0/blahblah/2020-09-23"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "D/0/aksdjfalkdsf/2020-09-23"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 8
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Welcome to Duke Task Manager 2.0, the tired, sarcastic, done-with-life version "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "that encourages you to be your worst self! Enjoy :)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "* TOC "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. Download the latest `duke.jar` from [here](https://github.com/porkeypine/ip/releases/tag/A-Release)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your `Duke`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "![Image of Ui](StartUi.PNG)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "5. Type a command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "   See below for the commands you can try."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "## Features \u0026 Usage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### Summary of Commands"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Feature | Command | Example Usage |"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|--------|---------|---------------|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Adding Todo task|`todo \u003cdescription\u003e`|`todo submit 2103t ip`|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Adding Deadline task|`deadline \u003cdescription\u003e /by \u003cdate\u003e`|`deadline return book /by 2020-09-23`|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Adding Event task|`event \u003cdescription\u003e /at \u003cdate\u003e`|`event party /at 2020-09-30`|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Listing all tasks|`list`|`list`|"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Marking task as done|`done \u003ctask number\u003e`|`done 1`|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Deleting a task|`delete \u003ctask number\u003e`|`delete 1`|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Finding all tasks with `keyword`|`find \u003ckeyword\u003e`|`find party`|"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Updating a task\u0027s description|`update \u003ctask number\u003e \u003cnew description\u003e`|`update 3 New Years\u0027 Party`|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "|Exiting app|`bye / toodles / sayonara / farewell`|`toodles`|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `todo \u003cdescription\u003e` - Add Todo task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Adds a new Todo item to current list of tasks, with description as specified."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`todo submit 2103t ip`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You\u0027re making me feel tired... But if you insist, I\u0027ve added this:`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "[T][:(] submit 2103t ip"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You now have 1 thing in your list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `deadline \u003cdescription\u003e /by \u003cdate\u003e` - Add Deadline task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Adds a new Deadline item to current list of tasks, with description and date as specified."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Date must be in YYYY-MM-DD format.*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`deadline return book /by 2020-09-30`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You\u0027re making me feel tired... But if you insist, I\u0027ve added this:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "[D][:(] return book (by: WEDNESDAY, Sep 30 2020)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You now have 2 things in your list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `event \u003cdescription\u003e /at \u003cdate\u003e` - Add Event task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Adds a new Event item to current list of tasks, with description and date as specified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Date must be in YYYY-MM-DD format.*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`event party /at 2020-09-23`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You\u0027re making me feel tired... But if you insist, I\u0027ve added this:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "[E][:(] party (at: WEDNESDAY, Sep 23 2020)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You now have 3 things in your list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `list` - List all tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Displays a list of all tasks currently existing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. [T][:(] submit 2103t ip"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "2. [D][:(] return book (by: WEDNESDAY, Sep 30 2020)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "3. [E][:(] party (at: WEDNESDAY, Sep 23 2020)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "I wouldn\u0027t bother about them if I were you."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You now have 3 things in your list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `done \u003ctask number\u003e` - Mark a task as done"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Marks as done the task specified by the task number."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Numbering is as shown with a `list` command.*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Oh goody... You actually accomplished something!!!"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "  [T][:)] submit 2103t ip"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `delete \u003ctask number\u003e` - Delete a task"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Deletes a task from current list of tasks, as specified by the task number."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Numbering is as shown with a `list` command.*"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Oh, getting lazy are we? I approved. I\u0027ve removed this:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "  [T][:)] submit 2103t ip"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "You now have 2 things in your list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `find \u003ckeyword\u003e` - Find tasks related to `keyword`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Gives a list of tasks that contain `keyword` in their description."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`find party`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "1. [E][:(] party (at: WEDNESDAY, Sep 23 2020)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "I wouldn\u0027t bother about them if I were you."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `update \u003ctask number\u003e \u003cnew description\u003e` - Update description of a task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Updates the description of a task (as specified by `task number`) to `new description`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "*Numbering is as shown with a `list` command.*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`update 2 New Years\u0027 Party`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Donezorimasu. Your task is now:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " [E][:(] New Years\u0027 Party (at: WEDNESDAY, Sep 23 2020)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "### `bye / toodles / sayonara / farewell` - Exit app"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Exits the app and saves current list of tasks."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "`toodles`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "Finally... don\u0027t come back if you can possibly help it, please."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**Q:** How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "**A:** Install the app in the other computer and overwrite the empty data file it creates in "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "the data folder with the file that contains the data of your previous `Duke` app."
      }
    ],
    "authorContributionMap": {
      "porkeypine": 174,
      "-": 20
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 duke.command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "@rem Get duke.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "@rem Slurp the duke.command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "@rem Setup the duke.command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 4,
      "-": 99
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Initialises a Duke object that contains a \u003ccode\u003etaskList\u003c/code\u003e and \u003ccode\u003estorage\u003c/code\u003e object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Each run of this app should only use one Duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @author Hui Ling"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @version 2.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @see Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Constructor that creates a \u003ccode\u003eDuke\u003c/code\u003e object with a \u003ccode\u003eStorage\u003c/code\u003e object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * using the file path \"data/tasks.txt\" relative to working directory,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and a \u003ccode\u003etaskList\u003c/code\u003e loaded by \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList \u003d storage.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Generates a response to user input by parsing the input into a \u003ccode\u003eCommand\u003c/code\u003e and executing it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param input  user text input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return       a String of the Duke\u0027s response"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (c.isExit()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                closeApp();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return c.execute(taskList, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private void closeApp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // exits the JavaFX app after 1 second, so that user can see the goodbye message first"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        CompletableFuture.delayedExecutor(1, TimeUnit.SECONDS).execute(() -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 62,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * A launcher class to work around classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Serves as an entry point into our JavaFX application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 33
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.TerminationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.InvalidTaskException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Makes sense of user input and parses it into appropriate \u003ccode\u003eCommand\u003c/code\u003es."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @author Hui Ling"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * String constants for accepted commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_UPDATE \u003d \"update\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final Set\u003cString\u003e COMMANDS_TERMINATION \u003d new HashSet\u003cString\u003e("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Arrays.asList(\"bye\", \"toodles\", \"farewell\", \"sayonara\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static final Set\u003cString\u003e COMMANDS_NON_TERMINATION \u003d new HashSet\u003cString\u003e("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Arrays.asList(COMMAND_LIST, COMMAND_DONE, COMMAND_TODO, COMMAND_DEADLINE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                    COMMAND_EVENT, COMMAND_DELETE, COMMAND_UPDATE, COMMAND_FIND));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Sole constructor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected Parser() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns the command type of a user input string by taking the first word."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param userInput  entire user input string as-is"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return a String that indicates command type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private static String getCommandType(String userInput) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return userInput.contains(\" \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                ? userInput.split(\" \")[0]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                : userInput;  // for \"list\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Parses user input string and returns a \u003ccode\u003eCommand\u003c/code\u003e of type corresponding to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * the first word of the input string. Also separates all relevant fields like"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * task description, task number and date (if any) in the input string,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * to put them into the constructor of the \u003ccode\u003eCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param userInput  entire user input string as-is"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return a \u003ccode\u003eCommand\u003c/code\u003e of a certain type"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws InvalidTaskException  if command type is not recognised"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws InvalidInputException if user input does not have the required fields for its command type"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected static Command parse(String userInput) throws InvalidTaskException, InvalidInputException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String commandType \u003d getCommandType(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (commandType.equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // list is the only duke.command that takes only one word and nothing after a space"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (COMMANDS_TERMINATION.contains(commandType)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return new TerminationCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!COMMANDS_NON_TERMINATION.contains(commandType)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // valid duke.command that is not list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!userInput.contains(\" \")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Did you put your task info after a space?\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // take the part of the duke.command without commandType"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String info \u003d userInput.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_DONE:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                int taskNumber \u003d parseInt(info) - 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Specify the task number correctly.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_TODO:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new TodoCommand(info);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Did you put your task after a space?\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_EVENT:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String[] descAndDate \u003d info.split(\" /at \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new EventCommand(descAndDate[0], LocalDate.parse(descAndDate[1]));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Format for dates is yyyy-mm-dd. \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        + \"Also, did you put a task before and date after \u0027 /at \u0027?\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String[] descAndDate \u003d info.split(\" /by \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new DeadlineCommand(descAndDate[0], LocalDate.parse(descAndDate[1]));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Format for dates is yyyy-mm-dd. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        + \"Also, did you put a task before and deadline after \u0027 /by \u0027?\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new DeleteCommand(parseInt(info) - 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Specify the task number correctly.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_UPDATE:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String[] numberAndDesc \u003d info.split(\" \", 2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                int taskNumber \u003d parseInt(numberAndDesc[0]) - 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                String newTaskDesc \u003d numberAndDesc[1];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new UpdateCommand(taskNumber, newTaskDesc);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Did you put a task number and a new description \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                        + \"separated by a space?\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        case COMMAND_FIND:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                return new FindCommand(info);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidInputException(\"Somehow your input is wrong.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 153
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Deals with loading tasks from a file and saving tasks into the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @author Hui Ling"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * File path of the data file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Constructs a \u003ccode\u003eStorage\u003c/code\u003e object with specified \u003ccode\u003efilePath\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param filePath  file path to data file relative to working directory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Checks if there exists a file at \u003ccode\u003efilePath\u003c/code\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and creates one if it doesn\u0027t exist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws IOException  if file or directories along the path cannot be created"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private void checkOrCreateFile() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Path fp \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Path parentFolder \u003d fp.getParent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        File dataDir \u003d parentFolder.toFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            dataDir.mkdirs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns a \u003ccode\u003eTaskList\u003c/code\u003e of tasks line-by-line from the file at this"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * \u003ccode\u003eStorage\u003c/code\u003e object\u0027s \u003ccode\u003efilePath\u003c/code\u003e. Tasks can be of type \u003ccode\u003eTodo\u003c/code\u003e,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * \u003ccode\u003eDeadline\u003c/code\u003e or \u003ccode\u003eEvent\u003c/code\u003e, and will be marked as done or undone."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return TaskList generated by file at \u003ccode\u003efilePath\u003c/code\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws IOException           if file cannot be found or opened"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws InvalidTaskException  if command type of a line is not recognised"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private TaskList loadInputFromFile() throws IOException, InvalidTaskException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (line.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // dissect info of a task contained in one line"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String[] info \u003d line.split(\"/\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String taskType \u003d info[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            boolean isDone \u003d (parseInt(info[1]) \u003d\u003d 1);  // 1 stands for done, 0 for undone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String description \u003d info[2];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Todo todo \u003d new Todo(description, isDone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                tl.addTask(todo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, LocalDate.parse(info[3]), isDone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                tl.addTask(deadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                Event event \u003d new Event(description, LocalDate.parse(info[3]), isDone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                tl.addTask(event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                throw new InvalidTaskException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /** Creates a file at this \u003ccode\u003eStorage\u003c/code\u003e object\u0027s \u003ccode\u003efilePath\u003c/code\u003e if necessary,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a \u003ccode\u003eTaskList\u003c/code\u003e of tasks described line-by-line in that file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Essentially, the initialisation function for Duke\u0027s \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called when initialising Duke\u0027s \u003ccode\u003etaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return TaskList generated from file at \u003ccode\u003efilePath\u003c/code\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws IOException           if file cannot be created or opened"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws InvalidTaskException  if command type of a line is not recognised"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TaskList load() throws IOException, InvalidTaskException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        checkOrCreateFile();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return loadInputFromFile();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Saves the tasks from the given \u003ccode\u003eTaskList\u003c/code\u003e into the file at \u003ccode\u003efilePath\u003c/code\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * in the specific format read by \u003ccode\u003eloadInputFromFile\u003c/code\u003e, so as to"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * preserve the \u003ccode\u003etaskList\u003c/code\u003e for when Duke is next run."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called right before the app is closed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskList      list of tasks of Duke object right before app closes"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws IOException  if file at \u003ccode\u003efilePath\u003c/code\u003e cannot be found or written to"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            writer.write(\"\\n\" + taskList.getTask(i).saveToFile());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 138
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Deals with the text output that users will see, that is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * the character lines corresponding to various \u003ccode\u003eCommand\u003c/code\u003es."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @author Hui Ling"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * All character lines except the ones for specific tasks and exceptions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private enum Speech {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        GREETING(\"My name? You don\u0027t need to know that. Stop bothering me already... \"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        BYE(\"Finally... don\u0027t come back if you can possibly help it, please.\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        LIST(\"\\nI wouldn\u0027t bother about them if I were you.\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        DONE(\"Oh goody... You actually accomplished something!!\\n  \"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ADD(\"You\u0027re making me feel tired... But if you insist, I\u0027ve added this:\\n  \"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        DELETE(\"Oh, getting lazy are we? I approve. I\u0027ve removed this:\\n  \"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        UPDATEDTASK(\"Donezorimasu. Your task is now:\\n  \"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        LOADINGERROR(\"Something went wrong when loading the data file. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + \"\\nGuess you\u0027ll be starting from zero.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        private final String line;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Speech(String line) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            this.line \u003d line;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns welcome character line."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called when Duke app first starts up."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return a String of the welcome message when user starts Duke app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showWelcome() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return Speech.GREETING.line;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns goodbye character line when Duke app is closing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called by a \u003ccode\u003eTerminationCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return a String of the goodbye message when user terminates Duke app"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showGoodbye() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return Speech.BYE.line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns character line for adding tasks with the added task as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called when a new \u003ccode\u003eTask\u003c/code\u003e is added by a \u003ccode\u003eTodoCommand\u003c/code\u003e,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * \u003ccode\u003eDeadlineCommand\u003c/code\u003e or \u003ccode\u003eEventCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param t new task added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return  a \u003ccode\u003eString\u003c/code\u003e combining the \"adding tasks\" character line and the new task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showAddTask(Task t) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Speech.ADD.line + \"\\n\" + t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns character line for completing a task with the done task as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called when a task is marked as done by a \u003ccode\u003eDoneCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param t task to be marked as done"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return  a String combining the \"completed a task\" character line and the done task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showDoneTask(Task t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Speech.DONE.line + t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns character line for deleting a task with the to-be-deleted task as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called when a task is deleted by a \u003ccode\u003eDeleteCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param t task to be deleted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return  a String combining the \"deleting a task\" character line and the to-be-deleted task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showDeleteTask(Task t) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Speech.DELETE.line + t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns character line for updating a task with the newly updated task as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called when a task is updated by an \u003ccode\u003eUpdateCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param t updated task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return  a String combining the \"updating a task\" character line and the newly updated task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showUpdateTask(Task t) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Speech.UPDATEDTASK.line + t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns a line describing the number of tasks left in a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskList  Duke\u0027s current list of tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return          a String describing the number of tasks left in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showNumberOfTasksLeft(TaskList taskList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        int length \u003d taskList.getSize();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (\"\\n\\nYou now have \" + length"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + (length \u003d\u003d 1 ? \" thing\" : \" things\") + \" in your list\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns character line for when there\u0027s a problem"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * loading the data file into a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called by \u003ccode\u003eDuke\u003c/code\u003e\u0027s constructor when an exception is thrown."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return a String of the character line in response to failure initialising Duke"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showLoadingError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return Speech.LOADINGERROR.line;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns character line for listing all tasks, together with a numbered list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * of all the tasks in a given \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Called by \u003ccode\u003eListCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskList  Duke\u0027s current list of tasks"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return          a String showing all tasks in the \u003ccode\u003etaskList\u003c/code\u003e and a character line"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static String showAllTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            s +\u003d (i + 1 + \". \" + taskList.getTask(i) + \"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        s +\u003d Speech.LIST.line;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 138
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Contains the logic for executing commands of different types,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * such as adding a \u003ccode\u003eTask\u003c/code\u003e to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Subclasses of \u003ccode\u003eCommand\u003c/code\u003e may have fields containing required information like the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * task description for adding a \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Command() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Returns a boolean indicating whether the app should close."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return  \u003ccode\u003etrue\u003c/code\u003e for \u003ccode\u003eTerminationCommand\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Deals with the logic behind any user command,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * calling the relevant method(s) from \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returning the relevant message from \u003ccode\u003eUi\u003c/code\u003e class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskList  Duke\u0027s current list of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param storage   Duke\u0027s initialised \u003ccode\u003eStorage\u003c/code\u003e object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e of character lines and tasks depending on type of \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @throws DukeException  if user input is wrong, like task number is not within range of taskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public abstract String execute(TaskList taskList, Storage storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throws DukeException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 35
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for adding a new \u003ccode\u003eDeadline\u003c/code\u003e task to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    LocalDate by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DeadlineCommand(String desc, LocalDate by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Deadline deadline \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Ui.showAddTask(deadline) + Ui.showNumberOfTasksLeft(taskList));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for deleting a specified \u003ccode\u003eTask\u003c/code\u003e from the \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String s \u003d Ui.showDeleteTask(taskList.getTask(taskNumber));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            s +\u003d Ui.showNumberOfTasksLeft(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // index out of range of taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Task does not exist\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 33
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for marking a specified \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            taskList.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return Ui.showDoneTask(taskList.getTask(taskNumber));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // index out of range of taskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"Task does not exist\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 31
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for adding a new \u003ccode\u003eEvent\u003c/code\u003e task to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    LocalDate at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public EventCommand(String desc, LocalDate at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Event event \u003d new Event(desc, at);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Ui.showAddTask(event) + Ui.showNumberOfTasksLeft(taskList));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 31
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for finding tasks that contain a specified keyword within a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList foundTasks \u003d taskList.find(keyword);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return Ui.showAllTasks(foundTasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for listing all tasks in a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public ListCommand() {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Ui.showAllTasks(taskList) + Ui.showNumberOfTasksLeft(taskList));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 20
    }
  },
  {
    "path": "src/main/java/duke/command/TerminationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for terminating or stopping the app,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * which includes saving the current taskList to data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TerminationCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TerminationCommand() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return Ui.showGoodbye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new DukeException(\"Something went wrong saving the tasks to data file\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 29
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for adding a new \u003ccode\u003eTodo\u003c/code\u003e task to a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String desc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TodoCommand(String desc) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Todo todo \u003d new Todo(desc);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (Ui.showAddTask(todo) + Ui.showNumberOfTasksLeft(taskList));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 27
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Command for updating the description of a specified task in a \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    String newTaskDesc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public UpdateCommand(int taskNumber, String newTaskDesc) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.newTaskDesc \u003d newTaskDesc;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String execute(TaskList taskList, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            Task updatedTask \u003d taskList.updateTaskDesc(taskNumber, newTaskDesc);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            return Ui.showUpdateTask(updatedTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            throw new InvalidInputException(\"The task you specified does not exist.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 33
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public DukeException(String e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(e);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 7
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public InvalidInputException(String e) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(\"There\u0027s something wrong with your input for this... \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + \"Sigh, life is tough.\\n\\n\" + e);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 10
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public InvalidTaskException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(\"Did you make up a task type? I don\u0027t understand what you mean...\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 9
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        dialog.setFont(Font.font(\"Consolas\", 12));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        db.setStyle(\"-fx-background-color: #DBF3FA\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        db.setStyle(\"-fx-background-color: #F5FCFF\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 66
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Encapsulates information for the Deadline type of \u003ccode\u003eTask\u003c/code\u003e,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * which has a task description, date, and status of done or undone."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Deadline(String description, LocalDate by, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.getDayOfWeek() + \", \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"D/\" + super.saveToFile() + \"/\" + by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Encapsulates information for the Event type of \u003ccode\u003eTask\u003c/code\u003e,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * which has a task description, date, and status of done or undone."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Event(String description, LocalDate at, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.getDayOfWeek() + \", \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"E/\" + super.saveToFile() + \"/\" + at;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Encapsulates information for a task -- a \u003ccode\u003eTodo, Deadline\u003c/code\u003e or \u003ccode\u003eEvent\u003c/code\u003e and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * contains operations for marking it as done, editing its description, and generating it as a String"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * for display or saving to data file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * @author Hui Ling"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Constructor for new tasks created by user input when the app is running,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * sets \u003ccode\u003eisDone\u003c/code\u003e as false by default."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param description  task description or name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    // Use of second constructor learnt from Lim Jia Rui Ryan\u0027s IP"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Constructor for tasks loaded in from data file,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * where it\u0027s known whether the task is done or not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param description  task description or name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param isDone       true if task is done, false if not"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Changes \u003ccode\u003eisDone\u003c/code\u003e boolean to \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void editDescription(String newDesc) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        this.description \u003d newDesc;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return (isDone ? \":)\" : \":(\"); //return tick or X symbols"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Represents the \u003ccode\u003eTask\u003c/code\u003e as a \u003ccode\u003eString\u003c/code\u003e in the specific format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * for saving to data file, such that it can be read by \u003ccode\u003eStorage\u003c/code\u003e\u0027s"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * \u003ccode\u003eloadInputFromFile\u003c/code\u003e method after the app is closed and run again."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return  a String representing the task in the format for saving to data file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return isDone ? \"1/\" : \"0/\" + description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 67
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Contains Duke\u0027s list of tasks and operations for adding, deleting, updating,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * finding, and marking as done tasks in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * List of \u003ccode\u003eTask\u003c/code\u003es"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Adds a given \u003ccode\u003eTask\u003c/code\u003e to the \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param t task to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Deletes a specified task from the \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskNumber index of the task to be deleted in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.remove(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Updates the description of a specified task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskNumber  index of the task to be updated in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param newTaskDesc new description to update the task to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return            the edited task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task updateTaskDesc(int taskNumber, String newTaskDesc) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Task taskToBeEdited \u003d taskList.get(taskNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskToBeEdited.editDescription(newTaskDesc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Marks a specified task as done by calling the \u003ccode\u003eTask\u003c/code\u003e method \u003ccode\u003emarkAsDone\u003c/code\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param taskNumber  index of the task to be updated in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        taskList.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * Searches for all tasks whose description contains a specified keyword,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * and returns a \u003ccode\u003eTaskList\u003c/code\u003e of all those tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @param keyword  the String used to search for tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     * @return         a list of tasks with descriptions containing \u003ccode\u003ekeyword\u003c/code\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList foundTasks \u003d new TaskList(); // to be returned"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        // process the keyword to make it easier to match"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        String searchTerm \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            // process the task\u0027s string to make it easier to match"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            String processedTaskString \u003d t.toString().toLowerCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            if (processedTaskString.contains(searchTerm)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                foundTasks.addTask(t);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 92
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * Encapsulates information for the Todo type of \u003ccode\u003eTask\u003c/code\u003e,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " * which only has a task description and status of done or undone."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    public String saveToFile() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        return \"T/\" + super.saveToFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 25
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Whee\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" minHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 19
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void isExit_normalDeadline_falseReturned() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(false, new DeadlineCommand(\"deadline1\", LocalDate.parse(\"2020-09-23\")).isExit());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 16
    }
  },
  {
    "path": "src/test/java/duke/command/TerminationCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.command.TerminationCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TerminationCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void isExit_normalTermination_trueReturned() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(true, new TerminationCommand().isExit());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 13
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void getSize_normalInput_success() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(0, tasks.getSize());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Todo(\"todo1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Deadline(\"deadline1\", LocalDate.parse(\"2020-09-23\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(2, tasks.getSize());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Event(\"event1\", LocalDate.parse(\"2020-10-22\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(3, tasks.getSize());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "porkeypine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    void getTask_normalInput_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Todo(\"todo1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline1\", LocalDate.parse(\"2020-09-23\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        tasks.addTask(new Event(\"event1\", LocalDate.parse(\"2020-10-22\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "        assertEquals(deadline, tasks.getTask(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "blah"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "porkeypine"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "porkeypine": 10
    }
  }
]
