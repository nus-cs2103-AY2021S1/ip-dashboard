[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Deadline(String description, String by) throws WrongFormatException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[D]\", \"deadline\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 14
    }
  },
  {
    "path": "src/main/java/DeadlineWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeadlineWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeadlineWrongFormatException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"deadline\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \"description of a task in the \" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"following format:\\ntask /by deadline.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/DeleteWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteWrongFormatException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"delete\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \"single whitespace and an integer\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 11
    }
  },
  {
    "path": "src/main/java/DoneWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DoneWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DoneWrongFormatException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"done\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \"single whitespace and an integer\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 11
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Serves as a chat bot. Duke can keep a record of user\u0027s inputs as a list of"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * tasks, mark them as completed when they are done, and show the user the list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * of tasks upon request."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Star Bot\u0027s logo shown upon start up"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String LOGO \u003d \"     _______.___________.    ___     \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \" .______      \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"    /       |           |   /   \\\\     |   _  \\\\     \\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"   |   (----`---|  |----`  /  ^  \\\\    |  |_)  |    \\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"    \\\\   \\\\       |  |      /  /_\\\\  \\\\   |      /     \\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \".----)   |      |  |     /  _____  \\\\  |  |\\\\  \\\\----.\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"|_______/       |__|    /__/     \\\\__\\\\ | _| `._____|\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"                                                   \\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         .______     ______   .___________.        \\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |   _  \\\\   /  __  \\\\  |           |        \\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |  |_)  | |  |  |  | `---|  |----`        \\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |   _  \u003c  |  |  |  |     |  |             \\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |  |_)  | |  `--\u0027  |     |  |             \\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |______/   \\\\______/      |__|             \\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"                                                   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Divider that delineates Star Bot\u0027s replies"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Stores user\u0027s tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        System.out.println(LOGO + \"\\nHello, I\u0027m Star Bot! What can I do for \" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"you?\\nSay \\\"bye\\\" to exit.\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        while (sc.hasNextLine()) { // Duke takes in user input indefinitely"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // until the user says \"bye\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] splitLine \u003d line.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                if (line.equals(\"bye\")) { // Exit the program"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.out.println(botReply(\"Goodbye, see you again soon!\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                            \" :)\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (line.equals(\"list\")) { // List out task list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.out.println(botReply(printList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (splitLine[0].equals(\"done\")) { // Done with a task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        if (splitLine.length !\u003d 2) { // If command is in a wrong"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                            // format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                            throw new DoneWrongFormatException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        int taskIndex \u003d Integer.parseInt(splitLine[1]) - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // Index of task in the task list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        Task completedTask \u003d taskList.get(taskIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        completedTask.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        System.out.println(botReplyForDoneTask(completedTask));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (NumberFormatException e) { // Second argument of"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // command was not a number, e.g. \"done X\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new DoneWrongFormatException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) { // User requests"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // for a task with an index not within the current"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // task list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new TaskIndexOutOfBoundsException(splitLine[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (splitLine[0].equals(\"delete\")) { // Delete a task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        if (splitLine.length !\u003d 2) { // If command is in a wrong"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                            // format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                            throw new DeleteWrongFormatException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        int taskIndex \u003d Integer.parseInt(splitLine[1]) - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // Index of task in the task list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        Task removedTask \u003d taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        System.out.println(botReplyForDeleteTask(removedTask));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (NumberFormatException e) { // Second argument of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // command was not a number, e.g. \"delete X\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new DeleteWrongFormatException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) { // User requests"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // for a task with an index not within the current"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        // task list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new TaskIndexOutOfBoundsException(splitLine[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (splitLine[0].equals(\"todo\")) { // Add To-Do task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        Task newTask \u003d new ToDo(line.substring(5).trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        System.out.println(botReplyForAddTask(newTask));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (IndexOutOfBoundsException | WrongFormatException e)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    { // Command is in a wrong format"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new TodoWrongFormatException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (splitLine[0].equals(\"event\")) { // Add Event task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        String[] splitLineIntoTwo \u003d line.split(\"/at\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        Task newTask \u003d new Event(splitLineIntoTwo[0]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                                .substring(6).trim(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                                splitLineIntoTwo[1].trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        System.out.println(botReplyForAddTask(newTask));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (IndexOutOfBoundsException | WrongFormatException e)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    { // Command is in a wrong format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new EventWrongFormatException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else if (splitLine[0].equals(\"deadline\")) { // Add Deadline"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        String[] splitLineIntoTwo \u003d line.split(\"/by\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        Task newTask \u003d new Deadline(splitLineIntoTwo[0]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                                .substring(9).trim(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                                splitLineIntoTwo[1].trim());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        System.out.println(botReplyForAddTask(newTask));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    } catch (IndexOutOfBoundsException | WrongFormatException e)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    { // Command is in a wrong format"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        throw new DeadlineWrongFormatException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } else { // Unknown command entered"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    throw new UnknownCommandException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.out.println(botReply(e.defaultErrorMessage()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Standardises the look of Star Bot\u0027s replies by wrapping it in"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * dividers"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static String botReply(String reply) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return DIVIDER + reply + \"\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static String botReplyForAddTask(Task newTask) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return botReply(\"Got it. I\u0027ve added this task:\\n\" + newTask + \"\\nNow \" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static String botReplyForDoneTask(Task doneTask) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return botReply(\"Nice! I\u0027ve marked this task as done:\\n\" + doneTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static String botReplyForDeleteTask(Task removedTask) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return botReply(\"Noted. I\u0027ve removed this task:\\n\" + removedTask +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the task list to be shown to the user"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static String printList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the tasks in your \" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"list:\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            result.append(\"\\n\").append(index++).append(\".\").append(task);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "shawn-nyk": 169
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return \"OOPS!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Event(String description, String at) throws WrongFormatException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[E]\", \"event\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 14
    }
  },
  {
    "path": "src/main/java/EventWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EventWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EventWrongFormatException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"event\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \"description of a task in the \" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"following format:\\nevent /at time.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a to-do list type of task for the Duke program. A task is"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * inclusive of a textual description and a boolean flag to mark whether it has"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * been completed or not."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String description; // Describes the task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected boolean isDone; // Marks whether the task is completed or not"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String taskTypeSymbol; // [T], [D] or [E]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String taskTypeName; // To-Do, Deadline or Event task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task(String description, String taskTypeSymbol, String taskTypeName)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throws WrongFormatException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new WrongFormatException(taskTypeName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.taskTypeSymbol \u003d taskTypeSymbol;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.taskTypeName \u003d taskTypeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskTypeSymbol + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 35
    }
  },
  {
    "path": "src/main/java/TaskIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskIndexOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskIndexOutOfBoundsException(String index) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \" There is no task no. \" + index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ToDo(String description) throws WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[T]\", \"todo\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 6
    }
  },
  {
    "path": "src/main/java/TodoWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TodoWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TodoWrongFormatException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"todo\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \"description of a task.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 11
    }
  },
  {
    "path": "src/main/java/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \" I\u0027m sorry, but I \" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"don\u0027t know what that means :(\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 8
    }
  },
  {
    "path": "src/main/java/WrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class WrongFormatException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    String commandName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public WrongFormatException(String commandName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String defaultErrorMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.defaultErrorMessage() + \" The \" + commandName + \" \" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"command has to be followed by a\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todooo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco /at"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event /at Orchard Rd"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco /at Orchard Rd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline /by tomorrow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by tomorrow"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 99"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 21"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 34
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "shawn-nyk": 4
    }
  }
]
