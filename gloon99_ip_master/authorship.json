[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"# shiro project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _shiro_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"1. After the importing is complete, locate the `src/main/java/shiro.java` file, right-click it, and choose `Run shiro.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"gloon99":3,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"    mainClassName \u003d \"shiro.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"    archiveBaseName \u003d \"shiro\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gloon99":18,"-":43}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"T | 0 | read book"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":"D | 0 | return book | 2020-09-20"}],"authorContributionMap":{"gloon99":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"# Shiro: User Guide"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"Shiro is a chat-bot cum task manager that the user can interact with via a command-line interface."},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"There are three types of tasks currently supported by Shiro:"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"* ToDos: tasks with no specific date"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"* Deadlines: tasks with a specified due date"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"* Events: tasks with a specified date of occurrence"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"I customized it with the theme of my favourite cartoon: Sumikko Gurashi!"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"![GitHub Logo](Ui.png)"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"1. `help`: provides a list of possible commands"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"2. `list`: shows the list of tasks"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"3. Add tasks"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"\t1. `todo`: creates a todo task with specific description"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"\t2. `deadline`: creates a deadline task with specific description and date"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"\t3. `event`: creates an event task with specific description and date"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"4. `done`: marks a task as complete"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"5. `delete`: deletes a task from the list"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"6. `clear`: deletes all tasks from the list"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"7. `find`: shows task(s) which match the query string"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"8. `view`: shows task(s) due on the given date"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"9. `bye`: ends the conversation with Shiro"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"### 1. `help`"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"This command shows a list of all possible commands that Shiro can recognize."},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"`help`"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"`help`"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"available commands are:"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"  1. list"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"  2. todo \u003cdescription\u003e"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"  3. deadline \u003cdescription\u003e /by \u003cdate\u003e"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"  4. event \u003cdescription\u003e /at \u003cdate\u003e"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"  5. done \u003ctask_number\u003e"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"  6. delete \u003ctask_number\u003e"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"  7. clear"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"  8. find \u003ckeyword\u003e"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"  9. view \u003cdate\u003e"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":" 10. bye"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"### 2. `list`"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"This command shows the entire list of tasks."},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"`list`"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"`list`"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"okies! here are the tasks in your list:"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":"1. [T][✘] read book"},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"2. [D][✘] return book (by: Sep 14 2020)"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"3. [E][✘] project meeting (at: Sep 15 2020)"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"### 3.i. `todo`"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"This command adds a *todo* task to the list."},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"`todo \u003cdescription\u003e`"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":75,"author":{"gitId":"gloon99"},"content":"`todo read book`"},{"lineNumber":76,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":77,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":78,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":79,"author":{"gitId":"gloon99"},"content":"sure thing! i have added the following task to your list:"},{"lineNumber":80,"author":{"gitId":"gloon99"},"content":"    [T][✘] read book"},{"lineNumber":81,"author":{"gitId":"gloon99"},"content":"you have [1] task(s) in your list"},{"lineNumber":82,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":83,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":84,"author":{"gitId":"gloon99"},"content":"### 3.ii. `deadline`"},{"lineNumber":85,"author":{"gitId":"gloon99"},"content":"This command adds a *deadline* task to the list."},{"lineNumber":86,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":87,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":88,"author":{"gitId":"gloon99"},"content":"`deadline \u003cdescription\u003e /by \u003cdate\u003e`"},{"lineNumber":89,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":90,"author":{"gitId":"gloon99"},"content":"`\u003cdate\u003e` can either be in the format `\u003cyyyy-mm-dd\u003e` or `\u003cday\u003e`."},{"lineNumber":91,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":92,"author":{"gitId":"gloon99"},"content":"`\u003cday\u003e` should only consist the first three letters of the day of week."},{"lineNumber":93,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":94,"author":{"gitId":"gloon99"},"content":"For the usage of `\u003cday\u003e`, the date used will be the next specified day of week in the calendar."},{"lineNumber":95,"author":{"gitId":"gloon99"},"content":"If the day provided is the same as the current day of week, "},{"lineNumber":96,"author":{"gitId":"gloon99"},"content":"the date of the next specified day of week in the calendar will also be used, "},{"lineNumber":97,"author":{"gitId":"gloon99"},"content":"instead of the current date."},{"lineNumber":98,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":99,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":100,"author":{"gitId":"gloon99"},"content":"`deadline return book /by 2020-09-20`"},{"lineNumber":101,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":102,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":103,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":104,"author":{"gitId":"gloon99"},"content":"sure thing! i have added the following task to your list:"},{"lineNumber":105,"author":{"gitId":"gloon99"},"content":"    [D][✘] return book (by: Sep 20 2020)"},{"lineNumber":106,"author":{"gitId":"gloon99"},"content":"you have [1] task(s) in your list"},{"lineNumber":107,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":108,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":109,"author":{"gitId":"gloon99"},"content":"### 3.iii. `event`"},{"lineNumber":110,"author":{"gitId":"gloon99"},"content":"This command adds an *event* task to the list."},{"lineNumber":111,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":112,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":113,"author":{"gitId":"gloon99"},"content":"`event \u003cdescription\u003e /by \u003cdate\u003e`"},{"lineNumber":114,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":115,"author":{"gitId":"gloon99"},"content":"`\u003cdate\u003e` can either be in the format `\u003cyyyy-mm-dd\u003e` or `\u003cday\u003e`."},{"lineNumber":116,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":117,"author":{"gitId":"gloon99"},"content":"`\u003cday\u003e` should only consist the first three letters of the day of week."},{"lineNumber":118,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":119,"author":{"gitId":"gloon99"},"content":"For the usage of `\u003cday\u003e`, the date used will be the next specified day of week in the calendar."},{"lineNumber":120,"author":{"gitId":"gloon99"},"content":"If the day provided is the same as the current day of week, "},{"lineNumber":121,"author":{"gitId":"gloon99"},"content":"the date of the next specified day of week in the calendar will also be used, "},{"lineNumber":122,"author":{"gitId":"gloon99"},"content":"instead of the current date."},{"lineNumber":123,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":124,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":125,"author":{"gitId":"gloon99"},"content":"`event project meeting /at 2020-09-28`"},{"lineNumber":126,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":127,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":128,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":129,"author":{"gitId":"gloon99"},"content":"sure thing! i have added the following task to your list:"},{"lineNumber":130,"author":{"gitId":"gloon99"},"content":"    [E][✘] project meeting (at: Sep 28 2020)"},{"lineNumber":131,"author":{"gitId":"gloon99"},"content":"you have [1] task(s) in your list"},{"lineNumber":132,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":133,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":134,"author":{"gitId":"gloon99"},"content":"### 4. `done`"},{"lineNumber":135,"author":{"gitId":"gloon99"},"content":"This command marks the specified task as done."},{"lineNumber":136,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":137,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":138,"author":{"gitId":"gloon99"},"content":"`done \u003ctask_number\u003e`"},{"lineNumber":139,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":140,"author":{"gitId":"gloon99"},"content":"If the task corresponding with the task number uncompleted [✘] before, it will now be marked as completed [✓]."},{"lineNumber":141,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":142,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":143,"author":{"gitId":"gloon99"},"content":"`done 3`"},{"lineNumber":144,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":145,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":146,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":147,"author":{"gitId":"gloon99"},"content":"yay! i have marked this task as done:"},{"lineNumber":148,"author":{"gitId":"gloon99"},"content":"    [E][✓] project meeting (at: Sep 28 2020)"},{"lineNumber":149,"author":{"gitId":"gloon99"},"content":"you have [1] task(s) in your list"},{"lineNumber":150,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":151,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":152,"author":{"gitId":"gloon99"},"content":"### 5. `delete`"},{"lineNumber":153,"author":{"gitId":"gloon99"},"content":"This command deletes the specified task from the list."},{"lineNumber":154,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":155,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":156,"author":{"gitId":"gloon99"},"content":"`delete \u003ctask_number\u003e`"},{"lineNumber":157,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":158,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":159,"author":{"gitId":"gloon99"},"content":"`delete 2`"},{"lineNumber":160,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":161,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":162,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":163,"author":{"gitId":"gloon99"},"content":"of course! i have deleted this task from your list:"},{"lineNumber":164,"author":{"gitId":"gloon99"},"content":"    [D][✘] return book (by: Sep 20 2020)"},{"lineNumber":165,"author":{"gitId":"gloon99"},"content":"you have [3] task(s) in your list"},{"lineNumber":166,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":167,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":168,"author":{"gitId":"gloon99"},"content":"### 6. `clear`"},{"lineNumber":169,"author":{"gitId":"gloon99"},"content":"This command deletes all tasks from the list."},{"lineNumber":170,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":171,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":172,"author":{"gitId":"gloon99"},"content":"`clear`"},{"lineNumber":173,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":174,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":175,"author":{"gitId":"gloon99"},"content":"`clear`"},{"lineNumber":176,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":177,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":178,"author":{"gitId":"gloon99"},"content":"`okie! all the tasks in your list have been cleared :-)`"},{"lineNumber":179,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":180,"author":{"gitId":"gloon99"},"content":"### 7. `find`"},{"lineNumber":181,"author":{"gitId":"gloon99"},"content":"This command shows all the tasks which match the query string."},{"lineNumber":182,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":183,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":184,"author":{"gitId":"gloon99"},"content":"`find \u003ckeyword(s)\u003e`"},{"lineNumber":185,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":186,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":187,"author":{"gitId":"gloon99"},"content":"`find book`"},{"lineNumber":188,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":189,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":190,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":191,"author":{"gitId":"gloon99"},"content":"got it! here are the tasks matching your search:"},{"lineNumber":192,"author":{"gitId":"gloon99"},"content":"1. [T][✘] read book"},{"lineNumber":193,"author":{"gitId":"gloon99"},"content":"2. [D][✘] return book (by: Sep 14 2020)"},{"lineNumber":194,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":195,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":196,"author":{"gitId":"gloon99"},"content":"### 8. `view`"},{"lineNumber":197,"author":{"gitId":"gloon99"},"content":"This command shows all the tasks due on the given date."},{"lineNumber":198,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":199,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":200,"author":{"gitId":"gloon99"},"content":"`view \u003cdate\u003e`"},{"lineNumber":201,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":202,"author":{"gitId":"gloon99"},"content":"`\u003cdate\u003e` can either be in the format `\u003cyyyy-mm-dd\u003e` or `\u003cday\u003e`."},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"gloon99"},"content":"`\u003cday\u003e` should only consist the first three letters of the day of week."},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"gloon99"},"content":"For the usage of `\u003cday\u003e`, the date used will be the next specified day of week in the calendar."},{"lineNumber":207,"author":{"gitId":"gloon99"},"content":"If the day provided is the same as the current day of week, "},{"lineNumber":208,"author":{"gitId":"gloon99"},"content":"the date of the next specified day of week in the calendar will also be used, "},{"lineNumber":209,"author":{"gitId":"gloon99"},"content":"instead of the current date."},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":212,"author":{"gitId":"gloon99"},"content":"`view 2020-09-20`"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":215,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":216,"author":{"gitId":"gloon99"},"content":"got it! here are the tasks on your given date:"},{"lineNumber":217,"author":{"gitId":"gloon99"},"content":"1. [E][✘] project meeting (at: Sep 20 2020)"},{"lineNumber":218,"author":{"gitId":"gloon99"},"content":"2. [D][✘] return book (by: Sep 20 2020)"},{"lineNumber":219,"author":{"gitId":"gloon99"},"content":"```"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"gloon99"},"content":"### 8. `bye`"},{"lineNumber":222,"author":{"gitId":"gloon99"},"content":"This command causes the application to exit."},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"gloon99"},"content":"##### Usage"},{"lineNumber":225,"author":{"gitId":"gloon99"},"content":"`bye`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"gloon99"},"content":"##### Example of usage: "},{"lineNumber":228,"author":{"gitId":"gloon99"},"content":"`bye`"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"gloon99"},"content":"##### Expected outcome:"},{"lineNumber":231,"author":{"gitId":"gloon99"},"content":"The application closes when this command is sent. "}],"authorContributionMap":{"gloon99":221,"-":10}},{"path":"src/main/java/shiro/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":" * a launcher class to workaround classpath issues"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":12}},{"path":"src/main/java/shiro/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":" * A GUI for Shiro using FXML."},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    private Shiro shiro \u003d new Shiro(Shiro.FILE_PATH);"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"            AnchorPane anchorPane \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"            Scene scene \u003d new Scene(anchorPane);"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"            stage.setTitle(\"shiro\");"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setShiro(shiro);"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":34}},{"path":"src/main/java/shiro/Shiro.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.command.Command;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.command.CommandResult;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import shiro.parser.Parser;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" * shiro is a personal chatbot cum task manager with the following functionalities:"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":" *     1. add and remove tasks from the list"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":" *     2. clear the entire list\u0027s tasks"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":" *     3. mark a task as done"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":" *     4. search for tasks using a query string"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":" *     5. search for tasks that occur on a given date"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":" *     6. display all of the existing tasks in the list"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":" * this class is the main driver for the chatbot"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"public class Shiro {"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    private Storage storage;"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    private TaskList tasks;"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"    static final String FILE_PATH \u003d \"data/tasks.txt\";"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     * @param filePath a string representing the destination file path where the list of tasks is stored"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    public Shiro(String filePath) {"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        } catch (ShiroException e) {"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"            System.out.println(Message.loadingErrorMessage());"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"     * returns a string corresponding to the response based on the command given"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"     * @param command the command given by the user"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"     * @return the appropriate response based on the given command"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"    public CommandResult getResponse(String command) throws ShiroException {"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"        Command c \u003d Parser.parse(command);"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"            return c.execute(tasks, storage);"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"        } catch (ShiroException e) {"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"            return c.execute(tasks, storage);"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"gloon99":55,"-":1}},{"path":"src/main/java/shiro/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents a command to add a task"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public abstract class AddTaskCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"    AddTaskCommand(String fullCommand) {"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":14}},{"path":"src/main/java/shiro/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroFileLoadingErrorException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" * represents a command to clear the entire list of tasks"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    public ClearCommand() {"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"        super(\"clear\");"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     * deletes all of the tasks in the given task list"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * updates this change to the storage"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     * finally, the method returns the command result indicating that the task list was successfully cleared"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * @return the command result indicating that the task list was successfully cleared"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroFileLoadingErrorException {"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"        taskList.deleteAll();"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.clearedAllTasksMessage());"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":34}},{"path":"src/main/java/shiro/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":" * a class representing commands. it evaluates the commands given by the user and responds appropriately"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"    protected String fullCommand;"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand a string representing the full command given by the user"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"    Command(String fullCommand) {"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * performs the appropriate command based on the type of command it is"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     * @param tasks the list of tasks"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * @return the command result based on the type of command given"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroException if there any issues executing the command"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    public abstract CommandResult execute(TaskList tasks, Storage storage) throws ShiroException;"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":29}},{"path":"src/main/java/shiro/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * a class representing the result given by a command"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class CommandResult {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    String feedbackToUser;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"    boolean isExit;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     * class constructor with the isExit parameter set to false"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"     * @param feedbackToUser the command result represented as a string that will be displayed to the user"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    CommandResult(String feedbackToUser) {"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"        this.feedbackToUser \u003d feedbackToUser;"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"        this.isExit \u003d false;"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"     * class constructor with the option to set isExit to either true or false"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     * @param feedbackToUser the command result represented as a string that will be displayed to the user"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * @param isExit a boolean value indicating if the command result should cause the app to exit"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    CommandResult(String feedbackToUser, boolean isExit) {"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"        this.feedbackToUser \u003d feedbackToUser;"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * returns the string representation of the command result"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     * @return the command result as a string"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        return feedbackToUser;"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"     * returns a boolean value indicating if the command result should cause the app to exit"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"     * @return true if the command result causes the app to exit and false otherwise"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"    public boolean isExit() {"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"        return isExit;"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":44}},{"path":"src/main/java/shiro/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroFileLoadingErrorException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDateException;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" * represents a command to add a deadline task"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"public class DeadlineCommand extends AddTaskCommand {"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    public DeadlineCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * creates a new deadline task which is added to the task list."},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * this change is reflected in the storage."},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * finally, the method returns the command result indicating that the task was successfully added to the task list"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @return the command result indicating that the task list was successfully cleared"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the description for the deadline task is empty"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDateException if the date for the deadline task is empty"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroFileLoadingErrorException if there was an error loading the file"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroEmptyDescriptionException, ShiroEmptyDateException, ShiroFileLoadingErrorException {"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        Task addedTask \u003d taskList.addDeadline(fullCommand);"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.addedTaskMessage(addedTask, taskList));"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":41}},{"path":"src/main/java/shiro/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroFileLoadingErrorException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroInvalidIndexException;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":" * represents a command to deleted the specified task"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public DeleteCommand(String fullCommand) {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * deletes the task specified by the user."},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * this change is reflected in the storage."},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * finally, the method returns the command result indicating that the task list was successfully deleted"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @return the command result indicating that the task list was successfully cleared"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroInvalidIndexException if the given task number does not exist in the list"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroInvalidIndexException, ShiroFileLoadingErrorException {"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        int taskNumber \u003d Integer.parseInt(fullCommand.substring(7));"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        Task task \u003d taskList.delete(taskNumber);"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.deletedTaskMessage(task, taskList));"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":39}},{"path":"src/main/java/shiro/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroFileLoadingErrorException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroInvalidIndexException;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":" * represents a command to mark the specified task as done"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"public class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public DoneCommand(String fullCommand) {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * marks the specified task as done."},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * this change is reflected in the storage."},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * finally, the method returns the command result indicating that the task list was successfully marked as done"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @return the command result indicating that the task list was successfully deleted"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroInvalidIndexException if the given task number does not exist in the list"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroInvalidIndexException, ShiroFileLoadingErrorException {"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"        int taskNumber \u003d Integer.parseInt(fullCommand.substring(5));"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        Task task \u003d taskList.done(taskNumber);"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.markedTaskAsDoneMessage(task, taskList));"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":38}},{"path":"src/main/java/shiro/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroFileLoadingErrorException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDateException;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" * represents a command to add an event task"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"public class EventCommand extends AddTaskCommand {"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    public EventCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * creates a new deadline task which is added to the task list."},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * this change is reflected in the storage."},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * finally, the method returns the command result indicating that the event task was successfully added"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @return the command result indicating that the event task was successfully added"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the description for the deadline task is empty"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDateException if the date for the deadline task is empty"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroFileLoadingErrorException if there was an error loading the file"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroEmptyDescriptionException, ShiroEmptyDateException, ShiroFileLoadingErrorException {"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        Task addedTask \u003d taskList.addEvent(fullCommand);"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.addedTaskMessage(addedTask, taskList));"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":41}},{"path":"src/main/java/shiro/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" * represents a command to exit the application"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    public ExitCommand() {"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"        super(\"bye\");"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     * causes the application to close."},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * @param tasks the list of tasks"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * @return message indicating the application has been successfully shut down"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"        Platform.exit();"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.exitMessage(), true);"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":31}},{"path":"src/main/java/shiro/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDescriptionException;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" * represents a command to find a list of commands that contain the query string"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"public class FindCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    public FindCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * searches for a list of tasks that matches the query string."},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * finally, returns a command result containing the list of tasks matching the query string"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @return a command result containing the list of tasks matching the query string"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the query string given by the user is empty"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroEmptyDescriptionException {"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        if (fullCommand.length() \u003c 6) {"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"            throw new ShiroEmptyDescriptionException(\"oh dear :-( the description of \u0027find\u0027 cannot be empty\");"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d taskList.getMatchingTasks(fullCommand.substring(5));"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.matchingTasksMessage(matchingTasks));"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":40}},{"path":"src/main/java/shiro/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":" * represents a command to display the possible commands"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    public HelpCommand() {"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"        super(\"help\");"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"     * returns a command result containing the list of commands available to the user"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     * @return a command result containing the list of commands available to the user"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.helpMessage());"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":29}},{"path":"src/main/java/shiro/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":" * represents a command when the input of the user is invalid"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    public InvalidCommand() {"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"        super(\"\");"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"     * returns message indicating that the given command cannot be understood"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     * @param tasks the list of tasks"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     * @return message indicating that the given command cannot be understood"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.invalidCommandMessage());"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":29}},{"path":"src/main/java/shiro/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":" * represents a command to display the entire list of tasks"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    public ListCommand() {"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"        super(\"list\");"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     * returns a command result containing the full list of tasks"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * @return a a command result containing the full list of tasks"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.listAllTasksMessage(tasks));"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":33}},{"path":"src/main/java/shiro/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroFileLoadingErrorException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":" * represents a command to add a to do task"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"public class ToDoCommand extends AddTaskCommand {"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by the user"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public ToDoCommand(String fullCommand) {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * creates a new deadline task which is added to the task list."},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * this change is reflected in the storage."},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * finally, return a command result indicating that the addition of the to do task was successful"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @return command result indicating that the addition of the to do task was successful"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the description for the deadline task is empty"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroFileLoadingErrorException if there was an error loading the file"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) throws ShiroEmptyDescriptionException, ShiroFileLoadingErrorException {"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        Task addedTask \u003d taskList.addToDo(fullCommand);"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.addedTaskMessage(addedTask, taskList));"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":39}},{"path":"src/main/java/shiro/command/ViewCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.command;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":" * represents a command to view deadline and events on the given date"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"public class ViewCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the full command given by he user"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    public ViewCommand(String fullCommand) {"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"        super(fullCommand);"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * parses the string given by the user into a LocalDate object"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * find the list of tasks that to be done on the given date"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * finally, return a command result containing the list of tasks to be done on the given date"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @param taskList the list of tasks"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * @param storage the storage system responsible for saving and loading data"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @return command result containing the list of tasks to be done on the given date"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    public CommandResult execute(TaskList taskList, Storage storage) {"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        LocalDate date \u003d Parser.parseDate(fullCommand.substring(5));"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasksOnDate(date);"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        return new CommandResult(Message.viewTasksOnDateMessage(tasks));"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":38}},{"path":"src/main/java/shiro/exception/ShiroEmptyDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.exception;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents an exception that is thrown when the date for a Deadline or Event task is empty"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class ShiroEmptyDateException extends ShiroException {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * constructs a new empty date exception with the specified detail message."},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param message the detail message."},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     *                the message is saved for later retrieval by the \u003ccode\u003eThrowable.getMessage()\u003c/\u003e method"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    public ShiroEmptyDateException(String message) {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"src/main/java/shiro/exception/ShiroEmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.exception;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents an exception that is thrown when the description for a task is empty"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class ShiroEmptyDescriptionException extends ShiroException {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * constructs a new empty description exception with the specified detail message."},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param message the detail message."},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     *                the message is saved for later retrieval by the \u003ccode\u003eThrowable.getMessage()\u003c/\u003e method"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    public ShiroEmptyDescriptionException(String message) {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"src/main/java/shiro/exception/ShiroException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.exception;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents an exception that is specific to shiro"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class ShiroException extends Exception {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * constructs a new shiro exception with the specified detail message."},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param message the detail message."},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     *                the message is saved for later retrieval by the \u003ccode\u003eThrowable.getMessage()\u003c/\u003e method"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    public ShiroException(String message) {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"src/main/java/shiro/exception/ShiroFileLoadingErrorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.exception;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents an exception that is thrown when there is an error loading a file"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class ShiroFileLoadingErrorException extends ShiroException {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * constructs a new file loading error exception with the specified detail message."},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param message the detail message."},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     *                the message is saved for later retrieval by the \u003ccode\u003eThrowable.getMessage()\u003c/\u003e method"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    public ShiroFileLoadingErrorException(String message){"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"src/main/java/shiro/exception/ShiroFileNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.exception;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents an exception that is thrown when the specified file could not be found"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class ShiroFileNotFoundException extends ShiroException {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * constructs a new file not found exception with the specified detail message."},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param message the detail message."},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     *                the message is saved for later retrieval by the \u003ccode\u003eThrowable.getMessage()\u003c/\u003e method"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    public ShiroFileNotFoundException(String message) {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"src/main/java/shiro/exception/ShiroInvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.exception;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":" * represents an exception that is thrown when the index of a task does not exist"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"public class ShiroInvalidIndexException extends ShiroException {"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"     * constructs a new invalid index exception with the specified detail message."},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"     * @param message the detail message."},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"     *                the message is saved for later retrieval by the \u003ccode\u003eThrowable.getMessage()\u003c/\u003e method"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    public ShiroInvalidIndexException(String message) {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"src/main/java/shiro/message/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.message;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.task.Task;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" * a class to store all the messages output by Shiro"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"public class Message {"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     * returns a message to indicate that a task has been successfully added to the task list"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     * @param task the task that was added to the task list"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * @param taskList the task list that the task was added to"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * @return the message indicating that the task was successfully added"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public static String addedTaskMessage(Task task, TaskList taskList) {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        return \"sure thing! i have added the following task to your list:\\n    \" +"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"                task + \"\\n\" + Message.numberOfTasksMessage(taskList.size());"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     * returns a message to indicate that all the tasks in the list have been cleared"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * @return message to indicate that all the tasks in the list have been cleared"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    public static String clearedAllTasksMessage() {"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"        return \"okie! all the tasks in your list have been cleared :-)\";"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"     * returns a message to indicate that the task has been deleted from the task list"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"     * @param deletedTask the task that was deleted"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"     * @param taskList the task list that the task was deleted from"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"     * @return the message indicating that the task was successfully deleted"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    public static String deletedTaskMessage(Task deletedTask, TaskList taskList) {"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"        return \"of course! i have deleted this task from your list: \\n    \" +"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"                deletedTask + \"\\n\" +"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"                Message.numberOfTasksMessage(taskList.size());"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"     * returns a message to indicate that the task was successfully marked as done"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"     * @param doneTask the task that was marked as done"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"     * @param taskList the task list that the task belongs to"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"     * @return the message indicating that the task was successfully marked as done"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"    public static String markedTaskAsDoneMessage(Task doneTask, TaskList taskList) {"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"        return \"yay! i have marked this task as done: \\n    \" +"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"                doneTask + \"\\n\" +"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"                Message.numberOfTasksMessage(taskList.size());"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the welcome message"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the welcome message"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"    public static String welcomeMessage() {"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"        return \"hello! i\u0027m shiro :-)\\n\" +"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":"                \"what can i do for you today?\\n\" +"},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"                \"\\n\" +"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"                \"more: type \u0027help\u0027 for more information\";"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the exit message"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the exit message"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"    public static String exitMessage() {"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":"        return \"byebye! i hope to see you again soon :-)\";"},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":76,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the matching tasks"},{"lineNumber":78,"author":{"gitId":"gloon99"},"content":"     * @param matchingTasks the list of matching tasks"},{"lineNumber":79,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the matching tasks"},{"lineNumber":80,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"gloon99"},"content":"    public static String matchingTasksMessage(ArrayList\u003cTask\u003e matchingTasks) {"},{"lineNumber":82,"author":{"gitId":"gloon99"},"content":"        String string;"},{"lineNumber":83,"author":{"gitId":"gloon99"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":84,"author":{"gitId":"gloon99"},"content":"            string \u003d \"oh dear :-( there are no tasks matching your search\";"},{"lineNumber":85,"author":{"gitId":"gloon99"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"gloon99"},"content":"            string \u003d \"got it! here are the tasks matching your search:\\n\" +"},{"lineNumber":87,"author":{"gitId":"gloon99"},"content":"                    Message.tasksAsStringMessage(matchingTasks);"},{"lineNumber":88,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"gloon99"},"content":"        return string;"},{"lineNumber":90,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":92,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the tasks on the given date"},{"lineNumber":94,"author":{"gitId":"gloon99"},"content":"     * @param tasks the list of tasks on a given date"},{"lineNumber":95,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the tasks on the given date"},{"lineNumber":96,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"gloon99"},"content":"    public static String viewTasksOnDateMessage(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":98,"author":{"gitId":"gloon99"},"content":"        String string;"},{"lineNumber":99,"author":{"gitId":"gloon99"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":100,"author":{"gitId":"gloon99"},"content":"            string \u003d \"yay! there are no tasks on your given date\";"},{"lineNumber":101,"author":{"gitId":"gloon99"},"content":"        } else {"},{"lineNumber":102,"author":{"gitId":"gloon99"},"content":"            string \u003d \"okies! here are the tasks on your given date:\\n\" +"},{"lineNumber":103,"author":{"gitId":"gloon99"},"content":"                    Message.tasksAsStringMessage(tasks);"},{"lineNumber":104,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"gloon99"},"content":"        return string;"},{"lineNumber":106,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":108,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"gloon99"},"content":"     * returns a string with the available commands"},{"lineNumber":110,"author":{"gitId":"gloon99"},"content":"     * @return string with the available commands"},{"lineNumber":111,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"gloon99"},"content":"    public static String helpMessage() {"},{"lineNumber":113,"author":{"gitId":"gloon99"},"content":"        return \"available commands are: \\n  \" +"},{"lineNumber":114,"author":{"gitId":"gloon99"},"content":"                \"1. list\\n  \" +"},{"lineNumber":115,"author":{"gitId":"gloon99"},"content":"                \"2. todo \u003cdescription\u003e\\n  \" +"},{"lineNumber":116,"author":{"gitId":"gloon99"},"content":"                \"3. deadline \u003cdescription\u003e /by \u003cdate\u003e\\n  \" +"},{"lineNumber":117,"author":{"gitId":"gloon99"},"content":"                \"4. event \u003cdescription\u003e /at \u003cdate\u003e\\n  \" +"},{"lineNumber":118,"author":{"gitId":"gloon99"},"content":"                \"5. done \u003ctask_number\u003e\\n  \" +"},{"lineNumber":119,"author":{"gitId":"gloon99"},"content":"                \"6. delete \u003ctask_number\u003e\\n  \" +"},{"lineNumber":120,"author":{"gitId":"gloon99"},"content":"                \"7. clear\\n  \" +"},{"lineNumber":121,"author":{"gitId":"gloon99"},"content":"                \"8. find \u003ckeyword(s)\u003e\\n  \" +"},{"lineNumber":122,"author":{"gitId":"gloon99"},"content":"                \"9. view \u003cdate\u003e\\n \" +"},{"lineNumber":123,"author":{"gitId":"gloon99"},"content":"                \"10. bye\";"},{"lineNumber":124,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":126,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"gloon99"},"content":"     * returns a message indicating that the command was invalid"},{"lineNumber":128,"author":{"gitId":"gloon99"},"content":"     * @return message indicating that the command was invalid"},{"lineNumber":129,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"gloon99"},"content":"    public static String invalidCommandMessage() {"},{"lineNumber":131,"author":{"gitId":"gloon99"},"content":"        return \"oops! im sorry, but i do not know what that means :-(\";"},{"lineNumber":132,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":134,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of all the tasks"},{"lineNumber":136,"author":{"gitId":"gloon99"},"content":"     * @param tasks the list of tasks"},{"lineNumber":137,"author":{"gitId":"gloon99"},"content":"     * @return string representation of all the tasks"},{"lineNumber":138,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"gloon99"},"content":"    public static String listAllTasksMessage(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":140,"author":{"gitId":"gloon99"},"content":"        String string;"},{"lineNumber":141,"author":{"gitId":"gloon99"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":142,"author":{"gitId":"gloon99"},"content":"            string \u003d \"hurray! there are no tasks in your list\";"},{"lineNumber":143,"author":{"gitId":"gloon99"},"content":"        } else {"},{"lineNumber":144,"author":{"gitId":"gloon99"},"content":"            string \u003d \"okies! here are the tasks in your list:\\n\" +"},{"lineNumber":145,"author":{"gitId":"gloon99"},"content":"                    Message.tasksAsStringMessage(tasks);"},{"lineNumber":146,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"gloon99"},"content":"        return string;"},{"lineNumber":148,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":150,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"gloon99"},"content":"     * outputs a string representation of the number of tasks that the array list contains"},{"lineNumber":152,"author":{"gitId":"gloon99"},"content":"     * @return a string describing the number of tasks that the array list contains"},{"lineNumber":153,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"gloon99"},"content":"    public static String numberOfTasksMessage(int n) {"},{"lineNumber":155,"author":{"gitId":"gloon99"},"content":"        return \"you have [\" + n + \"] task(s) in your list\";"},{"lineNumber":156,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":158,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"gloon99"},"content":"     * outputs a string indicating that there was an error loading the file"},{"lineNumber":160,"author":{"gitId":"gloon99"},"content":"     * @return string indicating that there was an error loading the file"},{"lineNumber":161,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"gloon99"},"content":"    public static String loadingErrorMessage() {"},{"lineNumber":163,"author":{"gitId":"gloon99"},"content":"        return \"there was an error loading the file\";"},{"lineNumber":164,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":166,"author":{"gitId":"gloon99"},"content":"    private static String tasksAsStringMessage(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":167,"author":{"gitId":"gloon99"},"content":"        String tasksString \u003d \"\";"},{"lineNumber":168,"author":{"gitId":"gloon99"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":169,"author":{"gitId":"gloon99"},"content":"            tasksString +\u003d String.format(\"%d\", i+1) + \". \" +"},{"lineNumber":170,"author":{"gitId":"gloon99"},"content":"                    tasks.get(i) + \"\\n\";"},{"lineNumber":171,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"gloon99"},"content":"        return tasksString.trim();"},{"lineNumber":173,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":174}},{"path":"src/main/java/shiro/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.parser;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.command.*;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import java.time.DayOfWeek;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":" * deals with making sense of the user command"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     * takes the user\u0027s full input and returns the appropriate command that should be run based on the given input"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     * @param fullCommand the entire input given by the user"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * @return the appropriate command based on the input given by the user"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    public static Command parse(String fullCommand) {"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"        assert fullCommand !\u003d null : \"fullCommand should not be null\";"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        String firstWord \u003d fullCommand.split(\" \")[0];"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"        switch (firstWord) {"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"        case \"list\":"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"            return new ListCommand();"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"        case \"done\":"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"            return new DoneCommand(fullCommand);"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"        case \"delete\":"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"            return new DeleteCommand(fullCommand);"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"        case \"todo\":"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"            return new ToDoCommand(fullCommand);"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"        case \"deadline\":"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"            return new DeadlineCommand(fullCommand);"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"        case \"event\":"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"            return new EventCommand(fullCommand);"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        case \"find\":"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"            return new FindCommand(fullCommand);"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        case \"clear\":"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"            return new ClearCommand();"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"        case \"help\":"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"            return new HelpCommand();"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"        case \"bye\":"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"            return new ExitCommand();"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"        case \"view\":"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"            return new ViewCommand(fullCommand);"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"        default:"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"            return new InvalidCommand();"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"     * takes the date as a string or as a day of the week and returns it as a LocalDate object."},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"     * if the string is given as a day of the week, it will automatically be taken as the next nearest date which that day falls on."},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"     * if the day given is the same as the current day of the week, the date of next week\u0027s day will be used instead of the current date."},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"     * @param date can either be the date in string form in the format \u003cyyyy-mm-dd\u003e or \u003cdaydayday\u003e"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"     * @return"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"    public static LocalDate parseDate(String date) {"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"        LocalDate localDate;"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"            localDate \u003d LocalDate.parse(date);"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"            DayOfWeek currentDay \u003d LocalDate.now().getDayOfWeek();"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":"            DayOfWeek day;"},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"            switch (date) {"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"            case \"mon\":"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.MONDAY;"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"            case \"tue\":"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.TUESDAY;"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":"            case \"wed\":"},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.WEDNESDAY;"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"            case \"thu\":"},{"lineNumber":75,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.THURSDAY;"},{"lineNumber":76,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"gloon99"},"content":"            case \"fri\":"},{"lineNumber":78,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.FRIDAY;"},{"lineNumber":79,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"gloon99"},"content":"            case \"sat\":"},{"lineNumber":81,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.SATURDAY;"},{"lineNumber":82,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"gloon99"},"content":"            case \"sun\":"},{"lineNumber":84,"author":{"gitId":"gloon99"},"content":"                day \u003d DayOfWeek.SUNDAY;"},{"lineNumber":85,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":86,"author":{"gitId":"gloon99"},"content":"            default:"},{"lineNumber":87,"author":{"gitId":"gloon99"},"content":"                throw new IllegalStateException(\"unexpected value: \" + date);"},{"lineNumber":88,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"gloon99"},"content":"            int daysToAdd \u003d (day.getValue() - currentDay.getValue() + 7) % 7;"},{"lineNumber":90,"author":{"gitId":"gloon99"},"content":"            if (daysToAdd \u003d\u003d 0) {"},{"lineNumber":91,"author":{"gitId":"gloon99"},"content":"                daysToAdd \u003d 7;"},{"lineNumber":92,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"gloon99"},"content":"            localDate \u003d LocalDate.now().plusDays(daysToAdd);"},{"lineNumber":94,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"gloon99"},"content":"        return localDate;"},{"lineNumber":96,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":97}},{"path":"src/main/java/shiro/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.storage;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.*;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.task.*;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":" * deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"    String filePath;"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"     * class constructor"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * @param filePath the file path of the file to load data from and write data to"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    public Storage(String filePath) {"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * creates a new file if the it does not exist in the specified file path."},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * afterwards, the text in the file is decoded and converted to a list of tasks stored in an array list"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     * @return the array list of tasks"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroException if there are issues finding the file or decoding the file"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"    public ArrayList\u003cTask\u003e load() throws ShiroException {"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"        createDirectoryIfNotExist();"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        createFileIfNotExist();"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"        return decodeTxtFile();"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"     * encodes the tasks in the given task list to a more appropriate format for storage"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"     * updates the changes in the task list using encoded versions of the tasks"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"     * @param tasks the task list to reference when updating the file"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws ShiroFileLoadingErrorException {"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"            for (Task task : tasks) {"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"                fw.write(task.encode() + System.lineSeparator());"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"            fw.close();"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"        } catch (IOException e) {"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"            throw new ShiroFileLoadingErrorException(\"there was an error loading the file\");"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"    private void createDirectoryIfNotExist() {"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"        File dir \u003d new File(\"data\");"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"        if (!dir.exists()) {"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"            dir.mkdir();"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"    private void createFileIfNotExist() throws ShiroFileLoadingErrorException {"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"        if (!file.exists()) {"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":"            try {"},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"                file.createNewFile();"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"            } catch (IOException e) {"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"                throw new ShiroFileLoadingErrorException(\"there was an error loading the file\");"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"        assert new File(this.filePath).exists() : \"the file in the file path: \" + this.filePath + \" should exist\";"},{"lineNumber":75,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":77,"author":{"gitId":"gloon99"},"content":"    private ArrayList\u003cTask\u003e decodeTxtFile() throws ShiroException {"},{"lineNumber":78,"author":{"gitId":"gloon99"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":79,"author":{"gitId":"gloon99"},"content":"        Scanner s;"},{"lineNumber":80,"author":{"gitId":"gloon99"},"content":"        ArrayList\u003cTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":82,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"gloon99"},"content":"            s \u003d new Scanner(f);"},{"lineNumber":84,"author":{"gitId":"gloon99"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":85,"author":{"gitId":"gloon99"},"content":"            throw new ShiroFileNotFoundException(\"the file could not be found\");"},{"lineNumber":86,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":88,"author":{"gitId":"gloon99"},"content":"        String string;"},{"lineNumber":89,"author":{"gitId":"gloon99"},"content":"        Task task \u003d null;"},{"lineNumber":90,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":91,"author":{"gitId":"gloon99"},"content":"        while (s.hasNext()) {"},{"lineNumber":92,"author":{"gitId":"gloon99"},"content":"            string \u003d s.nextLine();"},{"lineNumber":93,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":94,"author":{"gitId":"gloon99"},"content":"            switch (string.charAt(0)) {"},{"lineNumber":95,"author":{"gitId":"gloon99"},"content":"            case \u0027D\u0027:"},{"lineNumber":96,"author":{"gitId":"gloon99"},"content":"                task \u003d Deadline.decode(string);"},{"lineNumber":97,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":98,"author":{"gitId":"gloon99"},"content":"            case \u0027E\u0027:"},{"lineNumber":99,"author":{"gitId":"gloon99"},"content":"                task \u003d Event.decode(string);"},{"lineNumber":100,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":101,"author":{"gitId":"gloon99"},"content":"            case \u0027T\u0027:"},{"lineNumber":102,"author":{"gitId":"gloon99"},"content":"                task \u003d ToDo.decode(string);"},{"lineNumber":103,"author":{"gitId":"gloon99"},"content":"                break;"},{"lineNumber":104,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"gloon99"},"content":"            assert task !\u003d null : \"task should not be null\";"},{"lineNumber":106,"author":{"gitId":"gloon99"},"content":"            decodedTasks.add(task);"},{"lineNumber":107,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"gloon99"},"content":"        return decodedTasks;"},{"lineNumber":109,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":110}},{"path":"src/main/java/shiro/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.task;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" * represents a deadline task"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    protected LocalDate date;"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     * creates a new deadline task based on the given description"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * @param taskDescription the full description of the deadline task in the following format:"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     *                        \"deadline deadline_task_description /by due_date\""},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public Deadline(String taskDescription) {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        int slash \u003d taskDescription.indexOf(\"/\");"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"        this.task \u003d taskDescription.substring(0, slash);"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"        this.date \u003d Parser.parseDate(taskDescription.substring(slash + 4));"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"        this.done \u003d false;"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the deadline task"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the deadline task"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"        return \"[D]\" + super.toString() +"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"                \"(by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"     * encodes the deadline task to a more appropriate format for storage"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"     * @return the encoded version of the deadline task"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    public String encode() {"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"        return \"D | \" +"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"                this.isDoneInt() + \" | \" +"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"                this.task + \"| \" +"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"                this.date;"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"     * returns the due date of the deadline task as a LocalDate object"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"     * @return due date of the deadline task"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"    public LocalDate getDate() {"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"        return this.date;"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"     * decodes a given line of text and transforms it into a deadline task"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"     * @param string the line of text to decode"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"     * @return the deadline task that has been decoded from the given input"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"    public static Deadline decode(String string) {"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"        String[] split \u003d string.split(\" \\\\| \");"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"        String taskDescription \u003d split[2] + \" /by \" + split[3];"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"        Deadline deadline \u003d new Deadline(taskDescription);"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"        if (split[1].contains(\"1\")) {"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"            deadline.markAsDone();"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"        return deadline;"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":74}},{"path":"src/main/java/shiro/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.task;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":" * represents an event task"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    protected LocalDate date;"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"     * creates a new event task based on the given description"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"     * @param taskDescription the full description of the event task in the following format:"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     *                        \"event event_task_description /by event_date\""},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public Event(String taskDescription) {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        int slash \u003d taskDescription.indexOf(\"/\");"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"        this.task \u003d taskDescription.substring(0, slash);"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"        this.date \u003d Parser.parseDate(taskDescription.substring(slash + 4));"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"        this.done \u003d false;"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the event task"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the event task"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"        return \"[E]\" + super.toString() +"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"                \"(at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"     * encodes the event task to a more appropriate format for storage"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"     * @return the encoded version of the event task"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    public String encode() {"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"        return \"E | \" +"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"                this.isDoneInt() + \" | \" +"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"                this.task + \"| \" +"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"                this.date;"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"     * returns the date of the event task as a LocalDate object"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"     * @return date of the event task"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"    public LocalDate getDate() {"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"        return this.date;"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"     * decodes a given line of text and transforms it into a event task"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"     * @param string the line of text to decode"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"     * @return the event task that has been decoded from the given input"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"    public static Event decode(String string) {"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"        String[] split \u003d string.split(\" \\\\| \");"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"        String taskDescription \u003d split[2] + \" /at \" + split[3];"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"        Event event \u003d new Event(taskDescription);"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"        if (split[1].contains(\"1\")) {"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"            event.markAsDone();"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"        return event;"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":74}},{"path":"src/main/java/shiro/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.task;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":" * represents a task"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"    protected String task;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"    protected boolean done;"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"    protected String getStatus() {"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        return (done ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * marks the task as done"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public void markAsDone() {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        this.done \u003d true;"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * returns a boolean value indicating if the task has been marked as done"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * @return true if the task has been marked as done and false otherwise"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"    public boolean isDone() {"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"        return this.done;"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"    protected int isDoneInt() {"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"        return this.done? 1 : 0;"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"     * encodes the task to a more appropriate format for storage"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"     * @return the encoded version of the task"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    public abstract String encode();"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the task"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the task"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"        return \"[\" + this.getStatus() + \"] \" + this.task;"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"     * returns the date of the task"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"     * @return date of the task"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"    public abstract LocalDate getDate();"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":54}},{"path":"src/main/java/shiro/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.task;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDateException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroEmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroInvalidIndexException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":" * represents the task list and deals with operations to alter the task list"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"     * class constructor if no array list of tasks is given"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"     * class constructor if an array list of tasks is given"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"     * @param tasks the array list of tasks"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"     * returns the number of tasks in the task list as an integer"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"     * @return the number of tasks in the task list"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"    public int size() {"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        return this.tasks.size();"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"     * marks the given task as done based on its task number"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"     * @param taskNumber the index of the task to be marked as done"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"     * @return the task after it has been marked as done"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroInvalidIndexException if the given index of the task does not exist"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    public Task done(int taskNumber) throws ShiroInvalidIndexException {"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"        Task task \u003d getTaskNumber(taskNumber - 1);"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"        task.markAsDone();"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"        return task;"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"     * deletes the given task based on its task number"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"     * @param taskNumber the index of the task to be deleted"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"     * @return the task that was deleted"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroInvalidIndexException if the given index of the task does not exist"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"    public Task delete(int taskNumber) throws ShiroInvalidIndexException {"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"        Task task \u003d getTaskNumber(taskNumber - 1);"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"        tasks.remove(taskNumber - 1);"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"        return task;"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"     * converts the given string to a to do task and adds it to the task list"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"     * @param input to do task to be added as a string"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"     * @return the to do task that was created"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the description of the to do task was empty"},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"    public ToDo addToDo(String input) throws ShiroEmptyDescriptionException {"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"        if (input.length() \u003c\u003d 5) {"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":"            throw new ShiroEmptyDescriptionException(\"oops! the description of a todo cannot be empty\");"},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":"        ToDo todo \u003d new ToDo(input.substring(5));"},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"        tasks.add(todo);"},{"lineNumber":75,"author":{"gitId":"gloon99"},"content":"        return todo;"},{"lineNumber":76,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":78,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"gloon99"},"content":"     * converts the given string to a deadline task and adds it to the task list"},{"lineNumber":80,"author":{"gitId":"gloon99"},"content":"     * @param input deadline task to be added as a string"},{"lineNumber":81,"author":{"gitId":"gloon99"},"content":"     * @return the deadline task that was created"},{"lineNumber":82,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the description of the deadline was empty"},{"lineNumber":83,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDateException if the date of the deadline task was not specified"},{"lineNumber":84,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"gloon99"},"content":"    public Deadline addDeadline(String input) throws ShiroEmptyDescriptionException, ShiroEmptyDateException {"},{"lineNumber":86,"author":{"gitId":"gloon99"},"content":"        if (input.length() \u003c\u003d 9) {"},{"lineNumber":87,"author":{"gitId":"gloon99"},"content":"            throw new ShiroEmptyDescriptionException(\"oops! the description of a deadline cannot be empty\");"},{"lineNumber":88,"author":{"gitId":"gloon99"},"content":"        } else if (!input.contains(\"/\")) {"},{"lineNumber":89,"author":{"gitId":"gloon99"},"content":"            throw new ShiroEmptyDateException(\"oops! the due date for the deadline was not specified\");"},{"lineNumber":90,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"gloon99"},"content":"        Deadline deadline \u003d new Deadline(input.substring(9));"},{"lineNumber":92,"author":{"gitId":"gloon99"},"content":"        tasks.add(deadline);"},{"lineNumber":93,"author":{"gitId":"gloon99"},"content":"        return deadline;"},{"lineNumber":94,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":96,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"gloon99"},"content":"     * converts the given string to an event task and adds it to the task list"},{"lineNumber":98,"author":{"gitId":"gloon99"},"content":"     * @param input event task to be added as a string"},{"lineNumber":99,"author":{"gitId":"gloon99"},"content":"     * @return the event task that was created"},{"lineNumber":100,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDescriptionException if the description of the event was empty"},{"lineNumber":101,"author":{"gitId":"gloon99"},"content":"     * @throws ShiroEmptyDateException if the date of the event task was not specified"},{"lineNumber":102,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"gloon99"},"content":"    public Event addEvent(String input) throws ShiroEmptyDescriptionException, ShiroEmptyDateException {"},{"lineNumber":104,"author":{"gitId":"gloon99"},"content":"        if (input.length() \u003c\u003d 6) {"},{"lineNumber":105,"author":{"gitId":"gloon99"},"content":"            throw new ShiroEmptyDescriptionException(\"oops! the description of a event cannot be empty\");"},{"lineNumber":106,"author":{"gitId":"gloon99"},"content":"        } else if (!input.contains(\"/\")) {"},{"lineNumber":107,"author":{"gitId":"gloon99"},"content":"            throw new ShiroEmptyDateException(\"oops! the event date for the event was not specified\");"},{"lineNumber":108,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"gloon99"},"content":"        Event event \u003d new Event(input.substring(6));"},{"lineNumber":110,"author":{"gitId":"gloon99"},"content":"        tasks.add(event);"},{"lineNumber":111,"author":{"gitId":"gloon99"},"content":"        return event;"},{"lineNumber":112,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":114,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"gloon99"},"content":"     * returns the list of tasks that matches the given query string"},{"lineNumber":116,"author":{"gitId":"gloon99"},"content":"     * @param queryString the given query to search for in the task list"},{"lineNumber":117,"author":{"gitId":"gloon99"},"content":"     * @return an array list containing the tasks that match the query string"},{"lineNumber":118,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"gloon99"},"content":"    public ArrayList\u003cTask\u003e getMatchingTasks(String queryString) {"},{"lineNumber":120,"author":{"gitId":"gloon99"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"gloon99"},"content":"        tasks.forEach(task -\u003e {"},{"lineNumber":122,"author":{"gitId":"gloon99"},"content":"            if (task.toString().contains(queryString)) {"},{"lineNumber":123,"author":{"gitId":"gloon99"},"content":"                matchingTasks.add(task);"},{"lineNumber":124,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"gloon99"},"content":"        });"},{"lineNumber":126,"author":{"gitId":"gloon99"},"content":"        return matchingTasks;"},{"lineNumber":127,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":129,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"gloon99"},"content":"     * returns the list of tasks that occur on the given date"},{"lineNumber":131,"author":{"gitId":"gloon99"},"content":"     * @param date the given date to search for in the task list"},{"lineNumber":132,"author":{"gitId":"gloon99"},"content":"     * @return an array list containing the tasks that match the given date"},{"lineNumber":133,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"gloon99"},"content":"    public ArrayList\u003cTask\u003e getTasksOnDate(LocalDate date) {"},{"lineNumber":135,"author":{"gitId":"gloon99"},"content":"        ArrayList\u003cTask\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":136,"author":{"gitId":"gloon99"},"content":"        for (Task task : tasks) {"},{"lineNumber":137,"author":{"gitId":"gloon99"},"content":"            if (task.getDate() !\u003d null) {"},{"lineNumber":138,"author":{"gitId":"gloon99"},"content":"                if (task.getDate().equals(date)) {"},{"lineNumber":139,"author":{"gitId":"gloon99"},"content":"                    tasksOnDate.add(task);"},{"lineNumber":140,"author":{"gitId":"gloon99"},"content":"                }"},{"lineNumber":141,"author":{"gitId":"gloon99"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"gloon99"},"content":"        return tasksOnDate;"},{"lineNumber":144,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":146,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"gloon99"},"content":"     * returns the tasks stored in the task list in the form of an array list"},{"lineNumber":148,"author":{"gitId":"gloon99"},"content":"     * @return the array list of tasks"},{"lineNumber":149,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"gloon99"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":151,"author":{"gitId":"gloon99"},"content":"        return this.tasks;"},{"lineNumber":152,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":154,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"gloon99"},"content":"     * deletes all of the tasks in the list"},{"lineNumber":156,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"gloon99"},"content":"    public void deleteAll() {"},{"lineNumber":158,"author":{"gitId":"gloon99"},"content":"        tasks.clear();"},{"lineNumber":159,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":161,"author":{"gitId":"gloon99"},"content":"    private Task getTaskNumber(int taskNumber) throws ShiroInvalidIndexException {"},{"lineNumber":162,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"gloon99"},"content":"            return this.tasks.get(taskNumber);"},{"lineNumber":164,"author":{"gitId":"gloon99"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":165,"author":{"gitId":"gloon99"},"content":"            String message \u003d \"sorry! the task number: \" +"},{"lineNumber":166,"author":{"gitId":"gloon99"},"content":"                    (taskNumber + 1) +"},{"lineNumber":167,"author":{"gitId":"gloon99"},"content":"                    \" does not exist in your list\";"},{"lineNumber":168,"author":{"gitId":"gloon99"},"content":"            throw new ShiroInvalidIndexException(message);"},{"lineNumber":169,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":171}},{"path":"src/main/java/shiro/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.task;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":" * represents a to do task"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"public class ToDo extends Task{"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"     * creates a new to do task based on the given description"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"     * @param taskDescription the full description of the to do task in the following format:"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"     *                        \"todo todo_task_description\""},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"    public ToDo(String taskDescription) {"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"        this.task \u003d taskDescription;"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"        this.done \u003d false;"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"     * returns a string representation of the to do task"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"     * @return string representation of the to do task"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"     * encodes the to do task to a more appropriate format for storage"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"     * @return the encoded version of the to do task"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    public String encode() {"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        return \"T | \" +"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"                this.isDoneInt() + \" | \" +"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"                this.task;"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    public LocalDate getDate() {"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"        return null;"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"     * decodes a given line of text and transforms it into a to do task"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"     * @param string the line of text to decode"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"     * @return the to do task that has been decoded from the given input"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"    public static ToDo decode(String string) {"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"        String[] split \u003d string.split(\" \\\\| \");"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"        String taskDescription \u003d split[2];"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"        ToDo todo \u003d new ToDo(taskDescription);"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"        if (split[1].contains(\"1\")) {"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"            todo.markAsDone();"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"        return todo;"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":62}},{"path":"src/main/java/shiro/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.ui;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"        dialog.setStyle(\"-fx-background-color: rgb(255, 230, 242); \" +"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"                \"-fx-background-radius: 15;\" +"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"                \"-fx-padding: 7.5;\" +"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"                \"-fx-text-fill: rgb(153, 0, 51);\" +"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"                \"-fx-border-color: rgb(255, 204, 229);\" +"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"                \"-fx-border-radius: 15;\");"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"    protected static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"        return new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"    protected static DialogBox getShiroDialog(String text, Image img) {"},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"        db.flip();"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"        return db;"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":67}},{"path":"src/main/java/shiro/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"package shiro.ui;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import shiro.Shiro;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"import shiro.command.CommandResult;"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.ShiroException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.message.Message;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":" */"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    private Shiro shiro;"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"    private final Image USER_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/Penguinny.png\"));"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"    private final Image SHIRO_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/Shiro.png\"));"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"     * initializes the main window and send the welcome message to user"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":39,"author":{"gitId":"gloon99"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":40,"author":{"gitId":"gloon99"},"content":"                DialogBox.getShiroDialog(Message.welcomeMessage(), SHIRO_IMAGE));"},{"lineNumber":41,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":43,"author":{"gitId":"gloon99"},"content":"    public void setShiro(Shiro d) {"},{"lineNumber":44,"author":{"gitId":"gloon99"},"content":"        shiro \u003d d;"},{"lineNumber":45,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":47,"author":{"gitId":"gloon99"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"gloon99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Shiro\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"gloon99"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"gloon99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"gloon99"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"gloon99"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"gloon99"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"gloon99"},"content":"        String response;"},{"lineNumber":55,"author":{"gitId":"gloon99"},"content":"        CommandResult result \u003d null;"},{"lineNumber":56,"author":{"gitId":"gloon99"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"gloon99"},"content":"            result \u003d shiro.getResponse(userInput.getText());"},{"lineNumber":58,"author":{"gitId":"gloon99"},"content":"            response \u003d result.getFeedbackToUser();"},{"lineNumber":59,"author":{"gitId":"gloon99"},"content":"        } catch (ShiroException e) {"},{"lineNumber":60,"author":{"gitId":"gloon99"},"content":"            response \u003d e.getMessage();"},{"lineNumber":61,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"gloon99"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":63,"author":{"gitId":"gloon99"},"content":"                DialogBox.getUserDialog(input, USER_IMAGE),"},{"lineNumber":64,"author":{"gitId":"gloon99"},"content":"                DialogBox.getShiroDialog(response, SHIRO_IMAGE)"},{"lineNumber":65,"author":{"gitId":"gloon99"},"content":"        );"},{"lineNumber":66,"author":{"gitId":"gloon99"},"content":"        userInput.clear();"},{"lineNumber":67,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":68,"author":{"gitId":"gloon99"},"content":"        if (result \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitId":"gloon99"},"content":"            return;"},{"lineNumber":70,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":72,"author":{"gitId":"gloon99"},"content":"        if (result.isExit()) {"},{"lineNumber":73,"author":{"gitId":"gloon99"},"content":"            System.exit(0);"},{"lineNumber":74,"author":{"gitId":"gloon99"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"gloon99"},"content":"}"},{"lineNumber":77,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":78,"author":{"gitId":"gloon99"},"content":""}],"authorContributionMap":{"gloon99":78}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"500.0\" style\u003d\"-fx-max-height: \u0026quot;Infinity\u0026quot;; -fx-background-color: transparent;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" style\u003d\"-fx-background-color: rgb(230, 255, 230); -fx-background-radius: 15; -fx-padding: 7.5; -fx-text-fill: rgb(0, 125, 0); -fx-border-color: rgb(179, 255, 179); -fx-border-radius: 15;\" stylesheets\u003d\"@stylesheet.css\" text\u003d\"label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"            \u003cInsets /\u003e "},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"         \u003c/opaqueInsets\u003e"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"         \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"         \u003c/font\u003e"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"      \u003c/Label\u003e"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"            \u003cInsets right\u003d\"5.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"  \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"  \u003cpadding\u003e"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"  \u003c/padding\u003e"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"      \u003cInsets /\u003e"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"gloon99":33}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"\u003c?import java.lang.String?\u003e"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.geometry.Point3D?\u003e"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"\u003cAnchorPane maxHeight\u003d\"700.0\" maxWidth\u003d\"500.0\" minHeight\u003d\"700.0\" minWidth\u003d\"500.0\" prefHeight\u003d\"700.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: rgb(214, 239, 243);\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"shiro.ui.MainWindow\"\u003e"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"  \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    \u003cTextField fx:id\u003d\"userInput\" alignment\u003d\"BOTTOM_LEFT\" layoutX\u003d\"7.0\" layoutY\u003d\"663.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"411.0\" promptText\u003d\"send me a message!\" style\u003d\"-fx-background-radius: 10; -fx-background-color: rgb(230, 204, 255);\" styleClass\u003d\"userInput\" stylesheets\u003d\"@stylesheet.css\"\u003e"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"         \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    \u003cButton fx:id\u003d\"sendButton\" graphicTextGap\u003d\"0.0\" layoutX\u003d\"425.0\" layoutY\u003d\"663.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"69.0\" style\u003d\"-fx-background-radius: 10; -fx-background-color: FFFFCC;\" styleClass\u003d\"sendButton\" stylesheets\u003d\"@stylesheet.css\" text\u003d\"ENTER\"\u003e"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"         \u003cfont\u003e"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"            \u003cFont name\u003d\"Comic Sans MS Bold\" size\u003d\"13.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"gloon99"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":22,"author":{"gitId":"gloon99"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"0.0\" prefHeight\u003d\"656.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background: transparent;\" stylesheets\u003d\"@stylesheet.css\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":23,"author":{"gitId":"gloon99"},"content":"      \u003ccontent\u003e"},{"lineNumber":24,"author":{"gitId":"gloon99"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"656.0\" prefWidth\u003d\"482.0\"\u003e"},{"lineNumber":25,"author":{"gitId":"gloon99"},"content":"               \u003crotationAxis\u003e"},{"lineNumber":26,"author":{"gitId":"gloon99"},"content":"                  \u003cPoint3D /\u003e"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"               \u003c/rotationAxis\u003e\u003c/VBox\u003e"},{"lineNumber":28,"author":{"gitId":"gloon99"},"content":"      \u003c/content\u003e"},{"lineNumber":29,"author":{"gitId":"gloon99"},"content":"         \u003cstyleClass\u003e"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"            \u003cString fx:value\u003d\"background\" /\u003e"},{"lineNumber":31,"author":{"gitId":"gloon99"},"content":"            \u003cString fx:value\u003d\"scroll-bar:vertical\" /\u003e"},{"lineNumber":32,"author":{"gitId":"gloon99"},"content":"         \u003c/styleClass\u003e"},{"lineNumber":33,"author":{"gitId":"gloon99"},"content":"         \u003crotationAxis\u003e"},{"lineNumber":34,"author":{"gitId":"gloon99"},"content":"            \u003cPoint3D /\u003e"},{"lineNumber":35,"author":{"gitId":"gloon99"},"content":"         \u003c/rotationAxis\u003e"},{"lineNumber":36,"author":{"gitId":"gloon99"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":37,"author":{"gitId":"gloon99"},"content":"  \u003c/children\u003e"},{"lineNumber":38,"author":{"gitId":"gloon99"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"gloon99":38}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.task.Event;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"    public void event() {"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"        Event event \u003d new Event(\"event project meeting /at 2020-08-30\");"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"        String encodedEvent \u003d event.encode();"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"        assertEquals(\"E | 0 | project meeting | 2020-08-30\", encodedEvent);"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":14}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"import shiro.exception.EmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"import shiro.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":""},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"public class ToDoTest {"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"    public void todo() throws EmptyDescriptionException {"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"        ToDo todo \u003d new ToDo(\"todo read book\");"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"        todo.markAsDone();"},{"lineNumber":13,"author":{"gitId":"gloon99"},"content":"        assertEquals(true, todo.isDone());"},{"lineNumber":14,"author":{"gitId":"gloon99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"gloon99"},"content":"}"}],"authorContributionMap":{"gloon99":15}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"[T][✘] read book"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":"[T][✘] read book"},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"[T][✘] read book"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"[T][✘] read book"}],"authorContributionMap":{"gloon99":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"bye"}],"authorContributionMap":{"gloon99":1}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\shiro.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"java -classpath ..\\bin shiro \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"gloon99":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"gloon99"},"content":"if"},{"lineNumber":17,"author":{"gitId":"gloon99"},"content":"  ! ("},{"lineNumber":18,"author":{"gitId":"gloon99"},"content":"    find ../src/main/java -name \"*.java\" \u003esources.txt"},{"lineNumber":19,"author":{"gitId":"gloon99"},"content":"    javac -cp ../src -Xlint:none -d ../bin @sources.txt"},{"lineNumber":20,"author":{"gitId":"gloon99"},"content":"  )"},{"lineNumber":21,"author":{"gitId":"-"},"content":"then"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":24,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":27,"author":{"gitId":"gloon99"},"content":"java -classpath ../bin shiro \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"gloon99"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"gloon99":7,"-":31}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gloon99"},"content":"../src/main/java/TaskList.java"},{"lineNumber":2,"author":{"gitId":"gloon99"},"content":"../src/main/java/EmptyDescriptionException.java"},{"lineNumber":3,"author":{"gitId":"gloon99"},"content":"../src/main/java/Storage.java"},{"lineNumber":4,"author":{"gitId":"gloon99"},"content":"../src/main/java/Parser.java"},{"lineNumber":5,"author":{"gitId":"gloon99"},"content":"../src/main/java/ReadIn.java"},{"lineNumber":6,"author":{"gitId":"gloon99"},"content":"../src/main/java/Ui.java"},{"lineNumber":7,"author":{"gitId":"gloon99"},"content":"../src/main/java/Event.java"},{"lineNumber":8,"author":{"gitId":"gloon99"},"content":"../src/main/java/Task.java"},{"lineNumber":9,"author":{"gitId":"gloon99"},"content":"../src/main/java/shiro.java"},{"lineNumber":10,"author":{"gitId":"gloon99"},"content":"../src/main/java/Deadline.java"},{"lineNumber":11,"author":{"gitId":"gloon99"},"content":"../src/main/java/ToDo.java"},{"lineNumber":12,"author":{"gitId":"gloon99"},"content":"../src/main/java/shiroException.java"}],"authorContributionMap":{"gloon99":12}}]
