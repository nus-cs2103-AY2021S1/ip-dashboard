[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    testCompile group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    compile group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            srcDirs \u003d [\"src\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            srcDirs \u003d [\"src/test\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    mainClassName \u003d \"main.Duke\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 36,
      "-": 42
    }
  },
  {
    "path": "src/main/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.gui.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 11
    }
  },
  {
    "path": "src/main/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the add deadline command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class AddDeadlineCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an AddDeadlineCommand instance and the Deadline object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * with the description and the deadline of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param dateTime the deadline of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        deadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Adds the Deadline object into the task list and prints add success"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * from the ui."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string indicating the task has been added successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printAddSuccess(deadline, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof AddDeadlineCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddDeadlineCommand o \u003d (AddDeadlineCommand) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.deadline.equals(o.deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 59
    }
  },
  {
    "path": "src/main/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the add event command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class AddEventCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an AddEventCommand instance and the Event object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * with the description and the deadline of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param dateTime the time of the event occurring."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        event \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Adds the Event object into the task list and prints add success"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * from the ui."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string indicating the task has been added successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printAddSuccess(event, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof AddEventCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddEventCommand o \u003d (AddEventCommand) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.event.equals(o.event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 59
    }
  },
  {
    "path": "src/main/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the add todo command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class AddTodoCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Todo todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an AddTodoCommand instance and the Todo object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * with the description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Adds the Todo object into the task list and prints add success"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * from the ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string indicating the task has been added successfully."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printAddSuccess(todo, tasks.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof AddTodoCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            AddTodoCommand o \u003d (AddTodoCommand) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.todo.equals(o.todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 56
    }
  },
  {
    "path": "src/main/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the commands that a user can give to the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Executes the command and prints out response from the ui and updates"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * the task list accordingly."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string that indicates the execution of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidTaskException if task is not found in list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    String execute(Ui ui, TaskList tasks) throws InvalidTaskException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Checks if there are still commands after this command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return false if ExitCommand, else true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    boolean hasCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 30
    }
  },
  {
    "path": "src/main/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the delete command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a DeleteCommand instance with the index of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param taskNum the index of the task in the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Marks the task at the index of the task list indicated by the taskNum"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string indicating the task has been removed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidTaskException if the taskNum is outside of the size of the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) throws InvalidTaskException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (taskNum \u003c 1 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Task removed \u003d tasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printRemoveSuccess(removed, tasks.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            DeleteCommand o \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.taskNum \u003d\u003d o.taskNum;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 62
    }
  },
  {
    "path": "src/main/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the done command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a DoneCommand instance with the index of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param taskNum the index of the task in the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the string indicating the task has been successfully marked as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string indicating the task has been successfully marked as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidTaskException if the taskNum is outside of the size of the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) throws InvalidTaskException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (taskNum \u003c 1 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new InvalidTaskException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Task task \u003d tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printDoneSuccess(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof DoneCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            DoneCommand o \u003d (DoneCommand) obj;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.taskNum \u003d\u003d o.taskNum;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 61
    }
  },
  {
    "path": "src/main/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the exit command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Does not execute anything."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string bidding farewell to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns false as there are no more commands after this."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return obj instanceof ExitCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 39
    }
  },
  {
    "path": "src/main/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the done command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final String searchTerm;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a FindCommand instance with the string to search for."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param searchTerm the string to search the task list for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public FindCommand(String searchTerm) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.searchTerm \u003d searchTerm;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Looks through the task list and constructs a new list with the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * tasks that have names that contain the search terms."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string showing all tasks found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        TaskList found \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (searchTerm.length() \u003e 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            for (int j \u003d 0; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Task task \u003d tasks.get(j);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                if (task.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    found.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printFoundList(found);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof FindCommand) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            FindCommand o \u003d (FindCommand) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.searchTerm.equals(o.searchTerm);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 63
    }
  },
  {
    "path": "src/main/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the list command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Prints out the entire task list via the ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param ui the ui used to print out responses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string showing all tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String execute(Ui ui, TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return ui.printTaskList(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns true since there can still be commands after this."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return obj instanceof ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 39
    }
  },
  {
    "path": "src/main/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate any exceptions in the duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an DukeException instance with a message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param message the message for the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 19
    }
  },
  {
    "path": "src/main/exception/EmptyMessageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate the description of a task is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class EmptyMessageException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an EmptyMessageException instance with the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * messaged tailored for the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param command the command that does not have a description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public EmptyMessageException(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(String.format(\"The description of a %s cannot be empty.\", command));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 20
    }
  },
  {
    "path": "src/main/exception/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate the date of the deadline or event is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an InvalidDateException instance with a message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param message the message for the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public InvalidDateException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 19
    }
  },
  {
    "path": "src/main/exception/InvalidDeadlineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate the deadline format is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class InvalidDeadlineFormatException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an InvalidDeadlineFormatException instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public InvalidDeadlineFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(\"A deadline needs to have this format:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"\\\"task name\\\" /by \\\"task deadline\\\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 19
    }
  },
  {
    "path": "src/main/exception/InvalidEventFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate the event format is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class InvalidEventFormatException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an InvalidEventFormatException instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public InvalidEventFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(\"An event needs to have this format:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                + \"\\\"task name\\\" /at \\\"event time\\\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 19
    }
  },
  {
    "path": "src/main/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate the task selected is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an InvalidTaskException instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public InvalidTaskException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(\"Your selected task does not exist!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 18
    }
  },
  {
    "path": "src/main/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Thrown to indicate input command is unknown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an UnknownCommandException instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(\"I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 18
    }
  },
  {
    "path": "src/main/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private DialogBox(Label text, ImageView displayPicture) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.displayPicture \u003d displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a DialogBox instance with dialog and display picture of user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param text the dialog"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param displayPicture the picture of the person speaking"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static DialogBox getUserDialog(Label text, ImageView displayPicture) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return new DialogBox(text, displayPicture);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a DialogBox instance with dialog and display picture of Duke"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param text the dialog"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param displayPicture the picture of the person speaking"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static DialogBox getDukeDialog(Label text, ImageView displayPicture) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, displayPicture);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 53
    }
  },
  {
    "path": "src/main/gui/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Duke application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Image userImage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Image dukeImage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs the duke application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userImage \u003d new Image("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dukeImage \u003d new Image("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Button sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ImageView dukeImageView \u003d new ImageView(dukeImage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dukeImageView.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        DialogBox dukeGreeting \u003d DialogBox"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .getDukeDialog(new Label(ui.printGreeting()), dukeImageView);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dukeGreeting.setSpacing(10);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dialogContainer.getChildren().addAll(dukeGreeting);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Storage.setTasks(tasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            dukeImageView \u003d new ImageView(dukeImage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            dukeImageView.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            DialogBox dukeError \u003d DialogBox"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    .getDukeDialog(new Label(ui.printError()), dukeImageView);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            dukeError.setSpacing(10);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            dialogContainer.getChildren().addAll(dukeError);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        sendButton.setOnMouseClicked(event -\u003e handleUserInput());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userInput.setOnAction(event -\u003e handleUserInput());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dialogContainer.heightProperty()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                .addListener(observable -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        boolean hasCommand \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Insets padding \u003d new Insets(10, 0, 10, 0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ImageView userImageView \u003d new ImageView(userImage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        ImageView dukeImageView \u003d new ImageView(dukeImage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userImageView.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dukeImageView.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String[] splitInput \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(splitInput);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            output \u003d command.execute(ui, tasks);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            hasCommand \u003d command.hasCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            output \u003d e.getMessage();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Label userText \u003d new Label(input);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Label dukeText \u003d new Label(output);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        DialogBox userDialog \u003d DialogBox.getUserDialog(userText, userImageView);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        DialogBox dukeDialog \u003d DialogBox.getDukeDialog(dukeText, dukeImageView);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userDialog.setPadding(padding);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dukeDialog.setPadding(padding);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userDialog.setSpacing(10);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dukeDialog.setSpacing(10);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        dialogContainer.getChildren().addAll(userDialog, dukeDialog);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (!hasCommand) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                Storage.write(tasks);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                DialogBox dukeError \u003d DialogBox"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        .getDukeDialog(new Label(ui.printError()), dukeImageView);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                dialogContainer.getChildren().addAll(dukeError);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 185,
      "-": 2
    }
  },
  {
    "path": "src/main/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.AddEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.AddTodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.EmptyMessageException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidDateException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidDeadlineFormatException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidEventFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Handles the parsing of user inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static LocalDateTime toDateTime(String dateTime) throws InvalidDateException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String[] dateTimeSplit \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (dateTimeSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new InvalidDateException(\"Your date needs to\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \" have this format:\\n\\\"YYYY-MM-DD HHMM\\\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String[] date \u003d dateTimeSplit[0].split(\"-\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new InvalidDateException(\"Your date needs to\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \" have this format:\\n\\\"YYYY-MM-DD\\\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new InvalidDateException(\"Your time needs to\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \" have this format:\\n\\\"HHMM\\\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            int year \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            int day \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new InvalidDateException(\"Please check that you\u0027ve\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    + \" entered the date and time correctly\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static Command parseAdd(String[] input)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws InvalidDeadlineFormatException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                InvalidDateException,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                InvalidEventFormatException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                UnknownCommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String command \u003d input[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String description \u003d input[1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String[] nameAndTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_TODO:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new AddTodoCommand(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            nameAndTime \u003d description.split(\" /by \", 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (nameAndTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new InvalidDeadlineFormatException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new AddDeadlineCommand(nameAndTime[0], toDateTime(nameAndTime[1]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_EVENT:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            nameAndTime \u003d description.split(\" /at \", 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (nameAndTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new InvalidEventFormatException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new AddEventCommand(nameAndTime[0], toDateTime(nameAndTime[1]));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Parses the input in the form of a string array and returns the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * corresponding Command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param input the user input as a string array."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return a Command based on the input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidTaskException if the selected task does not exist."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws EmptyMessageException if the description of the task is empty."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws UnknownCommandException if the command given is unknown."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidDateException if the deadline or event dates are invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidDeadlineFormatException if the format of deadline"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * command is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws InvalidEventFormatException if the format of event is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static Command parse(String[] input)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throws InvalidTaskException,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                EmptyMessageException,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                UnknownCommandException,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                InvalidDateException,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                InvalidDeadlineFormatException,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                InvalidEventFormatException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String command \u003d input[0];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        boolean isSingleArgument \u003d input.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_DONE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (isSingleArgument) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new InvalidTaskException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            taskNum \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new DoneCommand(taskNum);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (isSingleArgument) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new InvalidTaskException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            taskNum \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_TODO:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_DEADLINE:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_EVENT:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (isSingleArgument) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throw new EmptyMessageException(command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return parseAdd(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        case COMMAND_FIND:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            if (isSingleArgument) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                return new FindCommand(\"\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return new FindCommand(input[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 158
    }
  },
  {
    "path": "src/main/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Handles the reading and writing of tasks to disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Writes the list of tasks to disk as a csv file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IOException if there are any issues regarding files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void write(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String currDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Path folderPath \u003d Paths.get(currDir, \"data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (!Files.exists(folderPath)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Files.createDirectories(folderPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Path filePath \u003d Paths.get(currDir, \"data\", \"tasks.csv\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        bw.write(\"Task Type,Task Time,Done State,Task Name\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            bw.write(tasks.get(i).write());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Reads the list of tasks from the csv file and sets the task list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * to the tasks from the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @throws IOException if there are any issues regarding files."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public static void setTasks(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String currDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        Path filePath \u003d Paths.get(currDir, \"data\", \"tasks.csv\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        File file \u003d filePath.toFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        BufferedReader br \u003d Files.newBufferedReader(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        br.readLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        String line \u003d br.readLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String[] task \u003d line.split(\",\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            line \u003d br.readLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String taskType \u003d task[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String taskTime \u003d task[1];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            String taskName \u003d task[3];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            boolean taskDoneState \u003d task[2].equals(\"1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                tasks.add(new Todo(taskName, taskDoneState));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                tasks.add(new Deadline(taskName, taskTime, taskDoneState));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                tasks.add(new Event(taskName, taskTime, taskDoneState));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 100
    }
  },
  {
    "path": "src/main/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents tasks with a deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Deadline instance with the name of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * task and time of deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param time the deadline of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Deadline(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Deadline instance with the name of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * task, time of deadline and the done state of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param time the deadline of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param doneState the done state of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Deadline(String name, String time, boolean doneState) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(name, doneState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.time \u003d LocalDateTime.parse(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the string meant for writing to disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string meant for writing to disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String write() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"D,%s%s\", time, super.write());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                time.format(FORMATTER));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof Deadline) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Deadline o \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return super.equals(o) \u0026\u0026 this.time.equals(o.time);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 64
    }
  },
  {
    "path": "src/main/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            DateTimeFormatter.ofPattern(\"EEEE, dd MMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an Event instance with the name of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * task and the event time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param time the event time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Event(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Event instance with the name of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * task, time of deadline and the done state of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param time the event time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param doneState the done state of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Event(String name, String time, boolean doneState) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(name, doneState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.time \u003d LocalDateTime.parse(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the string meant for writing to disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string meant for writing to disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String write() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"E,%s%s\", time, super.write());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                time.format(FORMATTER));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof Event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Event o \u003d (Event) obj;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return super.equals(o) \u0026\u0026 this.time.equals(o.time);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 64
    }
  },
  {
    "path": "src/main/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private boolean doneState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Task instance with the name of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        doneState \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Task instance with the name of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * and the done state of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param doneState the done state of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Task(String name, boolean doneState) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.doneState \u003d doneState;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Gets the name of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the name of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private String doneTag() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return doneState ? \"[\\u2713]\" : \"[\\u2718]\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Sets the done state of the task to true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        doneState \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the string meant for writing to disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string meant for writing to disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String write() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\",%d,%s\\n\", doneState ? 1 : 0, name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"%s %s\", doneTag(), name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof Task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Task o \u003d (Task) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return this.name.equals(o.name) \u0026\u0026 this.doneState \u003d\u003d o.doneState;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 74
    }
  },
  {
    "path": "src/main/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs an instance of TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Removes a task from the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the task that is removed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Gets the size of the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the size of the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Gets the task from the task list that"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * corresponds to the index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the task that corresponds to the index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 57
    }
  },
  {
    "path": "src/main/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents todo tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Todo instance with the name of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Constructs a Todo instance with the name of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * and the done state of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param name the name of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param doneState the done state of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public Todo(String name, boolean doneState) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        super(name, doneState);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the string meant for writing to disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string meant for writing to disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String write() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"T,%s\", super.write());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (obj instanceof Todo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Task o \u003d (Task) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return super.equals(o);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 52
    }
  },
  {
    "path": "src/main/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * Represents the ui of duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author Joshua Liang XingYa"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @author joshualiang.xy@gmail.com"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @version v0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " * @since v0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the string bidding the user farewell."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string bidding the user farewell."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns the greeting message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the greeting message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printGreeting() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a string with all tasks listed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string with all tasks listed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return \"There are no tasks yet!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            list.append(String.format(\"     %d.%s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a string with all the tasks found via the find command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param tasks the tasks found via the find command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return a string with all the tasks found via the find command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printFoundList(TaskList tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        StringBuilder foundList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            return \"There are no tasks found!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            foundList \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            foundList.append(String.format(\"%d.%s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return foundList.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a string indicating a task has been added successfully."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param task the task added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param taskNum the number of tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return the string indicating a task has been added successfully."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printAddSuccess(Task task, int taskNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        boolean isSingular \u003d taskNum \u003d\u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        + \"Now you have %d %s in the list.\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                task, taskNum, isSingular ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a string indicating a task has been marked as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param task the task marked as done."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return a string indicating a task has been marked as done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printDoneSuccess(Task task) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a string indicating a task has been removed successfully."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param removed the task removed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @param taskNum the number of tasks in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return a string indicating a task has been removed successfully."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printRemoveSuccess(Task removed, int taskNum) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        boolean isSingular \u003d taskNum \u003d\u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return String.format(\"Noted. I\u0027ve removed this task:\\n%s\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                        + \"Now you have %d %s in the list.\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                removed, taskNum, isSingular ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * Returns a string with a generic error message."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     * @return a string with a generic error message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    public String printError() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        return \"Seems like something went wrong!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 113
    }
  },
  {
    "path": "src/test/main/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "package main.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.AddEventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.AddTodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.DoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.command.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.EmptyMessageException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidDateException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidDeadlineFormatException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidEventFormatException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "import main.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"bye command\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Bye {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate exit command object\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_byeCommand_objectExitCommand() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"bye\" });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new ExitCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"list command\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class List {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate list command object\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_listCommand_objectListCommand() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"list\" });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new ListCommand());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"done command\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Done {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate done command object\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_doneCommand_objectDoneCommand() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"done\", \"1\" });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new DoneCommand(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate done command object with alt data\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_doneCommand_altDataDoneCommand() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"done\", \"4123\" });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new DoneCommand(4123));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if no second argument\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_doneCommandNoSecondArg_throwException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidTaskException exception \u003d assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidTaskException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"done\" }));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your selected task does not exist!\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"delete command\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Delete {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate delete command object\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deleteCommand_objectDeleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"delete\", \"1\" });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new DeleteCommand(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate delete command object with alt data\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deleteCommand_altDataDeleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"delete\", \"12736\" });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new DeleteCommand(12736));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if no second argument\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deleteCommandNoSecondArg_throwException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidTaskException exception \u003d assertThrows("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidTaskException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"delete\" }));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your selected task does not exist!\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"todo command\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Todo {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate add todo object\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_todoCommand_objectAddTodoCommand()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"todo\", \"name\" });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new AddTodoCommand(\"name\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate add todo object with alt data\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_todoCommand_altDataAddTodoCommand() throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse(new String[] { \"todo\", \"another\" });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new AddTodoCommand(\"another\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if no second argument\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_todoCommandNoSecondArg_throwException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EmptyMessageException exception \u003d assertThrows("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EmptyMessageException.class, () -\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"todo\" }));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"The description of a todo cannot be empty.\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"deadline command\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Deadline {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate add deadline object\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommand_objectAddDeadlineCommand()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new String[] { \"deadline\", \"name /by 1400-1-31 1453\" });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new AddDeadlineCommand(\"name\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    LocalDateTime.of(1400, 1, 31, 14, 53)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate add deadline object with alt data\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommand_altDataAddDeadlineCommand()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new String[] { \"deadline\", \"test /by 1285-5-3 2144\" });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new AddDeadlineCommand(\"test\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    LocalDateTime.of(1285, 5, 3, 21, 44)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if no second argument\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandNoSecondArg_throwException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EmptyMessageException exception \u003d assertThrows("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EmptyMessageException.class, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"deadline\" }));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"The description of a deadline cannot be empty.\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if deadline format is incorrect\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandWrongFormat_throwException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDeadlineFormatException exception \u003d assertThrows("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDeadlineFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"deadline\", \"name\" }));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"A deadline needs to have this format:\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \"\\\"task name\\\" /by \\\"task deadline\\\"\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time format has no spacing\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandNoSpacingTimeFormat_throwException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"deadline\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /by 1931-3-30\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your date needs to\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \" have this format:\\n\\\"YYYY-MM-DD HHMM\\\"\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if date format is not YYYY-MM-DD\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandWrongDateFormat_throwException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"deadline\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /by 1992-03 1923\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your date needs to\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \" have this format:\\n\\\"YYYY-MM-DD\\\"\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time format is not HHMM\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandWrongTimeFormat_throwException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"deadline\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /by 1992-03-12 12394\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your time needs to have this format:\\n\\\"HHMM\\\"\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time not in integers\")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandNonIntegerTime_throwException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"deadline\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /by abc-12-1 1923\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Please check that you\u0027ve entered \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \"the date and time correctly\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time is not possible\")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_deadlineCommandImpossibleTime_throwException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"deadline\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /by 1998-12-45 1923\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Please check that you\u0027ve entered\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \" the date and time correctly\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"event command\")"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Event {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate add event object\")"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommand_objectAddEventCommand()"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DukeException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new String[] { \"event\", \"name /at 1400-1-31 1453\" });"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new AddEventCommand(\"name\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    LocalDateTime.of(1400, 1, 31, 14, 53)));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate add event object with alt data\")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommand_altDataAddEventCommand()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DukeException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            Command command \u003d Parser.parse("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    new String[] { \"event\", \"test /at 1285-5-3 2144\" });"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(command, new AddEventCommand(\"test\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    LocalDateTime.of(1285, 5, 3, 21, 44)));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if no second argument\")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandNoSecondArg_throwException() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            EmptyMessageException exception \u003d assertThrows("
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    EmptyMessageException.class, () -\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"event\" }));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"The description of a event cannot be empty.\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if event format is incorrect\")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandWrongFormat_throwException() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidEventFormatException exception \u003d assertThrows("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidEventFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"event\", \"name\" }));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"An event needs to have this format:\\n\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \"\\\"task name\\\" /at \\\"event time\\\"\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time format has no spacing\")"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandTimeNoSpacing_throwException() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"event\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /at 1931-3-30\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your date needs to\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \" have this format:\\n\\\"YYYY-MM-DD HHMM\\\"\","
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if date format is not YYYY-MM-DD\")"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandWrongDateFormat_throwException() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"event\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /at 1992-03 1923\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your date needs to have this format:\\n\\\"YYYY-MM-DD\\\"\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time format is not HHMM\")"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandWrongTimeFormat_throwException() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"event\","
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /at 1992-03-12 12394\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Your time needs to\""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \" have this format:\\n\\\"HHMM\\\"\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time not in integers\")"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandNonIntegerTime_throwException() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"event\","
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /at abc-12-1 1923\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Please check that you\u0027ve entered \""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \"the date and time correctly\","
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception if time is not possible\")"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_eventCommandImpossibleTime_throwException() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            InvalidDateException exception \u003d assertThrows("
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    InvalidDateException.class, () -\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"event\","
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                                \"name /at 1998-12-45 1923\""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            }));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"Please check that you\u0027ve entered \""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            + \"the date and time correctly\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"find command\")"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Find {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate find command object\")"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_findCommand_objectFindCommand() throws DukeException {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(new FindCommand(\"test\"),"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Parser.parse(new String[] { \"find\", \"test\" }));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate find command object\")"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_findCommand_altDataFindCommand() throws DukeException {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(new FindCommand(\"test\"),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Parser.parse(new String[] { \"find\", \"test\" }));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should generate find command object with empty search term\")"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_findCommand_emptySearchTermFindCommand()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                throws DukeException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(new FindCommand(\"\"),"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    Parser.parse(new String[] { \"find\" }));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    @DisplayName(\"unknown command\")"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    class Unknown {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        @DisplayName(\"should throw exception\")"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        public void parse_unknownCommand_throwException() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            UnknownCommandException exception \u003d assertThrows("
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    UnknownCommandException.class, () -\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                            Parser.parse(new String[] { \"yeet\" }));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means.\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "                    exception.getMessage());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 404
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "todo task 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline /by next time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by nexttime"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by year-month-day hourminute"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by 1993-12 1423"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by 1993-12-6 123"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by 1993-12-6 12345"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by abcd-12-6 2359"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by 1993-12-6 abcd"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by 1993-12-6 3560"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "deadline task 2 /by 1993-12-6 2359"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event /at right now"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at now"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at year-month-day hourminute"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at 1967-01 1423"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at 1967-01-31 123"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at 1967-01-31 12345"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at abcd-01-31 2359"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at 1967-01-31 abcd"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at 1967-01-31 3560"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "event task 3 /at 1967-01-31 1400"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "find"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "find 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "find 2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "find 3"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "find task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "find abc123"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "delete"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 48
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/**/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshualiangxy"
        },
        "content": "java -classpath ../bin/ main.gui.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "joshualiangxy": 2,
      "-": 36
    }
  }
]
