[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    mainClassName \u003d \"java.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Dook the all purpose chatbot to serve your human needs. Made from the finest IDEs, Dook will be the most"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * efficient task list you have ever laid your hands upon."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * To start Dook chatbot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // Initialise"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                ui.print(e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 44,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Parser class that helps to understand user input and returns the correct commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static Command parseDone(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.matches(\"done\\\\s*\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new EmptyArgumentException(\"duke.task.Task Index\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!input.matches(\"done \\\\d+\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidArgumentException(\"duke.task.Task Index\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String[] arr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        int index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static Command parseTodoTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.matches(\"todo\\\\s*\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new EmptyArgumentException(\"todo\u0027s description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new AddTaskCommand(new Todo(input.substring(5)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static Command parseDeadlineTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.matches(\"deadline\\\\s*\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new EmptyArgumentException(\"deadline\u0027s description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!input.matches(\"deadline .+/by \\\\d{4}-\\\\d{1,2}-\\\\d{1,2} \\\\d{4}\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidArgumentException(\"deadline\u0027s description (proper date format: yyyy-mm-dd HHmm)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String[] split \u003d input.substring(9).split(\"/by\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String dateTimeString \u003d split[1].stripLeading();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        LocalDateTime dateTime \u003d parseDateTime(dateTimeString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new AddTaskCommand(new Deadline(split[0].stripTrailing(), dateTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static Command parseEventTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.matches(\"event\\\\s*\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new EmptyArgumentException(\"event\u0027s description\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!input.matches(\"event .+/at \\\\d{4}-\\\\d{1,2}-\\\\d{1,2} \\\\d{4}\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidArgumentException(\"event description (proper date format: yyyy-mm-dd HHmm)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String[] split \u003d input.substring(6).split(\"/at\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String dateTimeString \u003d split[1].stripLeading();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new AddTaskCommand(new Event(split[0].stripTrailing(), parseDateTime(dateTimeString)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static Command parseDelete(String input) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.matches(\"delete\\\\s*\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new EmptyArgumentException(\"Task Index\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!input.matches(\"delete \\\\d+\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidArgumentException(\"Task Index\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String[] arr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        int index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private static Command parseFind(String input) throws EmptyArgumentException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.matches(\"find\\\\s*\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new EmptyArgumentException(\"find argument\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return new FindCommand(input.substring(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Parse a dateTime string of format : yyyy-mm-dd HHmm"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * and returns with format : yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param s  String to be parsed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return  LocalDateTime parsable string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static LocalDateTime parseDateTime(String s) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String[] dateTimeSplit \u003d s.split(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String date \u003d dateTimeSplit[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String hour \u003d dateTimeSplit[1].substring(0, 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String min \u003d dateTimeSplit[1].substring(2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return LocalDateTime.parse(date + \"T\" + hour + \":\" + min);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Main method of the Parser class, this will evaluate a input string and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * return the appropriate command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param input  Input to be parsed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return  Command Object that represents the input\u0027s desires."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @throws DukeException  If input is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.matches(\"done.*\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return parseDone(input);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.matches(\"todo.*\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return parseTodoTask(input);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.matches(\"deadline.*\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return parseDeadlineTask(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.matches(\"event.*\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return parseEventTask(input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.matches(\"delete.*\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return parseDelete(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else if (input.matches(\"find.*\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return parseFind(input);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 122
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Deals with all Storage operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    static private File memoryFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private List\u003cTask\u003e parseData(File f) throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            String str \u003d s.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            String[] args \u003d str.split(\" \\\\| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            boolean done \u003d args[1].equals(\"1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            String description \u003d args[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            switch (args[0]) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                task \u003d new Deadline(description, LocalDateTime.parse(args[3]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                task \u003d new Event(description, LocalDateTime.parse(args[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                if (done) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                System.out.println(Ui.INDENT + \"Corrupted Data Entry found : \" + str);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Writes given task to memory."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param task  Task to be saved."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @throws IOException  If FileWriter faces writing issues."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void writeData(Task task) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path.toString(), true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        fw.write(task.convertToData() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Rewrites entire memory file with TaskList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param tasks  TaskList to be saved."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @throws IOException  If FileWriter faces exceptions"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void rewriteData(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            fw.write(t.convertToData() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Initialise a TaskList from memory file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param tasks  TaskList to be initialised."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void initialiseTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.out.print(Ui.DIVIDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        memoryFile \u003d new File(path.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            System.out.println(Ui.INDENT + \"Loading Tasks from Memory...\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                List\u003cTask\u003e memoryList \u003d parseData(memoryFile);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                tasks.addAll(memoryList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                System.out.println(Ui.INDENT + \"Error loading data.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            System.out.println(Ui.INDENT + \"Load Successful!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            System.out.println(Ui.INDENT + \"No Memory Found.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                System.out.println(Ui.INDENT + \"Creating new memory file..\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                fw.write(\"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                System.out.println(Ui.INDENT + \"Done.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                System.out.print(Ui.INDENT + e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.out.print(Ui.DIVIDER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 125
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.WriteToStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Represents a list of Task objects. Contains functions to manipulate tasklist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public TaskList(Storage store) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.store \u003d store;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        store.initialiseTasks(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Returns TaskList\u0027s Storage Object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return TaskList\u0027s Storage Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Storage getStore() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void addTask(Task task) throws WriteToStorageException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            store.writeData(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new WriteToStorageException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Mark a task in TaskList as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param index Index of the task to be set as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @throws WriteToStorageException if Storage faces issues writing tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void doneTask(int index) throws WriteToStorageException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            store.rewriteData(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new WriteToStorageException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return \"No task added yet!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            StringBuilder result \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                result.append(i + 1).append(\". \").append(tasks.get(i).toString()).append(i + 1 \u003d\u003d tasks.size()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        ? \"\" : \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Delete a task from list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param index Index of task to be removed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return return deleted Task object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Searches through TaskList to find all Task that contains query."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param query  Query to be searched"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return  returns list of tasks that contains query."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public List\u003cTask\u003e findAll(String query) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        List\u003cTask\u003e ts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            if (t.contains(query)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                ts.add(t);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return ts;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 98
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public static final String DIVIDER \u003d INDENT + \"-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void print(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String[] arr \u003d str.split(\"\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        StringBuilder res \u003d new StringBuilder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        for (String s : arr) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            res.append(INDENT).append(s).append(\"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String intro \u003d DIVIDER + res.toString() + DIVIDER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.out.println(intro);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                \" .----------------.  .----------------.  .----------------.  .----------------.\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| .--------------. || .--------------. || .--------------. || .--------------. |\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| |  ________    | || |     ____     | || |     ____     | || |  ___  ____   | |\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| | |_   ___ `.  | || |   .\u0027    `.   | || |   .\u0027    `.   | || | |_  ||_  _|  | |\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| |   | |   `. \\\\ | || |  /  .--.  \\\\  | || |  /  .--.  \\\\  | || |   | |_/ /    | |\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| |   | |    | | | || |  | |    | |  | || |  | |    | |  | || |   |  __\u0027.    | |\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| |  _| |___.\u0027 / | || |  \\\\  `--\u0027  /  | || |  \\\\  `--\u0027  /  | || |  _| |  \\\\ \\\\_  | |\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| | |________.\u0027  | || |   `.____.\u0027   | || |   `.____.\u0027   | || | |____||____| | |\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| |              | || |              | || |              | || |              | |\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \"| \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                        \" \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String intro \u003d \"\\n\\n\" + logo + \"\\n\" + DIVIDER + INDENT + \"Hola! I am dook\\n\" + INDENT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                + \"how i can help u?\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        System.out.println(intro);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        print(\"see u later alligator\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 46
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class AddTaskCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui.print(\"Got it. I\u0027ve added this task:\\n  \" + task.toString() + \"\\nNow you have \" + tasks.size()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        AddTaskCommand that \u003d (AddTaskCommand) o;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.equals(task, that.task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.hash(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 42
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Executes a given command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param tasks  TaskList to be manipulated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param ui  Ui Object to handle user interactions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param store  Storage object to manage saving of data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Return true if command signals the termination of the chatbot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return  True if command terminates Dook and false if otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (index \u003e\u003d tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidArgumentException(\"index\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Task deleted \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui.print(\"Noted. I\u0027ve removed this task:\\n  \" + deleted.toString() + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.InvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (index \u003e\u003d tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            throw new InvalidArgumentException(\"index\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.doneTask(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui.print(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.getTask(index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList t, Ui ui, Storage store) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 17
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        List\u003cTask\u003e results \u003d tasks.findAll(query);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        String tasksString \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            ui.print(\"No matches found :(\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            for (int i \u003d 0; i \u003c results.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                tasksString +\u003d \"\" + (i + 1) + \".\" + results.get(i).toString() + (i + 1 \u003d\u003d tasks.size() ? \"\" : \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "            ui.print(\"Here are the matching tasks in your list:\\n\" + tasksString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage store) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        ui.print(tasks.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/CorruptedDataFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class CorruptedDataFileException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public CorruptedDataFileException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return String.format(\"data/duke.txt is corrupted.\") ;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"onosies there\u0027s an errorz\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class EmptyArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private String arg;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public EmptyArgumentException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.arg \u003d \"Arguments\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public EmptyArgumentException(String arg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.arg \u003d arg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return String.format(\"%s cant be empty bro\", arg) ;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class InvalidArgumentException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private String arg;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public InvalidArgumentException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.arg \u003d \"argument\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public InvalidArgumentException(String arg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.arg \u003d arg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return String.format(\"Invalid %s bro\", arg) ;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"what are you saying bruh....\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/WriteToStorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class WriteToStorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"Error writing to Store\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 8
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy @ h:mma\")) + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!super.equals(o)) return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Deadline deadline1 \u003d (Deadline) o;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.equals(deadline, deadline1.deadline);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.hash(super.hashCode(), deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"D | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \" + deadline.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Event(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy @ h:mma\")) + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (!super.equals(o)) return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Event event \u003d (Event) o;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.equals(time, event.time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.hash(super.hashCode(), time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"D | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \" + time.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * Represents a task. Task will generally have a description and have a isDone state. Some subclasses"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " * will have other details such as time (e.g. Event, Deadline)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return (isDone ? \"[✓] \" : \"[✗] \") + description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return isDone \u003d\u003d task.isDone \u0026\u0026"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "                Objects.equals(description, task.description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return Objects.hash(isDone, description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Returns a string that can be used to write to memory."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return  String that will be used to write to memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    abstract public String convertToData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * Check whether Task\u0027s description contains query."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @param query  Query to be checked"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     * @return  returns true if query is contained in description else returns false."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public boolean contains(String query) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return description.contains(query);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        return \"T | \" + (isDone ? 1 : 0) + \" | \" + description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 16
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 12
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void parseDateTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(\"2020-04-27T10:00\", Parser.parseDateTime(\"2020-04-27 1000\").toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void parse_todoCommand_success() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(new AddTaskCommand(new Todo(\"hello\")), Parser.parse(\"todo hello\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 22
    }
  },
  {
    "path": "src/test/java/duke/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public StorageStub() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void initialiseTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void writeData(Task task) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    public void rewriteData(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 24
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.exception.WriteToStorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void getStore() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void addTask() throws WriteToStorageException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Task task \u003d new Todo(\"hello world\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        TaskList tasks \u003d  new TaskList(new StorageStub());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(0 , tasks.size());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertEquals(1 , tasks.size());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void doneTask() throws WriteToStorageException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        Task task \u003d new Todo(\"hello world\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        TaskList tasks \u003d  new TaskList(new StorageStub());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        tasks.doneTask(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "        assertTrue(tasks.getTask(0).isDone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void getTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nopenotj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "delete 1"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nopenotj"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/exception/*.java ../src/main/java/duke/task/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "nopenotj": 1,
      "-": 37
    }
  }
]
