[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "T | 0 |eat"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "D | 0 |EAT | 2020-02-01 01:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "T | 0 |EaT"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "T | 0 |Eta"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a chat bot that functions as a task manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Create and initialise a new Duke object that has a Ui, Storage and TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList \u003d this.storage.readFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Executes a DukeBot session for the bot to perform its intended functions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Initialises a new DukeBot session."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param args command-line arguments."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Duke session \u003d new Duke(); // start a new session with JonasBot"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        session.run(); // execute the bot to perform intended functions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 54,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a parser to make sense of the user inputs so that"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * the correct command can be executed by DukeBot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String END_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FIND_BY_DATE_COMMAND \u003d \"find_by_date\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FIND_BY_KEYWORD_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String VIEW_FUNCTION_COMMAND \u003d \"/commands\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses the input entered by users and returns a Command object to be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * executed by DukeBot if the input is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput Inputs entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidFunctionException If the input is not a valid command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static Command parse(String userInput) throws InvalidFunctionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d userInput.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] parsedCommand \u003d message.split(\" \",2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String function \u003d parsedCommand[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (message.equals(Parser.END_COMMAND)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.equals(Parser.VIEW_FUNCTION_COMMAND)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ViewFunctionsCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No input was entered! Please enter something!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.equals(Parser.LIST_COMMAND)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.DONE_COMMAND)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new CompleteTaskCommand(parsedCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.ADD_TODO_COMMAND)){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"todo\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddTodoCommand(parsedCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.ADD_DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"deadline\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddDeadlineCommand(parsedCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.ADD_EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"event\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddEventCommand(parsedCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DeleteTaskCommand(parsedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.FIND_BY_DATE_COMMAND)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new FindByDateCommand(parsedCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.FIND_BY_KEYWORD_COMMAND)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new FindByKeywordCommand(parsedCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Invalid Function! Input \u0027/commands\u0027 for a list of all my commands.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 66
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to file operations"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * and storage of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DIRECTORY \u003d \"data\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FILE_LOCATION \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the list of tasks stored in the designated file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and stores them in a TaskList object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return TaskList containing tasks retrieved from the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public TaskList readFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            File dataDirectory \u003d new File(Storage.DIRECTORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // make a data directory if the directory does not exist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            dataDirectory.mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            File dataFile \u003d new File(Storage.FILE_LOCATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // create an empty file to store the tasks if the file does not exist"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Scanner sc \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String[] taskData \u003d sc.nextLine().split(\" \\\\|\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (taskData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task toAdd \u003d new Todo(taskData[2]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (taskData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        toAdd.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    taskList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String dateTime \u003d taskData[3].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String[] dateTimeArray \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    LocalDate taskDate \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    LocalTime taskTime \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (taskData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        Task toAdd \u003d new Deadline(taskData[2], taskDate, taskTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        if (taskData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                            toAdd.markAsDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        taskList.add(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    } else if (taskData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        Task toAdd \u003d new Event(taskData[2], taskDate, taskTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        if (taskData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                            toAdd.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        taskList.add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Oh no! An error was encountered, the file data could not be read.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            System.out.println(err);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Stores the list of tasks in the TaskList object in the designated file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param taskList List of tasks to be saved in the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveFile(TaskList taskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(Storage.FILE_LOCATION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                fileWriter.write(taskList.getTask(i).taskToFileString() + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Oh no! An error is encountered and the task file could not be updated.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            System.out.println(err);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 103
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Handles interactions with the user while the user is using DukeBot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DIVIDER \u003d \"----------------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Ui object to deal with user interactions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * using a scanner object to read user inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a greeting to welcome the user when a new session with DukeBot"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * is initialised."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String text \u003d \"  ______  _____  __  ____     __     _______  \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \" |__  __||  __ | | \\\\ |  |    /_ \\\\    |   ___|   \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"    | |  | | | | |  \\\\|  |   //_\\\\ \\\\   |  |___   \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \" _  | |  | | | | | |\\\\   |  / ____ \\\\  |____  |   \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"| |_| |  | |_| | | | \\\\  | / /    \\\\ \\\\ _____| |  \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"|_____|  |_____| |_|  \\\\_|/_/      \\\\_\\\\|______|  \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  _____   ______  ________        \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  |  _ \\\\ |  _  | |__   __|       \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  | |_| || | | |    | |           \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  |    / | | | |    | |           \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  |  _ \\\\ | |_| |    | |          \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  | |_| ||     |    | |           \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"                  |_____/|_____|    |_|           \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String greeting \u003d \"  Hello! I am JonasBot! Nice to meet you :) \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + text + \"  \\n  I am a task manager bot that will keep track of all your tasks. \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  To view a list of all my commands, input \u0027/commands\u0027 \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  Now that you are familiar with the commands, how may I assist you today?\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Scans for user inputs."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representing the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints an error message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param error String representing the error message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply to respond to user inputs."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String representing the message to send to users."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void printReply(String message) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a farewell message when the session with DukeBot is terminated."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String farewellMessage \u003d \"  GoodBye and I hope to see you soon! Have a fantastic day! \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(farewellMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a line to divide and segment the chat text."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 93
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to add a new deadline task to the user\u0027s list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new AddDeadlineCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the deadline task information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddDeadlineCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a new deadline task, adds it to the list of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and saves it into the designated file containing the user\u0027s list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks which the new deadline task will be added into."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be created due to invalid inputs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] deadlineInfo \u003d retrieveDeadlineInfo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] timeStamp \u003d deadlineInfo[1].split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(timeStamp[0], dateFormatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalTime deadlineTime \u003d LocalTime.parse(timeStamp[1], timeFormatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toAdd \u003d new Deadline(deadlineInfo[0], deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String successReply \u003d \"Success! This deadline task has been added: \\n\\t\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + toAdd.toString() + \"\\nYou have \" + tasks.getListSize() + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(successReply);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"The task date format is incorrect. \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the details of the deadline task and stores it in an array."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String array containing the deadline description and deadline time stamp."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidTaskException If the deadline information is invalid and is missing arguments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveDeadlineInfo() throws InvalidTaskException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] deadlineInfo \u003d new String[2];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (this.parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your deadline task has missing arguments and has an incorrect format. \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"The task cannot be created.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] taskInputArray \u003d this.parsedCommand[1].split(\" /by \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!this.parsedCommand[1].contains(\" /by \") \u0026\u0026 !this.parsedCommand[1].endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task has an incorrect format. The task cannot be created. \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().equals(\"/by\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task is missing a description and time stamp. \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"The task cannot be created. \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task is missing a time stamp. The task cannot be created. \\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (taskInputArray.length \u003d\u003d 1 || taskInputArray[0].isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task is missing a description. The task cannot be created. \\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                description \u003d taskInputArray[0].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                time \u003d taskInputArray[1].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        deadlineInfo[0] \u003d description;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        deadlineInfo[1] \u003d time;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return deadlineInfo;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 120
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to add a new event task to the user\u0027s list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new AddEventCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the event task information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddEventCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a new event task, adds it to the list of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and saves it into the designated file containing the user\u0027s list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks which the new event task will be added into."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be created due to invalid inputs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] eventInfo \u003d retrieveEventInfo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] timeStamp \u003d eventInfo[1].split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate eventDate \u003d LocalDate.parse(timeStamp[0], dateFormatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalTime eventTime \u003d LocalTime.parse(timeStamp[1], timeFormatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toAdd \u003d new Event(eventInfo[0], eventDate, eventTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String successReply \u003d \"Success! This event task has been added: \\n\\t\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    toAdd.toString() + \"\\nYou have \" + tasks.getListSize() + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(successReply);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"The task date format is incorrect. \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the details of the event task and stores it in an array."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String array containing the event description and event time stamp."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidTaskException If the event information is invalid and is missing arguments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveEventInfo() throws InvalidTaskException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] eventInfo \u003d new String[2];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (this.parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your event task has missing arguments and has an incorrect format. \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"The task cannot be created.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] taskInputArray \u003d this.parsedCommand[1].split(\" /at \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!this.parsedCommand[1].contains(\" /at \") \u0026\u0026 !this.parsedCommand[1].endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task has an incorrect format. The task cannot be created. \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().equals(\"/at\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task is missing a description and time stamp. \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"The task cannot be created. \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task is missing a time stamp. The task cannot be created. \\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (taskInputArray.length \u003d\u003d 1 || taskInputArray[0].isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task is missing a description. The task cannot be created. \\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                description \u003d taskInputArray[0].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                time \u003d taskInputArray[1].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        eventInfo[0] \u003d description;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        eventInfo[1] \u003d time;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return eventInfo;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 120
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to add a new todo task to the user\u0027s list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new AddTodoCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the todo task information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddTodoCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a new todo task, adds it to the list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and saves it into the designated file containing the user\u0027s list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks which the new todo task will be added into."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be created due to invalid inputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String todoInfo \u003d this.retrieveTodoInfo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toAdd \u003d new Todo(todoInfo.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String successReply \u003d \"Success! This todo task has been added: \\n\\t\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + toAdd.toString() + \"\\nYou have \" + tasks.getListSize()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(successReply);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the details of the todo task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the todo description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidTaskException If the deadline information is invalid and is missing arguments."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String retrieveTodoInfo() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String todoInfo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (this.parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your todo task description is empty. The task cannot be created.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Type \u0027/commands\u0027 to view the correct command for task creation! \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            todoInfo \u003d this.parsedCommand[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return todoInfo;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 81
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to be executed by the DukeBot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Executes the relevant command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the command cannot be executed successfully."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True if the DukeBot session is going to be terminated, false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 30
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to mark a task as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new CompleteTaskCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains information of the task to be completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CompleteTaskCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Marks the task as completed and updates it accordingly in the list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * saved in the designated file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be completed due to invalid arguments."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d Integer.parseInt(this.parsedCommand[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003e tasks.getListSize()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Invalid Task! The task does not exist. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"The task ID you provided is not valid. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (task.isCompleted()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String message \u003d \"This task has already been completed:\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    ui.printReply(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String message \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    ui.printReply(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String successReply \u003d \"\\t\" + task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(successReply);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No Task ID provided! Please input the ID of the task you wish to mark as completed.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your input is not a recognised command. You have to provide the ID of \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"the task you wish to mark as done. \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Input \u0027/commands\u0027 to view a list of my commands. \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 80
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to delete a task from the user\u0027s list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new DeleteTaskCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains information of the task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DeleteTaskCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Deletes the task from the user\u0027s list of tasks and updates the list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * stored in the designated file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be deleted due to invalid arguments."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d Integer.parseInt(this.parsedCommand[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003e tasks.getListSize()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Invalid Task! The task does not exist. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"The task ID you provided is not valid. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Task toRemove \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                tasks.removeTask(index - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String successReply \u003d \"Found it! This task has been successfully deleted: \\n\\t\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + toRemove.toString() + \"\\nYou have \" + tasks.getListSize()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(successReply);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No Task ID provided! Please input the ID of the task you wish to delete.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your input is not a recognised command. You have to provide the ID of \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"the task you wish to delete. \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Input \u0027/commands\u0027 to view a list of my commands. \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 75
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to terminate the DukeBot session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Terminates the DukeBot session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // storage.saveFile(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ui.end();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True since the DukeBot session has been terminated by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 34
    }
  },
  {
    "path": "src/main/java/duke/command/FindByDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to search for tasks by date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindByDateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new FindByDateCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the search date input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindByDateCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Performs the operation of searching for all the tasks in the user\u0027s list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * of tasks that matches the date provided for the search."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If no tasks could be found due to invalid date provided."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String date \u003d parsedCommand[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate dateToSearch \u003d LocalDate.parse(date, dateFormatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(\"Search Results:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (task.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (task.getDate().isEqual(dateToSearch)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        String results \u003d String.format(\"%d. %s\", index, task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        ui.printReply(results);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(\"No tasks found! Please search using a different date!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No task date provided. Please input a valid date using the format: \u0027dd/mm/yyyy\u0027 \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Type \u0027/commands\u0027 to view the correct command for task search by date! \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"The task date format is incorrect.\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Please input a valid date using the format: \u0027dd/mm/yyyy\u0027\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 78
    }
  },
  {
    "path": "src/main/java/duke/command/FindByKeywordCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindByKeywordCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindByKeywordCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String keyword \u003d this.parsedCommand[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                int index \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(\"Search Results:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (task.getDescription().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        String results \u003d String.format(\"%d. %s\", index, task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        ui.printReply(results);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    ui.printReply(\"No tasks found! Please search using a different keyword!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"No keyword for the search was entered. Please enter a keyword!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 53
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to display all the tasks in the user\u0027s list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints all the user\u0027s tasks and the relevant task information."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String emptyListMessage \u003d \"Your list is empty. Add a new task!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(emptyListMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String message \u003d \"Here is a list of all your tasks:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String task \u003d \"\\t\" + String.format(\"%d. %s\", index, tasks.getTask(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ViewFunctionsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to view a list of Duke\u0027s function and the function commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ViewFunctionsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints all of Duke\u0027s functions and the commands for each function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String commands \u003d \"  Below is a list of all the commands for my functions: \\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  1. Create a new task: \\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"\\t  1.1 Todo: \u0027todo\u0027 {task description}. For eg, todo eat \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"\\t  1.2 Deadline: \u0027deadline\u0027 {task description} \u0027/by\u0027 {deadline date}.\\n\\t\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  Input the date using the format: \u0027dd/mm/yyyy hh:mm\u0027. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"For eg, deadline return book /by 12/2/2020 13:00 \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"\\t  1.3 Event: \u0027event\u0027 {task description} \u0027/at\u0027 {event date}.\\n\\t\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  Input the date using the format: \u0027dd/mm/yyyy hh:mm\u0027. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"For eg, event project meeting /at 1/3/2020 12:00 \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  2. To display all tasks in your list: \u0027list\u0027 \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  3. To mark a task as completed: \u0027done\u0027 {task ID}. For eg, \u0027done 2\u0027 \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  4. To delete a task: \u0027delete\u0027 {task ID}. For eg, \u0027delete 2\u0027 \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  6. To search for a task by date: \u0027find_by_date\u0027 {date}. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"     Input the date using the format: \u0027dd/mm/yyyy\u0027. For eg, \u0027find_by_date 12/2/2020\u0027 \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"  \\n  5. To end this chat: \u0027bye\u0027 \\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ui.printReply(commands);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 48
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents an exception pertaining to Duke\u0027s operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new DukeException with a specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String containing the specified message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(\"Oh no! \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFunctionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents an exception which occurs when the user provides an invalid or unrecognised command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidFunctionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new InvalidFunctionException with a specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String containing the specified error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public InvalidFunctionException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents an exception relating to an invalid task which does not exist or is not recognised."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new InvalidTaskException with a specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String containing the specified error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public InvalidTaskException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to a deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalDate deadlineDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalTime deadlineTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Deadline object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param deadlineDate LocalDate object that stores the due date of the deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param deadlineTime LocalTime object that stores the time the deadline task is due."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Deadline(String description, LocalDate deadlineDate, LocalTime deadlineTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the due date of the deadline task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return LocalDate object that stores the due date of the deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.deadlineDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the deadline object into a string for storage in a file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this deadline object to be saved in a file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String taskToFileString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"D | \" + (super.isDone ? \"1 |\" : \"0 |\") + super.description + \" | \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + this.deadlineDate.toString() + \" \"+ this.deadlineTime.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the deadline object into a string to be displayed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this deadline object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String formattedEventTime \u003d this.deadlineDate.format(DateTimeFormatter.ofPattern(\"EE, MMM dd yyyy\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \", \" + this.deadlineTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedEventTime + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to an event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalDate eventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalTime eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Event object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param eventDate LocalDate object that stores the date of the event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param eventTime LocalTime object that stores the time the event task is arranged for."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Event(String description, LocalDate eventDate, LocalTime eventTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the date of this event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return LocalDate object that stores the date of the event task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.eventDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the event object into a string for storage in a file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this event object to be saved in a file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String taskToFileString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"E | \" + (super.isDone ? \"1 |\" : \"0 |\") + super.description + \" | \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + this.eventDate.toString() + \" \" + this.eventTime.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the event object into a string to be displayed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this event object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String formattedEventTime \u003d this.eventDate.format(DateTimeFormatter.ofPattern(\"EE, MMM dd yyyy\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \", \" + this.eventTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedEventTime + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information relating to a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns a status icon to indicate the completion status of this task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Tick symbol if the task is completed, else a cross symbol is returned."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Marks this task object as completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the task object into a string for storage in a file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this task object to be saved in a file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract String taskToFileString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the date of this task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return LocalDate object that stores the date of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns a boolean to indicate whether the task has been completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True if the task is completed, false otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the description of this task object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the description of this task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the task object into a string to be displayed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this task object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 80
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates information and methods that relate to a list of tasks being tracked"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * for the user by DukeBot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param taskList List of tasks that has been created by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList \u003d  taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Number of tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the correct task in the list of tasks at the given index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the desired task in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Task at the given index in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the list of tasks created by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Determines if the list of tasks is empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True if the list of tasks is empty, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList.isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a new task into the list of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param toAdd Task to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes a task from the list of tasks at the given index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the task to be deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 78
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to a todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Todo object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the Todo task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the todo object into a string for storage in a file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this todo object to be saved in a file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String taskToFileString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"T | \" + (super.isDone ? \"1 |\" : \"0 |\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + super.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the date of this todo task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Null since a todo task has no relevant date information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the todo object into a string to be displayed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this todo object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 49
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addDeadlineCommand_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"deadline play /by 1/4/2020 16:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Success! This deadline task has been added: \\n\\t\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"[D][✗] play (by: Wed, Apr 01 2020, 04:00 PM)\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"You have 1 tasks in your list now.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void deleteTask_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Task todo \u003d new Todo(\"read\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"delete 1\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Found it! This task has been successfully deleted: \\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"\\t[T][✓] read\\n\" + \"You have 0 tasks in your list now.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void completeTask_invalidTaskID_throwsException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"done 10\").execute(new TaskList(new ArrayList\u003c\u003e()), new Ui(), new Storage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Invalid Task! The task does not exist. Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void findTaskByDate_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"find_by_date 10 May\").execute(new TaskList(new ArrayList\u003c\u003e()), new Ui(), new Storage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! The task date format is incorrect. Please input a valid date using the format: \u0027dd/mm/yyyy\u0027\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 82
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void parser_invalidInput_throwsException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"invalid input\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Invalid Function! Input \u0027/commands\u0027 for a list of all my commands.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void parser_noUserInput_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! No input was entered! Please enter something!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 29
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void createTodo_validInput_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Todo todo \u003d new Todo(\"create tests\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"[T][✗] create tests\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, todo.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void createDeadline_validInput_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"4/5/2020\", dateFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"14:00\", timeFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"create deadline\", date, time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"[D][✗] create deadline (by: Mon, May 04 2020, 02:00 PM)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, deadline.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void taskToFileString_validInput_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"10/10/2020\", dateFormatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"10:00\", timeFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Event event \u003d new Event(\"create event\", date, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"[E][✗] create event (at: Sat, Oct 10 2020, 10:00 AM)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 42
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "todo do cs2103T project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline finish week 2 requirements /by Monday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "event cs2103T lecture /at Fri 4-6pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "blah"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline finish week 1 post lecture quiz /by Saturday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "todo read up on week 2 topics"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline eat /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jonasngs": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "jonasngs": 2
    }
  }
]
