[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\t"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 17,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### Manage Your Tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Add, delete, show, and mark your tasks as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* Examples below are assumed to be executed in order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "* Items in [] are optional."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `todo` - Add a new task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `todo \u003ctask\u003e`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    todo hello"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Task added: [T][X] hello"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `deadline` - Add a new task with a deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `deadline \u003ctask\u003e /by yyyy-mm-dd`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    deadline hello /by 2020-09-30"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Task added: [D][X] hello (by: 30 Sep 2020)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `event` - Add a new task that happens on a certain date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `event \u003ctask\u003e /at yyyy-mm-dd`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    event hello /at 2020-09-30"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Task added: [E][X] hello (at: 30 Sep 2020)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `done` - Mark a task as done"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `done \u003ctask number\u003e`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Task marked as done: [T][V] hello"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `delete` - Delete a task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `delete \u003ctask number\u003e`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    delete 2"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Task deleted: [D][X] hello (by: 30 Sep 2020)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `list` - List all tasks, or all tasks on a certain date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `list [yyyy-mm-dd]`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    list 2020-09-30"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    2. [E][X] hello (at: 30 Sep 2020)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `find` - Search for a task using keywords"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `find \u003ckeywords\u003e`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    find hello"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    1. [T][V] hello"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    2. [E][X] hello (at: 30 Sep 2020)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ysr25"
        },
        "content": "### `bye` - Exit the chat bot"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Window closes."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ysr25"
        },
        "content": "## Credits"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ysr25"
        },
        "content": "Followed the guides from [SE-EDU](https://se-education.org/guides/index.html)."
      }
    ],
    "authorContributionMap": {
      "ysr25": 87,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a chatbot that takes in and executes commands from the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param filepath directory and name of the file to save the user\u0027s tasks to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Duke(String filepath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            this.storage.initialize();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            this.taskList \u003d this.storage.readTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (IOException | DuplicateTaskException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            System.out.println(\"Problem reading file.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this(\"/data/taskList.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Carries out what the user tells it to do"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param input the user\u0027s input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return the chatbot\u0027s response to the input as a \u003ccode\u003eMessage\u003c/code\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * or null if the program is exited"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Message response;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Command command \u003d CommandParser.parse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assert command !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message message \u003d command.execute(this.taskList, this.storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            if (command.isDone()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            response \u003d message;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            response \u003d new Message(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 61
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            BorderPane borderPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Scene scene \u003d new Scene(borderPane);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            scene.getStylesheets().add(\"/css/stylesheet.css\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(new Duke());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            stage.setMinHeight(200);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            stage.setMinWidth(430);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to stop running."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return Message.getGoodbye();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return obj instanceof ByeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 23
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a command entered by the user for Duke to execute."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param taskList a list of the user\u0027s tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param storage  Deals with the saving of the user\u0027s tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws InvalidTaskException          if there is no task at the number entered"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws InvalidCommandFormatException if the command entered does not follow the required format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IOException                   if there is a problem writing tasks to the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Message execute(TaskList taskList, Storage storage) throws InvalidTaskException, InvalidCommandFormatException,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Determines if this \u003ccode\u003eCommand\u003c/code\u003e causes Duke to stop running."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return whether or not this command terminates the program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    boolean isDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 33
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Responsible for the parsing of the user\u0027s inputs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Parses an input from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param command the input to be parsed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return a \u003ccode\u003eCommand\u003c/code\u003e that can be executed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws InvalidCommandException if the given input is not supported by Duke"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Command parse(String command) throws InvalidCommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] inputArray \u003d command.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        switch (inputArray[0]) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new ToDoCommand(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new DeadlineCommand(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new EventCommand(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new DoneCommand(inputArray);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new DeleteCommand(inputArray);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new ListCommand(inputArray);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandException(\"I\u0027m not sure what you\u0027re talking about.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to create a new \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Deadline deadline \u003d createDeadline();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            storage.appendToFile(deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Message.getTaskAdded(deadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Message(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Deadline createDeadline() throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Deadline cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] split \u003d command.substring(9).trim().split(\"\\\\s+/by\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (split.length !\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Wrong format for deadline command.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Deadline(split[0], LocalDate.parse(split[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Please enter a valid date in the yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return this.command.equals(((DeadlineCommand) obj).command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 66
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to delete a certain \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public DeleteCommand(String[] command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            InvalidTaskException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length !\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Wrong format for delete command.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Task task \u003d taskList.delete(Integer.parseInt(command[1]));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            storage.writeToFile(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Message.getTaskDeleted(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Please enter the number of the task you wish to delete.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Arrays.equals(this.command, ((DeleteCommand) obj).command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 53
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to mark a certain \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public DoneCommand(String[] command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            InvalidTaskException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length !\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Wrong format for done command.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Task task \u003d taskList.markAsDone(Integer.parseInt(command[1]));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            storage.writeToFile(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Message.getTaskDone(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Please enter the number of the task you wish to mark as done.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof DoneCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Arrays.equals(this.command, ((DoneCommand) obj).command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 53
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to create a new \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public EventCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Event event \u003d createEvent();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(event);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            storage.appendToFile(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Message.getTaskAdded(event);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Message(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    Event createEvent() throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Event cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] split \u003d command.substring(6).trim().split(\"\\\\s+/at\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (split.length !\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Wrong format for event command.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Event(split[0], LocalDate.parse(split[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Please enter a valid date in the yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof EventCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return this.command.equals(((EventCommand) obj).command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 66
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Please enter the keywords you are searching for.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String keyword \u003d command.substring(5).trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return taskList.find(keyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof FindCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return this.command.equals(((FindCommand) obj).command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to list \u003ccode\u003eTask\u003c/code\u003es."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public ListCommand(String[] command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return taskList.showList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(command[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                return taskList.showList(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                throw new InvalidCommandFormatException(\"Please enter a valid date in the yyyy-mm-dd format.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"Wrong format for list command.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof ListCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Arrays.equals(this.command, ((ListCommand) obj).command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 53
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eCommand\u003c/code\u003e telling Duke to create a new \u003ccode\u003eToDo\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ToDoCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public ToDoCommand(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message execute(TaskList taskList, Storage storage) throws InvalidCommandFormatException, IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            ToDo toDo \u003d createToDo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(toDo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            storage.appendToFile(toDo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return Message.getTaskAdded(toDo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Message(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    ToDo createToDo() throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (command.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidCommandFormatException(\"ToDo cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String content \u003d command.substring(5).trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new ToDo(content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof ToDoCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return this.command.equals(((ToDoCommand) obj).command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 57
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents an \u003ccode\u003eException\u003c/code\u003e that occurs when Duke is running."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param message detailed message about the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public DuplicateTaskException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents an \u003ccode\u003eException\u003c/code\u003e that occurs when the command given is not supported."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param message detailed message about the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents an \u003ccode\u003eException\u003c/code\u003e that occurs when the user inputs a command in the wrong format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class InvalidCommandFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param message detailed message about the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public InvalidCommandFormatException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents an \u003ccode\u003eException\u003c/code\u003e that occurs when the user inputs a position where there is no task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param message detailed message about the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public InvalidTaskException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 15
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a file on which the user\u0027s tasks are stored."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param filePath directory and name of the file to save the user\u0027s tasks to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Initializes storage file on the user\u0027s system."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IOException if there is a problem when creating a new file on the user\u0027s system"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void initialize() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String currentDirectory \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        int i \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (i !\u003d -1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            String directory \u003d filePath.substring(0, i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            new File(currentDirectory, directory).mkdirs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.filePath \u003d currentDirectory + \"/\" + filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Loads tasks from a file into the \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return a list of tasks previously saved by the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IOException if tasks cannot be read from the file correctly"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public TaskList readTasks() throws IOException, DuplicateTaskException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Scanner scanner \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                Task task \u003d StorageParser.parseTask(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new IOException(\"Dates in file could not be read properly.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Writes the list of tasks into a file from the start."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param taskList the user\u0027s current list of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IOException if tasks cannot be written to the file correctly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void writeToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        taskList.forEach(task -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                fileWriter.write(task.print() + System.lineSeparator());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Appends a task to the back of a file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param task the new task to be saved"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IOException if the task cannot be written to the file correctly"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void appendToFile(Task task) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        fileWriter.write(task.print() + System.lineSeparator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 96
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Creates a \u003ccode\u003eTask\u003c/code\u003e from storage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param line the string representation of the task in a file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws IOException if the task cannot be read from the file correctly"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Task parseTask(String line) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d line.split(\"\\\\s\\\\|\\\\s\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assert input.length \u003e\u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        boolean isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        switch (input[0]) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new ToDo(input[2], isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assert input.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Deadline(input[2], isDone, LocalDate.parse(input[3]));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assert input.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Event(input[2], isDone, LocalDate.parse(input[3]));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new IOException(\"Error reading tasks from file.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eTask\u003c/code\u003e that has to be done by certain date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title    the content of the \u003ccode\u003eDeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param deadline the date on which the \u003ccode\u003eDeadline\u003c/code\u003e is due"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Deadline(String title, LocalDate deadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title    the content of the \u003ccode\u003eDeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param isDone   whether or not the \u003ccode\u003eDeadline\u003c/code\u003e is marked as completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param deadline the date on which the \u003ccode\u003eDeadline\u003c/code\u003e is due"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Deadline(String title, boolean isDone, LocalDate deadline) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(title, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String date \u003d this.deadline.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"D | \" + super.print() + \" | \" + this.deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean hasSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.deadline.equals(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof Deadline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Deadline otherTask \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return super.equals(otherTask) \u0026\u0026 this.deadline.equals(otherTask.deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDuplicate(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (task \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Deadline otherTask \u003d (Deadline) task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return super.isDuplicate(otherTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eTask\u003c/code\u003e that takes place on a certain date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private LocalDate duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title    the content of the \u003ccode\u003eEvent\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param duration the date on which the \u003ccode\u003eEvent\u003c/code\u003e takes place"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Event(String title, LocalDate duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title    the content of the \u003ccode\u003eEvent\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param isDone   whether or not the \u003ccode\u003eEvent\u003c/code\u003e is marked as completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param duration the date on which the \u003ccode\u003eEvent\u003c/code\u003e takes place"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Event(String title, boolean isDone, LocalDate duration) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(title, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String date \u003d this.duration.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"E | \" + super.print() + \" | \" + this.duration;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean hasSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.duration.equals(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof Event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Event otherTask \u003d (Event) obj;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return super.equals(otherTask) \u0026\u0026 this.duration.equals(otherTask.duration);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDuplicate(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (task \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Event otherTask \u003d (Event) task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return super.isDuplicate(otherTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a task added by the user, which may be done or not done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title the content of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title  the content of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param isDone whether or not the task is marked as completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task(String title, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String status \u003d this.isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"[\" + status + \"] \" + this.title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Returns a string representation of the task to be used in saving the task to a file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return string representation of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String status \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return status + \" | \" + this.title;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Checks if the task has the same date as the given date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param date the date to compare with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return whether the task has the same date as the given date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public abstract boolean hasSameDate(LocalDate date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.title.contains(keyword.trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean filter(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return predicate.test(this);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assert obj instanceof Task;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task taskObj \u003d (Task) obj;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.title.equals(taskObj.title) \u0026\u0026 this.isDone \u003d\u003d taskObj.isDone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDuplicate(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.title.equals(task.title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 86
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a list of \u003ccode\u003eTask\u003c/code\u003es in a fixed order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Adds a new task to this task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void add(Task task) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        for (Task t : this.tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            if (task.isDuplicate(t)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                throw new DuplicateTaskException(\"Task not added because duplicate found: \" + t);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Marks a task in the list as completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param position the position of the task in the list (starting from 1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return the task that was marked as done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws InvalidTaskException if there is no task at the given position"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task markAsDone(int position) throws InvalidTaskException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (position \u003c\u003d 0 || position \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidTaskException(\"Invalid task number.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.tasks.get(position - 1).markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Deletes a task in the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param position the position of the task in the list (starting from 1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return the task that was deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @throws InvalidTaskException if there is no task at the given position"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task delete(int position) throws InvalidTaskException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (position \u003c\u003d 0 || position \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            throw new InvalidTaskException(\"Invalid task number.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return this.tasks.remove(position - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private Message findTasks(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (this.tasks.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Message(\"No tasks added.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            ArrayList\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            int position \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            boolean hasTask \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                if (task.filter(predicate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    response.add(position + \". \" + task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    hasTask \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                position++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            if (!hasTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                return new Message(\"No tasks found.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return new Message(response.toArray(new String[0]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Prints out all the tasks in this list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return a message with all tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message showList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return findTasks(task -\u003e true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Prints out tasks that take place or are due by a certain date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param date the date entered by the user"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return a message with the appropriate tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message showList(LocalDate date) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return findTasks(task -\u003e task.hasSameDate(date));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Searches for tasks which contain a certain keyword"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param keyword the keyword the user is looking for"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return a message with the appropriate tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message find(String keyword) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return findTasks(task -\u003e task.containsKeyword(keyword));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Iterates through the \u003ccode\u003eTask\u003c/code\u003es in this list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param consumer the action to be executed on each \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void forEach(Consumer\u003c? super Task\u003e consumer) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.tasks.forEach(consumer);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 126
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a \u003ccode\u003eTask\u003c/code\u003e with no additional details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title the content of the \u003ccode\u003eToDo\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public ToDo(String title) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param title  the content of the \u003ccode\u003eToDo\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param isDone whether or not the \u003ccode\u003eToDo\u003c/code\u003e is marked as completed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public ToDo(String title, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(title, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return \"T | \" + super.print();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean hasSameDate(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (obj instanceof ToDo) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            ToDo otherTask \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return super.equals(otherTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public boolean isDuplicate(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (task \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            ToDo otherTask \u003d (ToDo) task;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return super.isDuplicate(otherTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/BotDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class BotDialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Creates a box displaying a message from Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param text message to be displayed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public BotDialogBox(String text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/BotDialogBox.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        label.setText(text);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.setAlignment(Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 33
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class MainWindow extends BorderPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Initializes the main window of the GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String welcome \u003d Message.getWelcome().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        dialogContainer.getChildren().add(new BotDialogBox(welcome));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Manages GUI changes when the user submits an input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (!input.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            dialogContainer.getChildren().addAll(getInputBox(input), getResponseBox(input));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private UserDialogBox getInputBox(String text) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new UserDialogBox(text);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private BotDialogBox getResponseBox(String text) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String response \u003d duke.getResponse(text);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        if (response \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new BotDialogBox(response);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 60
    }
  },
  {
    "path": "src/main/java/duke/ui/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": " * Represents a response from Duke to the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private String[] message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param message to be shown to the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message(String[] message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param message to be shown to the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.message \u003d new String[]{message};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Returns a welcome message from Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return the welcome message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Message getWelcome() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(new String[]{\"Hello from\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \" ____        _        \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \"|  _ \\\\ _   _| | _____ \","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \"| | | | | | | |/ / _ \\\\\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \"| |_| | |_| |   \u003c  __/\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \"|____/ \\\\__,_|_|\\\\_\\\\___|\"});"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Returns a farewell message from Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @return the farewell message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Message getGoodbye() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"Have a nice day.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Message getTaskAdded(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"Task added: \" + task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Message getTaskDone(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"Task marked as done: \" + task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Message getTaskDeleted(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"Task deleted: \" + task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        for (String line : message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            result.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Carries out an action on each line in the message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param consumer action to be carried out"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void forEach(Consumer\u003c? super String\u003e consumer) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        for (String line : message) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            consumer.accept(line);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 85
    }
  },
  {
    "path": "src/main/java/duke/ui/UserDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class UserDialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * Creates a box displaying a message from Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     * @param text message to be displayed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public UserDialogBox(String text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        label.setText(text);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        this.setAlignment(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 33
    }
  },
  {
    "path": "src/main/resources/view/BotDialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         type\u003d\"HBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         spacing\u003d\"10\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         style\u003d\"-fx-padding: 10;\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003cImageView fitHeight\u003d\"60\" fitWidth\u003d\"60\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003cImage url\u003d\"@../images/bot.PNG\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003cLabel fx:id\u003d\"label\" wrapText\u003d\"true\" styleClass\u003d\"dialog-label, bot-label\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003cInsets right\u003d\"70\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ysr25": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003cBorderPane xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            fx:controller\u003d\"duke.ui.MainWindow\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" vbarPolicy\u003d\"ALWAYS\" hbarPolicy\u003d\"NEVER\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003cbottom\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                        \u003cInsets top\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" right\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                \u003c/TextField\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003cright\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" text\u003d\"SEND\" onMouseClicked\u003d\"#handleUserInput\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                        \u003cInsets top\u003d\"10\" bottom\u003d\"10\" left\u003d\"5\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003c/right\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003c/bottom\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ysr25": 36
    }
  },
  {
    "path": "src/main/resources/view/UserDialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         type\u003d\"HBox\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         spacing\u003d\"10\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         style\u003d\"-fx-padding: 10;\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003cLabel fx:id\u003d\"label\" wrapText\u003d\"true\" styleClass\u003d\"dialog-label, user-label\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            \u003cInsets left\u003d\"70\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003cImageView fitHeight\u003d\"60\" fitWidth\u003d\"60\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        \u003cImage url\u003d\"@../images/user.PNG\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ysr25": 21
    }
  },
  {
    "path": "src/test/java/duke/TestUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class TestUtils {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String TODO_UNDONE_STRING \u003d \"[T][\\u2718] hello\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String TODO_DONE_STRING \u003d \"[T][\\u2713] hello\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String TODO_UNDONE_PRINT \u003d \"T | 0 | hello\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String TODO_DONE_PRINT \u003d \"T | 1 | hello\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_UNDONE_STRING \u003d \"[D][\\u2718] hello (by: 1 Jan 2020)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_DONE_STRING \u003d \"[D][\\u2713] hello (by: 1 Jan 2020)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_UNDONE_PRINT \u003d \"D | 0 | hello | 2020-01-01\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_DONE_PRINT \u003d \"D | 1 | hello | 2020-01-01\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_UNDONE_STRING \u003d \"[E][\\u2718] hello (at: 1 Jan 2020)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_DONE_STRING \u003d \"[E][\\u2713] hello (at: 1 Jan 2020)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_UNDONE_PRINT \u003d \"E | 0 | hello | 2020-01-01\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_DONE_PRINT \u003d \"E | 1 | hello | 2020-01-01\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String TODO_COMMAND_CORRECT \u003d \"todo hello\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String TODO_COMMAND_EMPTY \u003d \"todo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_COMMAND_CORRECT \u003d \"deadline hello /by 2020-01-01\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_COMMAND_INCORRECT_FORMAT \u003d \"deadline hello by 2020-01-01\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_COMMAND_INCORRECT_DATE \u003d \"deadline hello /by 2020\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String DEADLINE_COMMAND_EMPTY \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_COMMAND_CORRECT \u003d \"event hello /at 2020-01-01\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_COMMAND_INCORRECT_FORMAT \u003d \"event hello at 2020-01-01\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_COMMAND_INCORRECT_DATE \u003d \"event hello /at 2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static final String EVENT_COMMAND_EMPTY \u003d \"event\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static ToDo createUndoneToDo() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new ToDo(\"hello\", false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static ToDo createDoneToDo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new ToDo(\"hello\", true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Deadline createUndoneDeadline() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Deadline(\"hello\", false, LocalDate.parse(\"2020-01-01\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Deadline createUndoneDeadlineDifferentDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Deadline(\"hello\", false, LocalDate.parse(\"2019-01-01\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Deadline createUndoneDeadlineDifferentTitle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Deadline(\"hi\", false, LocalDate.parse(\"2019-01-01\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Deadline createDoneDeadline() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Deadline(\"hello\", true, LocalDate.parse(\"2020-01-01\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Event createUndoneEvent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Event(\"hello\", false, LocalDate.parse(\"2020-01-01\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public static Event createDoneEvent() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Event(\"hello\", true, LocalDate.parse(\"2020-01-01\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 65
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_bye_returnCorrectMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message result \u003d byeCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"Have a nice day.\\n\", result.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_byeCommand_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(byeCommand.isDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 26
    }
  },
  {
    "path": "src/test/java/duke/command/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_bye_returnsByeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(byeCommand, CommandParser.parse(\"bye\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_deadline_returnsDeadlineCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(DEADLINE_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(deadlineCommand, CommandParser.parse(DEADLINE_COMMAND_CORRECT)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_delete_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"delete\", \"1\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(deleteCommand, CommandParser.parse(\"delete 1\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_done_returnsDoneCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"done\", \"1\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(doneCommand, CommandParser.parse(\"done 1\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_event_returnsEventCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(EVENT_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(eventCommand, CommandParser.parse(EVENT_COMMAND_CORRECT)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_find_returnsFindCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String command \u003d \"find hello\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(new FindCommand(command), CommandParser.parse(command)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_list_returnsListCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"list\", \"2020-01-01\"};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(listCommand, CommandParser.parse(\"list 2020-01-01\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_todo_returnsToDoCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ToDoCommand toDoCommand \u003d new ToDoCommand(TODO_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(toDoCommand, CommandParser.parse(TODO_COMMAND_CORRECT)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parse_notACommand_throwsInvalidCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e CommandParser.parse(\"hello\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 70
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_COMMAND_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_COMMAND_INCORRECT_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_COMMAND_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_UNDONE_STRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_deadlineCommand_returnsCorrectMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(DEADLINE_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message message \u003d deadlineCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"Task added: \" + DEADLINE_UNDONE_STRING + \"\\n\", message.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_deadlineCommand_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(DEADLINE_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(deadlineCommand.isDone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_correctCommand_returnsDeadline() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(createUndoneDeadline(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new DeadlineCommand(DEADLINE_COMMAND_CORRECT).createDeadline()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_emptyCommand_throwsException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new DeadlineCommand(DEADLINE_COMMAND_EMPTY).createDeadline());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_incorrectFormat_throwsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new DeadlineCommand(DEADLINE_COMMAND_INCORRECT_FORMAT).createDeadline());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_incorrectDate_throwsException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new DeadlineCommand(DEADLINE_COMMAND_INCORRECT_DATE).createDeadline());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 58
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_DONE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void executes_delete_returnCorrectMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"delete\", \"1\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message message \u003d deleteCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"Task deleted: \" + TODO_DONE_STRING + \"\\n\", message.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void executes_noTaskNumber_throwsException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"delete\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            deleteCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void executes_notANumber_throwsException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"delete\", \"a\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            deleteCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_doneCommand_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"delete\", \"1\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(deleteCommand.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 49
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_DONE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void executes_markAsDone_returnCorrectMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"done\", \"1\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message message \u003d doneCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"Task marked as done: \" + TODO_DONE_STRING + \"\\n\", message.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void executes_noTaskNumber_throwsException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"done\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            doneCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void executes_notANumber_throwsException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"done\", \"a\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            doneCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_doneCommand_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"done\", \"1\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(doneCommand.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 49
    }
  },
  {
    "path": "src/test/java/duke/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_COMMAND_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_COMMAND_INCORRECT_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_COMMAND_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_UNDONE_STRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_eventCommand_returnsCorrectMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(EVENT_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message message \u003d eventCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"Task added: \" + EVENT_UNDONE_STRING + \"\\n\", message.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_eventCommand_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(EVENT_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(eventCommand.isDone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_correctCommand_returnsEvent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(createUndoneEvent(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new EventCommand(EVENT_COMMAND_CORRECT).createEvent()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_emptyCommand_throwsException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new EventCommand(EVENT_COMMAND_EMPTY).createEvent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_incorrectFormat_throwsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new EventCommand(EVENT_COMMAND_INCORRECT_FORMAT).createEvent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_incorrectDate_throwsException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                new EventCommand(EVENT_COMMAND_INCORRECT_DATE).createEvent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 58
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_findTasks_returnCorrectMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"find hello\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message result \u003d findCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks found.\\n\", result.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_emptyKeyword_throwsException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"find\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            findCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_findCommand_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"find hello\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(findCommand.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 36
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_listAllTasks_returnCorrectMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"list\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message result \u003d listCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks found.\\n\", result.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_incorrectListAllTasks_throwsException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"list\", \"hello\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            listCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_listTasksOnDate_returnCorrectMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"list\", \"2020-01-01\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message result \u003d listCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks found.\\n\", result.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_incorrectListTasksOnDate_throwsException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"list\", \"january\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            listCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_listCommand_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String[] input \u003d {\"list\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(listCommand.isDone());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 58
    }
  },
  {
    "path": "src/test/java/duke/command/StorageDouble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class StorageDouble extends Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    StorageDouble(String filePath) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        super(filePath);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // nothing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public TaskList readTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new TaskListDouble();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void writeToFile(TaskList taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // nothing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void appendToFile(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // nothing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 31
    }
  },
  {
    "path": "src/test/java/duke/command/TaskListDouble.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class TaskListDouble extends TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        // nothing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task markAsDone(int position) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return createDoneToDo();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Task delete(int position) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return createDoneToDo();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message showList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"No tasks found.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message showList(LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"No tasks found.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public Message find(String keyword) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        return new Message(\"No tasks found.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 42
    }
  },
  {
    "path": "src/test/java/duke/command/ToDoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_COMMAND_CORRECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_COMMAND_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_UNDONE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.ui.Message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ToDoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void execute_toDoCommand_returnsCorrectMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ToDoCommand toDoCommand \u003d new ToDoCommand(TODO_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Message message \u003d toDoCommand.execute(new TaskListDouble(), new StorageDouble(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"Task added: \" + TODO_UNDONE_STRING + \"\\n\", message.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDone_toDoCommand_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        ToDoCommand toDoCommand \u003d new ToDoCommand(EVENT_COMMAND_CORRECT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(toDoCommand.isDone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_correctCommand_returnsToDo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(createUndoneToDo(), new ToDoCommand(TODO_COMMAND_CORRECT).createToDo()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void parseCommand_emptyCommand_throwsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e new ToDoCommand(TODO_COMMAND_EMPTY).createToDo());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 43
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_UNDONE_PRINT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_UNDONE_PRINT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_UNDONE_PRINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class StorageParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void readTask_addToDo_doesNotThrowException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e StorageParser.parseTask(TODO_UNDONE_PRINT));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void readTask_addDeadline_doesNotThrowException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e StorageParser.parseTask(DEADLINE_UNDONE_PRINT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void readTask_addEvent_doesNotThrowException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e StorageParser.parseTask(EVENT_UNDONE_PRINT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 26
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_DONE_PRINT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_DONE_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_UNDONE_PRINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_UNDONE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneDeadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayDeadline_undoneDeadline_correctStringForUser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(DEADLINE_UNDONE_STRING, createUndoneDeadline().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayDeadline_doneDeadline_correctStringForUser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(DEADLINE_DONE_STRING, createDoneDeadline().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayDeadline_undoneDeadline_correctStringForStoring() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(DEADLINE_UNDONE_PRINT, createUndoneDeadline().print());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayDeadline_doneDeadline_correctStringForStoring() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(DEADLINE_DONE_PRINT, createDoneDeadline().print());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 33
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_DONE_PRINT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_DONE_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_UNDONE_PRINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_UNDONE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayEvent_undoneEvent_correctStringForUser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(EVENT_UNDONE_STRING, createUndoneEvent().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayEvent_doneEvent_correctStringForUser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(EVENT_DONE_STRING, createDoneEvent().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayEvent_undoneEvent_correctStringForStoring() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(EVENT_UNDONE_PRINT, createUndoneEvent().print());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayEvent_doneEvent_correctStringForStoring() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(EVENT_DONE_PRINT, createDoneEvent().print());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.DEADLINE_UNDONE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.EVENT_UNDONE_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_DONE_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_UNDONE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadlineDifferentDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadlineDifferentTitle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void addTask_addToDo_doesNotThrowException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e taskList.add(createUndoneToDo()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void addTask_addDuplicateToDo_throwsException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e taskList.add(createUndoneToDo()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.add(createUndoneToDo()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void markAsDone_validIndex_returnsTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Task returnedTask \u003d taskList.markAsDone(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(createDoneToDo(), returnedTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void markAsDone_zeroIndex_throwsException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.markAsDone(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void markAsDone_bigIndex_throwsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.markAsDone(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void deleteTask_validIndex_returnsTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            Task returnedTask \u003d taskList.delete(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(createUndoneToDo(), returnedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void deleteTask_zeroIndex_throwsException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.delete(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void deleteTask_bigIndex_throwsException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertThrows(InvalidTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.delete(2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void showList_addDoneDeleteTask_returnsCorrectString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks added.\\n\", taskList.showList().toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"1. \" + TODO_UNDONE_STRING + \"\\n\", taskList.showList().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.markAsDone(1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"1. \" + TODO_DONE_STRING + \"\\n\", taskList.showList().toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.delete(1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks added.\\n\", taskList.showList().toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void showList_showTasksOnDate_returnsCorrectString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneDeadlineDifferentDate());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"3. \" + EVENT_UNDONE_STRING + \"\\n\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    taskList.showList(LocalDate.parse(\"2020-01-01\")).toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void showList_noTasksOnDate_returnsCorrectString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneToDo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneDeadlineDifferentDate());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneEvent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks found.\\n\", taskList.showList(LocalDate.parse(\"2020-02-01\")).toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void find_containsKeyword_returnsCorrectString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneDeadline());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneDeadlineDifferentTitle());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneEvent());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"1. \" + DEADLINE_UNDONE_STRING + \"\\n3. \" + EVENT_UNDONE_STRING + \"\\n\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                    taskList.find(\"hello\").toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void find_doesNotContainKeyword_returnsCorrectString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneDeadline());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneDeadlineDifferentTitle());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            taskList.add(createUndoneEvent());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ysr25"
        },
        "content": "            assertEquals(\"No tasks found.\\n\", taskList.find(\"bye\").toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 156
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_DONE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneDeadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneDeadlineDifferentDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void markAsDone_undoneTask_changesSymbol() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createUndoneToDo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(TODO_DONE_STRING, task.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void markAsDone_doneTask_doesNothing() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createDoneToDo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(TODO_DONE_STRING, task.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void containsKeyword_titleMatchesKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createDoneToDo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(task.containsKeyword(\"hello\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void containsKeyword_titleMatchesKeywordWithWhitespace_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createDoneToDo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(task.containsKeyword(\" hello  \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDuplicate_sameTask_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createUndoneToDo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(task.isDuplicate(createUndoneToDo()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDuplicate_sameTitleDifferentType_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createUndoneToDo();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(task.isDuplicate(createDoneDeadline()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDuplicate_sameTitleSameTypeDifferentDate_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createUndoneDeadline();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(task.isDuplicate(createUndoneDeadlineDifferentDate()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void isDuplicate_sameTitleSameTypeSameDate_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createUndoneDeadline();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(task.isDuplicate(createDoneDeadline()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void hasSameDate_sameDate_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createDoneDeadline();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertTrue(task.hasSameDate(LocalDate.parse(\"2020-01-01\")));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void hasSameDate_differentDate_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        Task task \u003d createDoneDeadline();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertFalse(task.hasSameDate(LocalDate.parse(\"2019-01-01\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 79
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_DONE_PRINT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_DONE_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_UNDONE_PRINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_UNDONE_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createDoneToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayToDo_undoneToDo_correctStringForUser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(TODO_UNDONE_STRING, createUndoneToDo().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayToDo_doneToDo_correctStringForUser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(TODO_DONE_STRING, createDoneToDo().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayToDo_undoneToDo_correctStringForStoring() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(TODO_UNDONE_PRINT, createUndoneToDo().print());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void displayToDo_doneToDo_correctStringForStoring() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(TODO_DONE_PRINT, createDoneToDo().print());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 33
    }
  },
  {
    "path": "src/test/java/duke/ui/MessageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.TODO_UNDONE_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static duke.TestUtils.createUndoneToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "public class MessageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getMessage_welcome_welcomeMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ysr25"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expected \u003d \"Hello from\\n\" + logo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String actual \u003d Message.getWelcome().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getMessage_goodbye_goodbyeMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expected \u003d \"Have a nice day.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String actual \u003d Message.getGoodbye().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getMessage_newTask_newTaskMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expected \u003d \"Task added: \" + TODO_UNDONE_STRING + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String actual \u003d Message.getTaskAdded(createUndoneToDo()).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getMessage_doneTask_doneTaskMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expected \u003d \"Task marked as done: \" + TODO_UNDONE_STRING + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String actual \u003d Message.getTaskDone(createUndoneToDo()).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getMessage_deletedTask_deletedTaskMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String expected \u003d \"Task deleted: \" + TODO_UNDONE_STRING + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String actual \u003d Message.getTaskDeleted(createUndoneToDo()).toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    public void getText_multiLineMessage_hasLineBreak() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        String actual \u003d new Message(new String[]{\"hello\", \"how are you\"}).toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ysr25"
        },
        "content": "        assertEquals(\"hello\\nhow are you\\n\", actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ysr25"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ysr25"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ysr25": 55
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": "hello :)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ysr25"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ysr25"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ysr25"
        },
        "content": "todo buy textbook"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ysr25"
        },
        "content": "deadline CS2103T project /by 2020-08-30"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ysr25"
        },
        "content": "event CS2100 lecture /at tue 4-6pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ysr25"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ysr25"
        },
        "content": "done a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ysr25"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ysr25"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "list 2020-08-30"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ysr25"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ysr25"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ysr25"
        },
        "content": "list 2020-08-29"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ysr25"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ysr25": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ysr25"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ysr25"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\seedu\\duke\\Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ysr25"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ysr25": 3,
      "-": 19
    }
  }
]
