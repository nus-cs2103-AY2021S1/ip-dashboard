[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    testCompile group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    compile group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.2\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            srcDirs \u003d [\"src/main\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            srcDirs \u003d [\"src/test\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "Rogerlys": 37
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 11
    }
  },
  {
    "path": "data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "E|0|ball |/sunday"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 1
    }
  },
  {
    "path": "data/data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "T//0// stuff"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "T//0// stuff 2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "T//0// stuff 3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "D//0// 2019 deadline//2019-01-01"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "D//0// dec deadline//2020-12-01"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "E//0// Jan event//2020-01-01"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "E//0// june event//2020-06-06"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "E//0// dec event //2020-12-01"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 8
    }
  },
  {
    "path": "data/test1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "T//0//do something"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "E//0//cool event//2020-10-10"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 2
    }
  },
  {
    "path": "data/test2.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "T//0//do something"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch1\u003eDuke user guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch3\u003eUI of Duke\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch4\u003eDuke is a command line task manager.\u003c/h4\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Features include:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "1. Add tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "2. List tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "3. Delete tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "4. Marking as done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "5. Sort tasks by date"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "6. Find tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "7. Exit programm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e1. Add tasks:\u003c/h2\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003e Add tasks like ToDo, Event and Deadline\u003c/h5\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "* todo Description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "todo cool todo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Adding Too to the list:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[T][✘] cool todo "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You have 1 tasks in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "* event Description/Date(yyyy-mm-dd)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "event cool event/2020-10-09"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Adding Event to the list:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[E][✘] cool event(At: Oct 9 2020)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You have 2 tasks in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "* deadline Description/Date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deadline cool deadline/2020-10-09"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome:    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Adding Deadline to the list:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[D][✘] cool deadline(By: Oct 9 2020)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You have 3 tasks in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e2. List tasks\u003c/h2\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003eList all the tasks stored in Duke\u003c/h5\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " ```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " ```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You have 3 tasks in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "1. [T][✘] cool todo "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "2. [E][✘] cool event(At: Oct 9 2020)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "3. [D][✘] cool deadline(By: Dec 15 2020)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e3. Deleting tasks\u003c/h2\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003eDelete a task to clear space\u003c/h5\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Task removed: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[T][✘] cool todo"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You have 1 task in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "``` "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e4. Marking as done\u003c/h2\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003eMarks the tasks as done by changing the cross to a tick\u003c/h5\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Nice! I\u0027ve marked this task as done: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "[E][✓] cool event(At: Oct 9 2020)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e5. Sort tasks by date\u003c/h2\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003eSorts the tasks into 1) ToDo 2) Deadline 3) Event. Deadline and Events would also be sorted by date\u003c/h5\u003e    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "sort"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Tasks sorted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Sample list before sort:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "1. [E][✘]  Jan event(At: Jan 1 2020)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "2. [T][✘]  stuff"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "3. [D][✘]  Dec deadline(By: Dec 1 2020)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "4. [E][✘]  June event(At: Jun 6 2020)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "5. [T][✘]  stuff 2"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "6. [E][✘]  Dec event (At: Dec 1 2020)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "7. [T][✘]  stuff 3"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "8. [D][✘]  2019 deadline(By: Jan 1 2019)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Sample list after sort:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "You have 8 tasks in the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "1. [T][✘]  stuff"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "2. [T][✘]  stuff 2"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "3. [T][✘]  stuff 3"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "4. [D][✘]  2019 deadline(By: Jan 1 2019)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "5. [D][✘]  Dec deadline(By: Dec 1 2020)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "6. [E][✘]  Jan event(At: Jan 1 2020)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "7. [E][✘]  June event(At: Jun 6 2020)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "8. [E][✘]  Dec event (At: Dec 1 2020)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e6. Find tasks\u003c/h2\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003eSearch for tasks that match a certain key phrase\u003c/h5\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "find Dec"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Here are the items that match"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "1) [D][✘]  Dec deadline(By: Dec 1 2020)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "2) [E][✘]  Dec event (At: Dec 1 2020)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch2\u003e7. Exit programm\u003c/h2\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003ch5\u003eQuit the programm when finish. Programm will give the closing messgae and exit automatically\u003c/h5\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Input:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "bye"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "Bye. Hope to see you again soon"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Rogerlys": 158
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        BackgroundFill fill \u003d  new BackgroundFill("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Color.web(\"#cff0cc\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new CornerRadii(30),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Insets(5, 5, 5, 5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Background bg \u003d new Background(fill);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        db.setBackground(bg);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        BackgroundFill fill \u003d  new BackgroundFill("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Color.web(\"#dee3e9\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new CornerRadii(30),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                new Insets(5, 5, 5, 5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Background bg \u003d new Background(fill);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        db.setBackground(bg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 77
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.IncorrectFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.UnknownAction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String filePath \u003d \"data/data.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    Duke(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    String getResponse(String input) throws UnknownAction, IOException, IncorrectFormat {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            String output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        new Duke(\"data/data.txt\").run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Rogerlys": 65
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.IncorrectFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.UnknownAction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/spongebob.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/squidward.jpeg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String welcomeMessage \u003d \"How may I take your order\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                DialogBox.getDukeDialog(welcomeMessage, dukeImage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private void handleUserInput() throws IncorrectFormat, UnknownAction, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            CompletableFuture.delayedExecutor(3, TimeUnit.SECONDS)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    .execute(Platform::exit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 68
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeadlineDateParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.EventDateParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.IncorrectFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Represents a command which is used to add a task to the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * It is executed when the execute method is called."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public AddCommand(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Executes the add command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * It will create and add the task as specified by the input when the command is created."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param tasks The task list of the system."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param ui The UI of the system which interacts with user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage The storage of the system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @throws IncorrectFormat"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throws IncorrectFormat, EventDateParseException, DeadlineDateParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            int indexOfSpace \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            int indexOfSlash \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            int length \u003d input.length();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            switch (input.substring(0, indexOfSpace)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                newTask \u003d new ToDo(input.substring(indexOfSpace, length));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                output +\u003d ui.printNew(newTask, \"ToDo\", tasks.numTask() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                String dateStringDeadline \u003d input.substring(indexOfSlash + 1, input.length());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                newTask \u003d new Deadline(input.substring(indexOfSpace, indexOfSlash), dateStringDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                output +\u003d ui.printNew(newTask, \"Deadline\", tasks.numTask() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                String dateStringEvent \u003d input.substring(indexOfSlash + 1, input.length());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                newTask \u003d new Event(input.substring(indexOfSpace, indexOfSlash), dateStringEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                output +\u003d ui.printNew(newTask, \"Event\", tasks.numTask() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                throw new IncorrectFormat();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            tasks.addTask(newTask, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return \"    Please give a description for your task\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 72
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throws IncorrectFormat, IOException, EventDateParseException, DeadlineDateParseException, DeleteListEmptyException, DeleteOutOfBounds, DeleteNegativeIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeleteListEmptyException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeleteNegativeIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeleteOutOfBounds;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Represents a command which is used to delete a task from the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * It is executed when the execute method is called."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     *  Executes the delete command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     *  It removes the task specified when the command was created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param tasks The task list of the system."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param ui The UI of the system which interacts with user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage The storage of the system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throws DeleteListEmptyException, DeleteOutOfBounds, DeleteNegativeIndex {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Task removed \u003d tasks.deleteTask(index - 1, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String output \u003d ui.showDelete(removed, tasks.numTask());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DoneCommand(String index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.index \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws IncorrectFormat, IOException, EventDateParseException, DeadlineDateParseException, DeleteListEmptyException, DeleteOutOfBounds, DeleteNegativeIndex {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Task done \u003d tasks.markDone(index, storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return ui.printDone(done);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Represents a command which is used exit the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * It is executed when the execute method is called."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Executes the delete command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * UI will run bye method and the system would terminate."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param tasks The task list of the system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param ui The UI of the system which interacts with user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage The storage of the system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return ui.bye();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.IncorrectFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws IncorrectFormat, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ArrayList\u003cTask\u003e found \u003d tasks.find(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return ui.printFind(found);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 30
    }
  },
  {
    "path": "src/main/java/duke/command/PrintCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Represents a command which is used to print the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * It is executed when the execute method is called."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class PrintCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Executes the print command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * The method prints the list of tasks which is stored in storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param tasks The task list of the system."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param ui The UI of the system which interacts with user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage The storage of the system."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return ui.printList(storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 31
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeadlineDateParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.EventDateParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.IncorrectFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throws IncorrectFormat, IOException, EventDateParseException, DeadlineDateParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.sort(storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return \"Tasks sorted\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 25
    }
  },
  {
    "path": "src/main/java/duke/error/DeadlineDateParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeadlineDateParseException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DeadlineDateParseException(String date) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(String.format(\"    Please the correct format, %s is\\n not a valid date\", date));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/error/DeleteListEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeleteListEmptyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DeleteListEmptyException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(\"    List is empty you cannot delete that item\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/error/DeleteNegativeIndex.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeleteNegativeIndex extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DeleteNegativeIndex() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(\"    Please give a valid number\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/error/DeleteOutOfBounds.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DeleteOutOfBounds extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public DeleteOutOfBounds(int i) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(String.format(\"    List only has %d items\", i));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/error/EventDateParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class EventDateParseException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public EventDateParseException(String date) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(String.format(\"    Please the correct format, %s is\\nnot a valid date\", date));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/error/IncorrectFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class IncorrectFormat extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public IncorrectFormat() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(\"    Please use the correct format. Thank you\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/error/UnknownAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.error;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class UnknownAction extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public UnknownAction() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(\"    I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 7
    }
  },
  {
    "path": "src/main/java/duke/parts/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.UnknownAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Used to parse inputs from the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Process the input and return a command which represents the input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param input The input string got from the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return A command that can be executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @throws UnknownAction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public static Command parse(String input) throws UnknownAction {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (input.indexOf(\"todo\") \u003d\u003d 0 || input.indexOf(\"deadline\") \u003d\u003d 0 || input.indexOf(\"event\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new AddCommand(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new PrintCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (input.equals(\"sort\")){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (input.indexOf(\"delete\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            String index \u003d input.replaceAll(\"\\\\D\",\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            assert Integer.parseInt(index) \u003e 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(index));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (input.indexOf(\"find\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            int space \u003d input.indexOf(\" \") + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            String word \u003d input.substring(space, input.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new FindCommand(word);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else if (input.indexOf(\"done\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            int space \u003d input.indexOf(\" \") + 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            String index \u003d input.substring(space, input.length());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new UnknownAction();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 44
    }
  },
  {
    "path": "src/main/java/duke/parts/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.UnknownAction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Used to help store, save and load user data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * This allows data to be preserved when the system is turned off."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Checks if the filePath is valid and creates a directory"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * and file when it is not present."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    void createFile() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            File directory \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            File file \u003d new File(\"./data/data.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (!directory.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                directory.mkdir();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                if (!file.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            assert directory.exists();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            assert file.exists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Loads the items that is stored in data.txt file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return ArrayList of tasks that have been stored."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            Scanner sc \u003d new Scanner(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                String[] parts \u003d sc.nextLine().split(\"//\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                switch (parts[0]) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    arr.add(new ToDo(parts[2], parts[1].equals(\"1\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    arr.add(new Event(parts[2], parts[1].equals(\"1\"), parts[3]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    arr.add(new Deadline(parts[2], parts[1].equals(\"1\"), parts[3]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                    throw new UnknownAction();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (UnknownAction unknownAction) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            unknownAction.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Save the user data into the data.txt file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param arr"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    void save(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            for (Task t : arr) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                fileWriter.write(t.writeToFile());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 108
    }
  },
  {
    "path": "src/main/java/duke/parts/TaskComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public int compare(Task t1, Task t2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if(t1 instanceof ToDo \u0026\u0026 t2 instanceof ToDo) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (t1 instanceof ToDo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            } else if (t2 instanceof ToDo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (t1 instanceof Deadline \u0026\u0026 t2 instanceof Deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Deadline d1 \u003d (Deadline) t1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Deadline d2 \u003d (Deadline) t2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return d1.getTime().compareTo(d2.getTime());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            } else if (t1 instanceof Deadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            } else if (t2 instanceof Deadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            assert t1 instanceof Event \u0026\u0026 t2 instanceof Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (t1 instanceof Event \u0026\u0026 t2 instanceof Event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Event e1 \u003d (Event) t1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                Event e2 \u003d (Event) t2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                return e1.getTime().compareTo(e2.getTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 40
    }
  },
  {
    "path": "src/main/java/duke/parts/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeleteListEmptyException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeleteNegativeIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeleteOutOfBounds;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * A class to store and handle the tasks input by the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    void updateList(Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Add a task and update the storage of the system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param task Tasks to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage Storage of the system"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void addTask(Task task, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        updateList(storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Deletes a task and update the storage of the system."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param index Index of task to be deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage Storage of the system"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Task deleteTask(int index, Storage storage) throws DeleteNegativeIndex, DeleteOutOfBounds, DeleteListEmptyException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if(tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new DeleteListEmptyException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new DeleteNegativeIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (index \u003e\u003d tasks.size() ) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new DeleteOutOfBounds(index + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assert index \u003c tasks.size() \u0026\u0026 index \u003e\u003d 0 ;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Task removed \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        updateList(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return Number of tasks stored in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public int numTask() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Searches the list for tasks that matched the input string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param input substring that is used in the search."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return An arraylist of tasks that match the input string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        for (Task t: tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (t.contains(input)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                temp.add(t);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Task markDone(int index, Storage storage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.get(index).setDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.updateList(storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void sort(Storage storage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Collections.sort(tasks, new TaskComparator());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.updateList(storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 96
    }
  },
  {
    "path": "src/main/java/duke/parts/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * A class to handle the response and output that is being shown to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Prints the welcome message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(INDENT + \"Hello! What can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private String printNumTask(int numTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if(numTask \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return String.format(\"%sYou have %d task in the list.\", INDENT, numTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"%sYou have %d tasks in the list.\", INDENT, numTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Shows the response after an item is deleted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param removed Task that have been removed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param numLeft Remaining number of tasks in the system"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return The message for the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String showDelete(Task removed, int numLeft) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String taskLeft \u003d printNumTask(numLeft);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String output \u003d INDENT + \"Task removed: \" + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                                + INDENT + removed.getOutput() + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                                + taskLeft;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Prints the list of task in the system"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param storage Storage of the system."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return The message for the user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String printList(Storage storage) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ArrayList\u003cTask\u003e arrTask \u003d storage.load();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String output \u003d printNumTask(arrTask.size()) + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        output +\u003d INDENT + \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        for (int i \u003d 0; i \u003c arrTask.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            output +\u003d String.format(\"%s%d. %s\", INDENT, i + 1, arrTask.get(i).getOutput());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            if (i \u003c arrTask.size() - 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Shows the response after an item is added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param task Task that is added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param type The type of task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param numTask Number of task in the system before adding this task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return The message for the user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String printNew(Task task, String type, int numTask) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String output \u003d String.format(\"%sAdding %s to the list:\\n\", INDENT, type)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                        + String.format(\"%s%s\\n\", INDENT, task.getOutput())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                                + printNumTask(numTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Shows the tasks that macthes the search criteria."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param arr Arraylist of items that has been found."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return The message for the user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String printFind(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (arr.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            System.out.println(INDENT + \"There are no items\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return INDENT + \"There are no items\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            String output \u003d INDENT + \"Here are the items that match\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                output +\u003d String.format(\"%s%d) %s\", INDENT, i + 1,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                        arr.get(i).getOutput()) + \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            System.out.println(output);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Prints the closing message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return The closing message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(INDENT + \"Bye. Hope to see you again soon\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return INDENT + \"Bye. Hope to see you again soon\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Prints the message when task is marked as done"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return Message for the user"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String printDone(Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String output \u003d INDENT + \"Nice! I\u0027ve marked this task as done: \\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        output +\u003d INDENT;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        output +\u003d task.getOutput();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 132
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.DeadlineDateParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Class that represents a deadline item in the taskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private LocalDate time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Deadline(String description, String time) throws DeadlineDateParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            this.time \u003d LocalDate.parse(time);;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new DeadlineDateParseException(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Deadline(String description, boolean isDone, String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.time \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * formats the Date time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return Formatted date time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    String printTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Shows the status and type of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return [D] and tick or cross depending in the status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"[D]%s\", super.getStatusIcon(), printTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns a string that can be stored in data.txt."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return String that has the details of this object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"D//%d//%s//%s\\n\", done, this.description, this.time);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Creates the string that is shown to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"%s %s(By: %s)\", getStatusIcon(), this.description, printTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public LocalDate getTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 70
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.EventDateParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Class that represents an event item in the taskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    private LocalDate time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Event(String description, String time) throws EventDateParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            this.time \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            throw new EventDateParseException(time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Event(String description, boolean isDone, String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.time \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * formats the Date time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return Formatted date time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    String printTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Shows the status and type of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return [E] and tick or cross depending in the status."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"[E]%s\", super.getStatusIcon(), printTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns a string that can be stored in data.txt."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return String that has the details of this object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"E//%d//%s//%s\\n\", done, this.description, this.time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Creates the string that is shown to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return String."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"%s %s(At: %s)\", getStatusIcon(), this.description, printTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public LocalDate getTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean contains(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return description.contains(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        String sign \u003d isDone ? \"\\u2713\" : \"\\u2718\"; //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return (String.format(\"[%s]\", sign));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"%s%s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return \"-1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 37
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " * Class that represents a to do item in the taskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Shows the status and type of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return [T] and tick or cross depending in the status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"[T]%s \", super.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * Returns a string that can be stored in data.txt."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     * @return String that has the details of this object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return String.format(\"T//%d//%s\\n\", done, this.description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        // If the object is compared with itself then return true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        if (!(o instanceof ToDo)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ToDo c \u003d (ToDo) o;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        return super.description.equals(((ToDo) o).description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 48
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" pickOnBounds\u003d\"false\" text\u003d\"Label\" wrapText\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            \u003cInsets left\u003d\"13.0\" right\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"BOTTOM\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 19
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @SuppressWarnings(\"checkstyle:WhitespaceAround\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Assertions.assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 12
    }
  },
  {
    "path": "src/test/java/duke/parts/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.UnknownAction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void parserTest() throws UnknownAction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Command c1 \u003d Parser.parse(\"todo 1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Command c2 \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Command c3 \u003d Parser.parse(\"event something/2020-10-10\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(c1.getClass().getName(), \"duke.command.AddCommand\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(c2.getClass().getName(), \"duke.command.PrintCommand\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(c3.getClass().getName(), \"duke.command.AddCommand\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 20
    }
  },
  {
    "path": "src/test/java/duke/parts/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.error.EventDateParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void loadTest() throws EventDateParseException, IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Storage s \u003d new Storage(\"./data/test1.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.addTask(new ToDo(\"do something\"), s);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Event e \u003d new Event(\"cool event\", \"2020-10-10\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.addTask(e, s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        File file \u003d new File(\"./data/test1.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(br.readLine(), \"T//0//do something\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(br.readLine(), \"E//0//cool event//2020-10-10\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 25
    }
  },
  {
    "path": "src/test/java/duke/parts/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "package duke.parts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import duke.parts.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void addTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(tasks.numTask(), 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.addTask(new ToDo(\"1\"), new Storage(\"./data/test1.txt\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(tasks.numTask(), 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    public void updateList() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        Storage s \u003d new Storage(\"./data/test2.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        tasks.addTask(new ToDo(\"do something\"), s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        ArrayList\u003cTask\u003e xs \u003d s.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "        assertEquals(xs.get(0), new ToDo(\"do something\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 31
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deadline do assignment /by Monday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "event meeting with friends /never"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "deadline workout/ by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Rogerlys": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "Rogerlys": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Rogerlys"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "Rogerlys": 1
    }
  }
]
