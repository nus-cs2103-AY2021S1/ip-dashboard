[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Welcome to `CatBot` user guide. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "![Image of CatBot](https://github.com/luo-git/ip/raw/master/docs/catbot.gif)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "CatBot is a chat bot that can help you to organise your tasks and schedule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "1. Ensure that you have Java `11` or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "2. Download the latest `catbot.jar` from [here](https://github.com/luo-git/ip/releases)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your AddressBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "4. Start the jar file from a terminal using `java -jar catbot.jar`. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "5. Type in a command in the command box to execute it. Type `help` to see all the commands available."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "6. Refer to the [user guide](https://luo-git.github.io/ip/) for details of each command."
      }
    ],
    "authorContributionMap": {
      "luo-git": 12,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    mainClassName \u003d \"luoyi.duke.Main\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luo-git": 19,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Welcome to `CatBot` user guide. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "![Image of CatBot](https://github.com/luo-git/ip/raw/master/docs/catbot.gif)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "CatBot is a chat bot that can help you to organise your tasks and schedule."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "1. Ensure that you have Java `11` or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "2. Download the latest `catbot.jar` from [here](https://github.com/luo-git/ip/releases)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your AddressBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "4. Start the jar file from a terminal using `java -jar catbot.jar`. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "5. Type in a command in the command box to execute it. Type `help` to see all the commands available."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "6. Refer to features below for details of each command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Notes about the command format:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e e.g. in add `/at TIME`, `TIME` is a parameter which can be used as `event abc /at 2020 11 11`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Items in square brackets are optional."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e e.g `help [KEYWORD]` can be used as `help event` or as `help`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Time representation:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Format of time can be `DD MM YYYY [HH MM]` or `YYYY MM DD [HH MM]` or a string. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Date segment is `DD MM YY` and time segment is `HH MM`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Delimiter between date can be `.`, `space`, `-` or `/`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Delimiter between time can be `.`, `space` or `:`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003e Delimiter between date and time can be `space` or `T`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Add Todo Task: `todo`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Create a new todo task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `todo homework`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Create a new `todo` task with description `homework`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Add Deadline Task: `deadline`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Create a new deadline task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `deadline DESCRIPTION /by TIME`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `deadline homework1 /by 2020-11-11`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Create a new `deadline` task with description `homework1` and time `2020-11-11`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Add Event Task: `event`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Create a new event task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `event DESCRIPTION /at TIME`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `event summer camp /at 2020-11-11 11:22`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Create a new `event` task with description `summer camp` and time `2020-11-11 11:22`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### List tasks: `list`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "List the tasks stored. Optionally, list tasks on a specific date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `list [TIME]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `list 2020-11-11`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: List all task on `2020-11-11`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Mark Task As Done: `done`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Mark a task at some index as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `done INDEX`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `done 1`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Mark task at index `1` as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Delete Task: `delete`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Delete a task at some index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `delete INDEX`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `delete 1`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Delete task at index `1`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Find Task: `find`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Find a task based on description"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `find DESCRIPTION`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `find homework`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: List all task with `homework` in description."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### Sort Tasks: `sort`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Sort tasks based on description or time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Task without a time have higher precedence."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `sort description` or `sort time`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `sort time`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Sort tasks stored by time."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### List tasks: `help`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Get help message. Command can be specified to show help for that command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `help [KEYWORD]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `help list`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Show help message for command `list`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "### List tasks: `bye`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Exit program."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Usage: `bye`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Example of usage: `bye`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "Expected outcome: Program will close in 5 seconds."
      }
    ],
    "authorContributionMap": {
      "luo-git": 106,
      "-": 18
    }
  },
  {
    "path": "src/main/java/luoyi/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Main driver class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 12
    }
  },
  {
    "path": "src/main/java/luoyi/duke/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.Duke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final IDuke duke \u003d Duke.getDuke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            stage.setTitle(\"CatBot\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            stage.getIcons().add(new Image(MainApp.class.getResourceAsStream(\"/images/icon.jpg\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 38
    }
  },
  {
    "path": "src/main/java/luoyi/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.ui.DialogBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/cat.gif\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Initialises the main window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Add initial prompt"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(\"Hi I\u0027m CatBot! What\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \" can I do for you?\", dukeImage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setDuke(IDuke d) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Also exits the program in 5 seconds if bye is inputted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exit program if bye is detected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }, 5000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Handle inputs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 80
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param duke Duke object to perform action on."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected ByeCommand(IDuke duke) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a ByeCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return ByeCommand object not yet initiated with duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ByeCommand getByeCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ByeCommand(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Message.FAREWELL.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ByeCommand(duke);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 40
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Parent of all command classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final IDuke duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param targetIndex Target index for operation by the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param duke Duke object to perform action on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected Command(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the command and return the resultant Duke object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Command must be initiated with a Duke object first."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant string prompt."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new UnsupportedOperationException(\"This method is to\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \" be implemented by child classes.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Initiates command with Duke object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param duke Duke object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Command object after initiation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Command(targetIndex, duke);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 46
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * DeadlineCommand class to encapsulate a deadline command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A deadline command creates a new deadline task,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * which has a description and a time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DeadlineCommand extends StoringCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DeadlineCommand(String description, String time, IDuke duke) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a deadline command object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time by which the task is to be completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return DeadlineCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DeadlineCommand getDeadlineCommand(String description, String time) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeadlineCommand(description, time, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the deadline command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke object duke must be initiated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant duke object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleDeadline(description, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles the deadline operation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates a new deadline task and store it in Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time of deadline."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return String prompt for the action."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If the command parameters are incorrect."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleDeadline(String description, String time)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (time.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The time of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert description.length() \u003e 0 : \"Description is empty!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert time.length() \u003e 0 : \"Time is empty!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d Deadline.getDeadline(description, time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storeTask(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"\\nNow you have \" + duke.getNumTask() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeadlineCommand(description, time, duke);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 89
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * DeleteCommand class to encapsulate a deadline command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A delete command deletes a task at a specific index."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DeleteCommand(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(targetIndex, duke);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a DeleteCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param targetIndex Index of task to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return DeleteCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DeleteCommand getDeleteCommand(int targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeleteCommand(targetIndex, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes command and delete the task at targetIndex in duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke object duke must be first initiated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Result string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleDelete(targetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles delete operation on duke."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param index Index of task to delete."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Result string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleDelete(int index) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (index \u003c 1 || index \u003e duke.getNumTask()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d Message.REMOVED_TASK.toString() + \"\\t\" + duke.getTask(index)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\n Now you have \" + (duke.getNumTask() - 1) + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        deleteTask(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Removes a specified task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Task to be removed is specified by its index id."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index out of bound."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void deleteTask(int id) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot delete task! Task id out of bound!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.remove(id - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(list.getList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeleteCommand(targetIndex, duke);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 91
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * DoneCommand class to encapsulate a done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A done command marks done a task at a specific index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DoneCommand(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(targetIndex, duke);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new done command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param targetIndex Index of task which will be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return DoneCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DoneCommand getDoneCommand(int targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DoneCommand(targetIndex, null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the done command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke object duke must be initiated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant string prompt."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleDone(targetIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles done command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Marks the task at index {@code index} as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param index Index of task to be marked done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Prompt string from duke."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleDone(int index) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (index \u003c 1 || index \u003e duke.getNumTask()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        doneTask(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d Message.MARKED_DONE.toString() + duke.getTask(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Marks a specified task as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Task to be done is specified by its index id."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void doneTask(int id) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot done task! Task id out of bound!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (list.get(id - 1).isDone()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot done task! Task is already done!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.replace(id - 1, list.get(id - 1).markComplete());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(list.getList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DoneCommand(targetIndex, duke);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 91
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * EventCommand class to encapsulate a event command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A event command creates a new event task,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * which has a description and a time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class EventCommand extends StoringCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private EventCommand(String description, String time, IDuke duke) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns an EventCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time by which the task is to be completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return EventCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static EventCommand getEventCommand(String description, String time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new EventCommand(description, time, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the event command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke object duke must be initiated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleEvent(description, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles the event operation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates a new event task and store it in the returning Duke object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time of event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return String prompt from duke."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If the command parameters are incorrect."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleEvent(String description, String time)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of event cannot be empty!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (time.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The time of event cannot be empty!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d Event.getEvent(description, time);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storeTask(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"\\nNow you have \" + duke.getNumTask() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new EventCommand(description, time, duke);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 88
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * FindCommand class to encapsulate find operation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Find takes in a search string and displays all matching descriptions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Command must be initiated with a Duke object before executing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String searchString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private FindCommand(String searchString, IDuke duke) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a find command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param searchString Search string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A FindCommand which is not yet initiate with Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static FindCommand getFindCommand(String searchString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new FindCommand(searchString, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes find command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant duke object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleFind(searchString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints the list of matching tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param searchString Search string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If find param invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleFind(String searchString) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (searchString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The keyword of find cannot be empty!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int[] indexes \u003d IntStream"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .range(0, list.size())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e list.get(x).getDescription().contains(searchString))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .toArray();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Ui.displayTasks(list, indexes);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new FindCommand(searchString, duke);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 75
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * HelpCommand class to handle help command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private HelpCommand(IDuke duke, String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a HelpCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param keyword Keyword used to find help."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return HelpCommand object, not yet initiated with duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static HelpCommand getHelpCommand(String keyword) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new HelpCommand(null, keyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns and displays help message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Help message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String helpMessage \u003d Message.getHelpMessage(keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText(helpMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return helpMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public HelpCommand setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new HelpCommand(duke, keyword);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 48
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * ListCommand class to encapsulate a list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A list command list some tasks in the current duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ListCommand(String date, IDuke duke) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a ListCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param date Date by which the tasks are filtered by."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return ListCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ListCommand getListCommand(String date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ListCommand(date, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the list command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke object duke must be initiated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant duke object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return handleDisplay();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return handleDisplay(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleDisplay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Ui.displayTasks(list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles the display of list based on a date filter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param date Date by which the tasks are filtered by."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleDisplay(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int[] indexes \u003d IntStream"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .range(0, list.size())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e list.get(x).isSameTime(date))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .toArray();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Ui.displayTasks(list, indexes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ListCommand(date, duke);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 79
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Sort class to encapsulate a sort command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A sort command sorts the task based on some criteria,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * such as time or description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class SortCommand extends StoringCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final SortType sortType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param duke Duke object to perform action on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param sortType Type of sort."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected SortCommand(IDuke duke, SortType sortType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns an SortCommand object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return SortCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static SortCommand getSortCommand(SortType sortType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new SortCommand(null, sortType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Execute the sort."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke has to be initiated before execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The string prompt after the sort."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d handleSort();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleSort() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList taskList \u003d duke.getTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Sort task based on sort type"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        taskList.getList().sort(sortType.getTaskComparator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Save sorted tasks to disk"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(taskList.getList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return \"Sort successful!\\n\" + Ui.displayTasks(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public SortCommand setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new SortCommand(duke, sortType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luo-git": 80
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/SortType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Type of sort, which can be based on time or description alphabetically."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * When a time without actual time parameter (date or datetime) is defined to be smaller."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public enum SortType {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    TIME((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Optional\u003cTimeWrapper\u003e t1 \u003d o1.getTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Optional\u003cTimeWrapper\u003e t2 \u003d o2.getTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (t1.isEmpty() \u0026\u0026 t2.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (t1.isPresent() \u0026\u0026 t2.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (t1.isEmpty() \u0026\u0026 t2.isPresent()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert t1.isPresent() \u0026\u0026 t2.isPresent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return t1.get().compareTo(t2.get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    DESCRIPTION((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Comparator\u003c? super ITask\u003e taskComparator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    SortType(Comparator\u003c? super ITask\u003e taskComparator) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.taskComparator \u003d taskComparator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns the comparator associated with the sort type."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Comparator associated with the sort type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Comparator\u003c? super ITask\u003e getTaskComparator() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskComparator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 47
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/StoringCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Abstract StoringCommand which supports storing tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public abstract class StoringCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param targetIndex Target index for operation by the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param duke        Duke object to perform action on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected StoringCommand(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(targetIndex, duke);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Adds task in Duke object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Also invokes storage class to store task list on disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param task The tasks to be stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected void storeTask(ITask task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(list.getList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34
    }
  },
  {
    "path": "src/main/java/luoyi/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.IDuke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * ToDoCommand class to encapsulate a todo command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A todo command creates a new event task,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * which has a description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A command must be initiated with a Duke object before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * it can execute."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ToDoCommand extends StoringCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ToDoCommand(String description, IDuke duke) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns an ToDoCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of todo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return ToDoCommand object with specified properties, not yet initiated with duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ToDoCommand getToDoCommand(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDoCommand(description, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the todo command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Duke object duke must be initiated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant duke object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleToDo(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles the todo operation."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates a new todo task and store it in the returning Duke object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resulting string prompt."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If the description is incorrect."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private String handleToDo(String description) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert duke !\u003d null : Message.ERR_DUKE_NOT_INIT.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d ToDo.getToDo(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storeTask(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"\\nNow you have \" + duke.getNumTask() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDoCommand(description, duke);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 78
    }
  },
  {
    "path": "src/main/java/luoyi/duke/common/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encapsulate all the common messages used in the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public enum Message {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    WELCOME (\"Hi I\u0027m Cat Bot.\\nWhat can I do for you?\\n\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    FAREWELL (\"Bye! Hope to see you again! (App closing in 5s)\\n\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    LIST (\"Here are the tasks in your list:\\n\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    MARKED_DONE (\"Naisu! I\u0027ve marked this task done!\\n\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    REMOVED_TASK (\"Hmmm~! I\u0027ve removed this task:\\n\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_NO_TASK_IN_LIST (\"Oops! Looks like there\u0027s no task in the list!\\n\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_NO_MATCHING_TASK (\"Oops! Looks like there\u0027s no matching task!\\n\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_LIST_CMD (\"Wrong list command!\\n\" + Usage.get(\"list\") + \"\\n\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_DONE_CMD (\"Wrong done command!\\n\" + Usage.get(\"done\") + \"\\n\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_TODO_CMD (\"Wrong todo command!\\n\" + Usage.get(\"todo\") + \"\\n\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_DEADLINE_CMD (\"Wrong deadline command!\\n\" + Usage.get(\"deadline\") + \"\\n\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_EVENT_CMD (\"Wrong event command!\\n\" + Usage.get(\"event\") + \"\\n\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_DELETE_CMD (\"Wrong delete command!\\n\" + Usage.get(\"delete\") + \"\\n\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_FIND_CMD (\"Wrong find command!\\n\" + Usage.get(\"find\") + \"\\n\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_SORT_CMD (\"Wrong sort command!\\n\" + Usage.get(\"sort\") + \"\\n\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_CMD (\"Unrecognizable command!\\n\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_DUKE_NOT_INIT(\"Duke not initialised yet in execute command\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    CAT_DOUBT (\"Meow? Sorry I don\u0027t know what you are talking about...\\n\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    CAT_CRY (\"Meow!!! Something terrible happened!\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Class to encapsulate the usage help strings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static class Usage {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        private static final HashMap\u003cString, String\u003e usages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        static {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"list\", \"List the tasks stored. Optionally, list tasks on a specific date.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    + \"\\nUsage: list [DATE]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"done\", \"Mark a task as done.\\nUsage: done INDEX\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"todo\", \"Create a new todo task.\\nUsage: todo DESCRIPTION\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"deadline\", \"Create a new deadline task.\\nUsage: deadline DESCRIPTION /by TIME\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"event\", \"Create a new event task.\\nUsage: event DESCRIPTION /at TIME\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"delete\", \"Delete a task.\\nUsage: delete INDEX\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"find\", \"Find a task based on description.\\nUsage: find DESCRIPTION\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"bye\", \"Exit program.\\nUsage: bye\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"sort\", \"Sort tasks.\\nUsage: sort [TIME/DESCRIPTION]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            usages.put(\"help\", \"Get help message. Can specify command to narrow help message.\\nUsage: help [KEYWORD]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        private static String get(String key) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return usages.get(key);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    Message(String message) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns help message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param keyword Keyword used to find help."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Help message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String getHelpMessage(String keyword) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (keyword !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String helpMessage \u003d Usage.get(keyword);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return helpMessage \u003d\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    ? \"Cannot find help for \" + keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    : keyword + \": \" + helpMessage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // If no keyword, return help for all commands"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Usage.usages.forEach((key, description) -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                sb.append(key).append(\": \").append(description).append(\"\\n\\n\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 84
    }
  },
  {
    "path": "src/main/java/luoyi/duke/common/TextFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Handles text formatting"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TextFormatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** Bot Logo */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String LOGO \u003d \"CAT BOT\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** Horizontal lines used for formatting */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \"------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns text formatted with indentation and lines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param text Text to be wrapped."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String getFormattedText(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d text.replaceAll(\"(?m)^\", \"|\\t\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (output.charAt(output.length() - 1) !\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return HORIZONTAL_LINE + \"\\n\" + output + HORIZONTAL_LINE + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 26
    }
  },
  {
    "path": "src/main/java/luoyi/duke/common/TimeWrapper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.parser.TimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Time wrapper class to store a time that maybe contains explicit time representation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TimeWrapper implements Comparable\u003cTimeWrapper\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private TimeWrapper(LocalDate date, LocalDateTime dateTime, String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a time wrapper."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string String representation of time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A time wrapper which may contain explicit time representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static TimeWrapper getTimeWrapper(String string) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (TimeParser.isDateTime(string)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            LocalDateTime ldt \u003d TimeParser.parseDateTime(string);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new TimeWrapper(ldt.toLocalDate(), ldt, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (TimeParser.isDate(string)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new TimeWrapper(TimeParser.parseDate(string), null, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new TimeWrapper(null, null, string);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if both time wrapper represents the same time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param obj An object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if both objects are TimeWrapper and represent the same time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!(obj instanceof TimeWrapper)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper tw \u003d (TimeWrapper) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.dateTime !\u003d null \u0026\u0026 tw.dateTime !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.dateTime.equals(tw.dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.date !\u003d null \u0026\u0026 tw.date !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.date.equals(tw.date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.message !\u003d null \u0026\u0026 tw.message !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.message.equals(tw.message);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return dateTime.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return date.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (message !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return \"No data found.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public int compareTo(TimeWrapper o) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.dateTime !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (o.dateTime !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return this.dateTime.compareTo(o.dateTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (o.date !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return this.dateTime.toLocalDate().compareTo(o.date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (o.message !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (this.date !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (o.dateTime !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return this.date.compareTo(o.dateTime.toLocalDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (o.date !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return this.date.compareTo(o.date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (o.message !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (this.message !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (o.dateTime !\u003d null || o.date !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (o.message !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return this.message.compareTo(o.message);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new RuntimeException(\"Invalid TimeWrapper Object!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 107
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeUnrecognizedArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Duke chatbot class to encapsulate the behavior of the chatbot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Task id starts from 1."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Duke implements IDuke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** List for storing Tasks */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final TaskList list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Duke(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.list \u003d new TaskList(list.getList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Duke chatbot object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New Duke chatbot object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Duke getDuke(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage sm \u003d Storage.getStorage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(new TaskList(sm.read()), sm);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Ui.greet();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void storeTask(ITask task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ITask getTask(int id) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new IllegalArgumentException(\"Task id out of bound!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.get(id - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public int getNumTask() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String handleCommand(String command) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return c.setDuke(this).execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DukeIllegalArgumentException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String output \u003d \"Meow?!! \" + e.getMessage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(output);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DukeUnrecognizedArgumentException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String output \u003d Message.CAT_DOUBT.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String output \u003d Message.CAT_CRY.toString() + e;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(TextFormatter.getFormattedText(output));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns the storage utility object used in the chatbot."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Storage utility object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleCommand(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 119,
      "-": 1
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/IDuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public interface IDuke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints and returns greeting message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String greet();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Saves a task in Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param task Task to be saved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void storeTask(ITask task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a specific task from the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The specified task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ITask getTask(int id);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a list of all the tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The specified task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    TaskList getTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Gets the number of tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Number of tasks currently in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    int getNumTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles a given command and returns the resulting message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param command A user command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Response string from Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String handleCommand(String command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    Storage getStorage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String getResponse(String input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 52
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/exception/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Duke specific exception, thrown when Duke detects illegal/empty argument."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DukeIllegalArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public DukeIllegalArgumentException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/exception/DukeUnrecognizedArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Duke specific exception, thrown when argument cannot be recognized by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DukeUnrecognizedArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public DukeUnrecognizedArgumentException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An Immutable Deadline class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Deadline is a task that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Deadline(String description, TimeWrapper time, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, time, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time by which the task is to be done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Deadline getDeadline(String description, String time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Deadline(description, TimeWrapper.getTimeWrapper(time), false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Deadline(description, time, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"D|%d|%s|%s\", isDone ? 1 : 0, description, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), time.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 45
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An immutable Event class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An Event is a task that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Event(String description, TimeWrapper time, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, time, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time during which the event is happening."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Event getEvent(String description, String time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Event(description, TimeWrapper.getTimeWrapper(time), false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Event(description, time, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"E|%d|%s|%s\", isDone ? 1 : 0, description, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 45
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/ITask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public interface ITask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a task which is completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Completed Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ITask markComplete();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if the task is done, false otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return true if the task is done, false otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean isDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a string to represent data in this task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A string to represent the data in this task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String getDataString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns the time object stored in the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * The time object may or may not exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Optional time object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    Optional\u003cTimeWrapper\u003e getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Checks if the task occurs at some date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param date Date to check against."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if task occurs at that time, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean isSameTime(String date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 51
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Immutable Task Object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A task has a description and a completion status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public abstract class Task implements ITask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Task object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param isDone Boolean to keep track of whether the task is done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[%s] %s\", isDone ? \"\\u2713\" : \"\\u2718\", description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 41
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * TaskList class to encapsulate a list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final List\u003cITask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a TaskList using a list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param taskList A list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TaskList(List\u003cITask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void add(ITask task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Removes a task in the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param index Task index to be removed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Replaces a task in the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param index Task index to be removed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param newTask Task used to replace the old task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void replace(int index, ITask newTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        taskList.set(index, newTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Return the task at index {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param index Index of the task to be returned."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The task at index {@code index}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ITask get(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Size of the task list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns the list stored in the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return List stored in the task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cITask\u003e getList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 76
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encapsulate a task which has a time component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final TimeWrapper time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new TimedTask object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param isDone      Boolean to keep track of whether the task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected TimedTask(String description, TimeWrapper time, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Optional\u003cTimeWrapper\u003e getTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isSameTime(String date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return time.equals(TimeWrapper.getTimeWrapper(date));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 40
    }
  },
  {
    "path": "src/main/java/luoyi/duke/data/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Immutable ToDo class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A ToDo is a task without any date/time attached to it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted ToDo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of ToDo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted ToDo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ToDo getToDo(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDo(description, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDo(description, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"T|%d|%s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns an empty optional."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * This is because todo has no time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Empty optional."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Optional\u003cTimeWrapper\u003e getTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns vacuous false."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isSameTime(String date) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 66
    }
  },
  {
    "path": "src/main/java/luoyi/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.SortType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeUnrecognizedArgumentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Parser class to handle command string parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parse a command and returns the corresponding command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param commandStr Command string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Command object to execute."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If the command string is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @see Command For details of command objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Command parse(String commandStr) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (commandStr.matches(\"^list.*\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found list command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseListCommand(commandStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^done.*\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found done command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseDoneCommand(commandStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^todo.*\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found todo command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseToDoCommand(commandStr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^deadline.*\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found deadline command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseDeadlineCommand(commandStr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^event.*\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle event command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseEventCommand(commandStr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^delete.*\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle delete command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseDeleteCommand(commandStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^find.*\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle find command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseFindCommand(commandStr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^help.*\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle help command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseHelpCommand(commandStr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^sort.*\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle sort command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return parseSortCommand(commandStr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return ByeCommand.getByeCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new DukeUnrecognizedArgumentException(Message.ERR_WRONG_CMD.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static SortCommand parseSortCommand(String commandStr) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (commandStr.equals(\"sort time\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return SortCommand.getSortCommand(SortType.TIME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.equals(\"sort description\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return SortCommand.getSortCommand(SortType.DESCRIPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Message.ERR_WRONG_SORT_CMD.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static HelpCommand parseHelpCommand(String commandStr) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^help .+\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return HelpCommand.getHelpCommand(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String param \u003d commandStr.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return HelpCommand.getHelpCommand(param);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static FindCommand parseFindCommand(String commandStr) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^find .*\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_FIND_CMD.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String searchString \u003d commandStr.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return FindCommand.getFindCommand(searchString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static DeleteCommand parseDeleteCommand(String commandStr) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^delete -?[0-9]+$\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_DELETE_CMD.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int index \u003d Integer.parseInt(commandStr.split(\" \")[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DeleteCommand.getDeleteCommand(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static EventCommand parseEventCommand(String commandStr) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^event .* /at .*\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_EVENT_CMD.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String[] params \u003d commandStr.split(\" \", 2)[1].split(\" /at \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return EventCommand.getEventCommand(params[0], params[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static DeadlineCommand parseDeadlineCommand(String commandStr) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^deadline .* /by .*\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_DEADLINE_CMD.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String[] params \u003d commandStr.split(\" \", 2)[1].split(\" /by \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DeadlineCommand.getDeadlineCommand(params[0], params[1]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static ToDoCommand parseToDoCommand(String commandStr) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^todo .*\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_TODO_CMD.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String description \u003d commandStr.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return ToDoCommand.getToDoCommand(description);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static DoneCommand parseDoneCommand(String commandStr) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!commandStr.matches(\"^done -?[0-9]+$\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_DONE_CMD.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int index \u003d Integer.parseInt(commandStr.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DoneCommand.getDoneCommand(index);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static ListCommand parseListCommand(String commandStr) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (commandStr.equals(\"list\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return ListCommand.getListCommand(null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!commandStr.matches(\"^list .+\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_WRONG_LIST_CMD.toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return ListCommand.getListCommand(commandStr.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 147
    }
  },
  {
    "path": "src/main/java/luoyi/duke/parser/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encapsulate custom parsing of time string to get LocalDate or LocalTime."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // Accept YYYYMMDD, DDMMYYYY"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final List\u003cPattern\u003e DATE_PATTERN_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            List.of(Pattern.compile(\"(?\u003cyear\u003e\\\\d{4})[\\\\s\\\\-./](?\u003cmonth\u003e\\\\d{2})[\\\\s\\\\-./](?\u003cday\u003e\\\\d{2})\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Pattern.compile(\"(?\u003cday\u003e\\\\d{2})[\\\\s\\\\-./](?\u003cmonth\u003e\\\\d{2})[\\\\s\\\\-./](?\u003cyear\u003e\\\\d{4})\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // Accept YYYY MM DD HHMM, DD MM YYYY HHMM"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final List\u003cPattern\u003e DATETIME_PATTERN_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            List.of(Pattern.compile(\"(?\u003cyear\u003e\\\\d{4})[\\\\s\\\\-./](?\u003cmonth\u003e\\\\d{2})[\\\\s\\\\-./](?\u003cday\u003e\\\\d{2})\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    + \"[\\\\sT](?\u003chour\u003e\\\\d{2})[\\\\s.:]?(?\u003cminute\u003e\\\\d{2})\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Pattern.compile(\"(?\u003cday\u003e\\\\d{2})[\\\\s\\\\-./](?\u003cmonth\u003e\\\\d{2})[\\\\s\\\\-./](?\u003cyear\u003e\\\\d{4})\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            + \"[\\\\sT](?\u003chour\u003e\\\\d{2})[\\\\s.:]?(?\u003cminute\u003e\\\\d{2})\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a parsed date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string Time as a string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return LocalDate representing the time string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static LocalDate parseDate(String string) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!isDate(string)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string + \" does not have a date time!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Try to match string against any pattern in pattern list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Pattern pattern \u003d DATE_PATTERN_LIST"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e x.matcher(string).find())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert pattern !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Match and return string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(string);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string + \" failed to match regex!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return LocalDate.of(Integer.parseInt(matcher.group(\"year\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Integer.parseInt(matcher.group(\"month\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Integer.parseInt(matcher.group(\"day\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a parsed date time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string Time as a string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return LocalDateTime representing the time string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static LocalDateTime parseDateTime(String string) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!isDateTime(string)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string + \" does not have a date time!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Try to match string against any pattern in pattern list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Pattern pattern \u003d DATETIME_PATTERN_LIST"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e x.matcher(string).find())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert pattern !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Match and return string"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(string);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string + \" failed to match regex!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return LocalDateTime.of(Integer.parseInt(matcher.group(\"year\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Integer.parseInt(matcher.group(\"month\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Integer.parseInt(matcher.group(\"day\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Integer.parseInt(matcher.group(\"hour\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Integer.parseInt(matcher.group(\"minute\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Checks if a string is a date time."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string String to be checked."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if the string is a date time, false otherwise."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static boolean isDateTime(String string) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DATETIME_PATTERN_LIST.stream().anyMatch(x -\u003e x.matcher(string).matches());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Checks if a string is a date."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string String to be checked."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if the string is a date, false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static boolean isDate(String string) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DATE_PATTERN_LIST.stream().anyMatch(x -\u003e x.matcher(string).matches());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 115
    }
  },
  {
    "path": "src/main/java/luoyi/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encapsulate operations related to storage of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Storage(Path filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a StorageManager object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Storage file path is created if missing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param filePath Path to the storage file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return StorageManager class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Storage getStorage(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage sm \u003d new Storage(Path.of(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            sm.preparePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return sm;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(\"Error creating file structure!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // If the file structure cannot be created, quit application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.exit(-1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private List\u003cString\u003e readFromFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File f \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cString\u003e taskStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            taskStringList.add(s.nextLine());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskStringList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Saves a list of strings into the hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param list A list of string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void save(List\u003c? extends ITask\u003e list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cString\u003e encodedList \u003d TaskEncoder.encodeTaskList(list);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        encodedList.forEach(x -\u003e sb.append(x).append(\"\\n\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            writeToFile(sb.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(\"Unable to save to disk!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a list of tasks by reading from hard disk."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A list of tasks stored on hard disk."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cITask\u003e read() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return TaskDecoder.decodeList(readFromFile());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(\"Error reading from file!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new RuntimeException(\"Unable to read task list from disk, exiting...\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prepare the file path if the file path is not present."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws IOException If IO operation failed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void preparePath() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!Files.exists(filePath.getParent())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // If folder structure not present, create folder"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Files.createDirectory(filePath.getParent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // If file not present, create file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert Files.exists(filePath.getParent()) : \"File path was not created!\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assert Files.exists(filePath) : \"File was not created!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 111
    }
  },
  {
    "path": "src/main/java/luoyi/duke/storage/TaskDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * TaskDecoder class to encapsulate Task decoding used for storage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Format is [T/D/E]|[0/1]|[description]|[time]."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TaskDecoder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a list of task objects from a list of task strings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Decodes a list of task strings into task objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param taskString List of task in string representation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return List of task objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static List\u003cITask\u003e decodeList(List\u003cString\u003e taskString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cITask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        taskString.forEach(x -\u003e taskList.add(decodeTask(x)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a single task by decoding."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param taskString Task in string representation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static ITask decodeTask(String taskString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String[] list \u003d taskString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        switch (list[0]) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d ToDo.getToDo(list[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d Deadline.getDeadline(list[2], list[3]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d Event.getEvent(list[2], list[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new IllegalArgumentException(\"Unable to decode!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (list[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d task.markComplete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assert task.isDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 59
    }
  },
  {
    "path": "src/main/java/luoyi/duke/storage/TaskEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ITask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encodes the tasks in a Duke object to a string for storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * The format is [T/D/E]|[0/1]|[description]|[time]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TaskEncoder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a list of encoded task strings of a Duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param tasks object whose tasks will be encoded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A list of strings representing the tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static List\u003cString\u003e encodeTaskList(List\u003c? extends ITask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tasks.forEach(x -\u003e encodedTasks.add(x.getDataString()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 25
    }
  },
  {
    "path": "src/main/java/luoyi/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.MainWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Circle displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        displayPicture.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Make user dialog bold"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        db.dialog.setStyle(\"-fx-font-weight: bolder\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 66
    }
  },
  {
    "path": "src/main/java/luoyi/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package luoyi.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TextFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Ui class to encapsulate output operations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints greeting message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return String greeting message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter.LOGO);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .getFormattedText(Message.WELCOME.toString()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return TextFormatter.LOGO + Message.WELCOME.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints farewell message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return String farewell message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String bye() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.print(TextFormatter"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .getFormattedText(Message.FAREWELL.toString()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Message.FAREWELL.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints a list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param list List of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return String representation of the tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String displayTasks(TaskList list) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_NO_TASK_IN_LIST.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return Message.ERR_NO_TASK_IN_LIST.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(Message.LIST.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                sb.append(\" \").append(i + 1).append(\". \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .append(list.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(TextFormatter.getFormattedText(sb.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Display a list of tasks based a list of indexes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param list List of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param listIndex List of task indexes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return String representation of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String displayTasks(TaskList list, int[] listIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (listIndex.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_NO_MATCHING_TASK.toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return Message.ERR_NO_MATCHING_TASK.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Here are the task on you are looking for:\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            for (int index : listIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                sb.append(\" \").append(index + 1).append(\". \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .append(list.get(index).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.print(TextFormatter.getFormattedText(sb.toString()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 79
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" stylesheets\u003d\"@style.css\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \u003cFont size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "      \u003cCircle fx:id\u003d\"displayPicture\" fill\u003d\"DODGERBLUE\" radius\u003d\"53.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "luo-git": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"luoyi.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"bodyBackground\" stylesheets\u003d\"@style.css\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "luo-git": 19
    }
  },
  {
    "path": "src/test/java/TimeParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.parser.TimeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * TimeParser tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TimeParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void isDate_wrongFormat_false() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // No space"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"20201111\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"11112020\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Using colon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020:11:11\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020:1:1\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"20:11:2011\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2:1:2011\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Extra number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"202011111\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020 11111\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020/11/111\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020-111-11\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"11111 2020\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"11/111/2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"111-11-2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Not enough number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020111\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020/1/11\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020/01/1\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2020 01 1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"01 1 2020\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"01-1-2020\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Using character"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"0c-10-2020\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"01-c0-2020\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"01-10-2c20\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2001-10-c0\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Others"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\"2001-10-10.\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDate(\".2001-10-10\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void isDate_correctFormat_true() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] separators \u003d new char[]{\u0027.\u0027, \u0027-\u0027, \u0027/\u0027, \u0027 \u0027};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String day \u003d \"01\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String month \u003d \"11\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String year \u003d \"2020\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exhaustively test correct format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (char s1 : separators) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            for (char s2: separators) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // YYYY MM DD"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String testStr \u003d year;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d month;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d day;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!TimeParser.isDate(testStr)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    fail(testStr);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // DD MM YYYY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr \u003d day;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d month;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d year;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!TimeParser.isDate(testStr)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    fail(testStr);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void isDateTime_wrongFormat_false() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // No space"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"202010101111\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"101011112020\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Wrong delimiter"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020c10c10c11c11\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"10c10c11c11c2020\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Extra number"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 10 101 1111\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 110 01 1111\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"20210 10 01 1111\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2021 10 01 11111\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 10 101 1111\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2021 101 01 2020\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Not enough number"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 10 10 111\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 10 1 1111\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 1 10 1111\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"202 10 10 1111\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Others"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 10 10 11-11\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(TimeParser.isDateTime(\"2020 10 10.11 11\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void isDateTime_correctFormat_true() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] dateSeparators \u003d new char[]{\u0027.\u0027, \u0027-\u0027, \u0027/\u0027, \u0027 \u0027};"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] dateTimeSeparators \u003d new char[]{\u0027 \u0027, \u0027T\u0027};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] timeSeparators \u003d new char[]{\u0027 \u0027, \u0027.\u0027, \u0027:\u0027};"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String day \u003d \"01\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String month \u003d \"11\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String year \u003d \"2020\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String hour \u003d \"10\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String min \u003d \"10\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exhaustively test correct format"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (char s1 : dateSeparators) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            for (char s2: dateSeparators) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                for (char s3 : dateTimeSeparators) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    for (char s4 : timeSeparators) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        // YYYY MM DD HH MM"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        String testStr \u003d year + s1 + month + s2 + day + s3 + hour + s4 + min;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        if (!TimeParser.isDateTime(testStr)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            fail(testStr);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        // DD MM YYYY HH MM"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        testStr \u003d day + s1 + month + s2 + year + s3 + hour + s4 + min;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        if (!TimeParser.isDateTime(testStr)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            fail(testStr);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parseDate_correctInput_correctLocalDateReturned() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] separators \u003d new char[]{\u0027.\u0027, \u0027-\u0027, \u0027/\u0027, \u0027 \u0027};"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String day \u003d \"01\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int dayInt \u003d 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String month \u003d \"11\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int monthInt \u003d 11;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String year \u003d \"2020\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int yearInt \u003d 2020;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exhaustively test correct format"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (char s1 : separators) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            for (char s2: separators) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // YYYY MM DD"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String testStr \u003d year;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d month;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s2;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d day;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!TimeParser.parseDate(testStr)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .equals(LocalDate.of(yearInt, monthInt, dayInt))) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    fail(testStr);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // DD MM YYYY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr \u003d day;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d month;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d s2;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                testStr +\u003d year;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                if (!TimeParser.parseDate(testStr)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .equals(LocalDate.of(yearInt, monthInt, dayInt))) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    fail(testStr);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parseDate_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(DukeIllegalArgumentException.class, () -\u003e TimeParser.parseDate(\"2020 19 10\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(DukeIllegalArgumentException.class, () -\u003e TimeParser.parseDate(\"2020-10-99\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(DukeIllegalArgumentException.class, () -\u003e TimeParser.parseDate(\"10-19-2000\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(DukeIllegalArgumentException.class, () -\u003e TimeParser.parseDate(\"10-19-2020\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parseDateTime_validInput_correctDateTimeReturned() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] dateSeparators \u003d new char[]{\u0027.\u0027, \u0027-\u0027, \u0027/\u0027, \u0027 \u0027};"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] dateTimeSeparators \u003d new char[]{\u0027 \u0027, \u0027T\u0027};"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        char[] timeSeparators \u003d new char[]{\u0027 \u0027, \u0027.\u0027, \u0027:\u0027};"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String day \u003d \"01\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int dayInt \u003d 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String month \u003d \"11\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int monthInt \u003d 11;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String year \u003d \"2020\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int yearInt \u003d 2020;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String hour \u003d \"10\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int hourInt \u003d 10;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String min \u003d \"10\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int minInt \u003d 10;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exhaustively test correct format"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (char s1 : dateSeparators) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            for (char s2: dateSeparators) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                for (char s3 : dateTimeSeparators) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    for (char s4 : timeSeparators) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        // YYYY MM DD HH MM"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        String testStr \u003d year + s1 + month + s2 + day + s3 + hour + s4 + min;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        if (!TimeParser.parseDateTime(testStr)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                .equals(LocalDateTime.of(yearInt, monthInt, dayInt, hourInt, minInt))) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            fail(testStr);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        // DD MM YYYY HH MM"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        testStr \u003d day + s1 + month + s2 + year + s3 + hour + s4 + min;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        if (!TimeParser.parseDateTime(testStr)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                                .equals(LocalDateTime.of(yearInt, monthInt, dayInt, hourInt, minInt))) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            fail(testStr);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parseDateTime_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(DukeIllegalArgumentException.class, () -\u003e TimeParser.parseDateTime(\"2020 19 10 22 99\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(DukeIllegalArgumentException.class, () -\u003e TimeParser.parseDateTime(\"2020 19 10 99 11\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 242
    }
  },
  {
    "path": "src/test/java/TimeWrapperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.common.TimeWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TimeWrapperTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals_sameDateTime_true() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t1 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11 12:12\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t2 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11 12:12\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(t2, t1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals_sameDateDiffTime_false() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t1 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11 12:11\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t2 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11 22:12\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(t2, t1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals_sameDate_true() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t1 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t2 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(t2, t1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals_diffDate_false() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t1 \u003d TimeWrapper.getTimeWrapper(\"2020 11 11\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t2 \u003d TimeWrapper.getTimeWrapper(\"2020 8 11\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(t2, t1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals_sameStringDescription_true() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t1 \u003d TimeWrapper.getTimeWrapper(\"Tomorrow\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t2 \u003d TimeWrapper.getTimeWrapper(\"Tomorrow\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(t2, t1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals_diffStringDescription_false() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t1 \u003d TimeWrapper.getTimeWrapper(\"Tomorrow\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper t2 \u003d TimeWrapper.getTimeWrapper(\"Next year\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertNotEquals(t2, t1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 51
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.data.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import luoyi.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Test Ui class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void greet_stringPrinted() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedOutput \u003d \"CAT BOT\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tHi I\u0027m Cat Bot.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tWhat can I do for you?\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void bye_stringPrinted() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.bye();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tBye! Hope to see you again! (App closing in 5s)\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void displayTasks_emptyList_emptyListPromptPrinted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.displayTasks(list);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tOops! Looks like there\u0027s no task in the list!\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void displayTasks_correctTaskList_listPrinted() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(ToDo.getToDo(\"Have lunch.\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(Deadline.getDeadline(\"Homework\", \"2020 11 11\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(Event.getEvent(\"Tutorial\", \"2020 11 11 11:22\").markComplete());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.displayTasks(list);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tHere are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\t 1. [T][\\u2718] Have lunch.\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\t 2. [D][\\u2718] Homework (by: 2020-11-11)\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\t 3. [E][\\u2713] Tutorial (at: 2020-11-11T11:22)\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void displayTasks_correctDate_matchingTaskPrinted() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d setUpTestList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.displayTasks(list, new int[]{2, 3});"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tHere are the task on you are looking for:\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\t 3. [E][\\u2713] Tutorial (at: 2020-11-11T11:22)\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\t 4. [E][\\u2713] Lecture (at: 2020-11-12T10:45)\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void displayTasks_noMatch_noMatchPromptPrinted() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d setUpTestList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.displayTasks(list, new int[]{});"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"|\\tOops! Looks like there\u0027s no matching task!\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private TaskList setUpTestList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(ToDo.getToDo(\"Have lunch.\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(Deadline.getDeadline(\"Homework\", \"2020 11 11\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(Event.getEvent(\"Tutorial\", \"2020 11 11 11:22\").markComplete());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(Event.getEvent(\"Lecture\", \"2020 11 12 10:45\").markComplete());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "luo-git": 117
    }
  },
  {
    "path": "text-ui-test/input_deadline.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline do laundry /by tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline have something to eat /by lunch time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/input_delete.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo myTodo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline myDeadline /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event myEvent /at today"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 11
    }
  },
  {
    "path": "text-ui-test/input_event.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event NUS OPEN HOUSE /at August"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event SOMETHING FUN /at JUNE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/input_exception.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo correctTodo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo correctTodo something extra"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline wrong command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline place /at time"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline   /by time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline place /by    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline correctDeadline /by time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event wrong command\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event place /by time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event   /at tomorrow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event someEvent /at   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event correctEvent /at today"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete haha this is funny"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 28
    }
  },
  {
    "path": "text-ui-test/input_mixed.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo coding"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline lab1 /by tomorrow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event weeee~ /at next year"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 13
    }
  },
  {
    "path": "text-ui-test/input_todo.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo abc"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo bcd"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_EXCEPTION.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_DELETE.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "javac  -cp ..\\src -Xlint:none -encoding UTF-8 -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_todo.txt \u003e ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_deadline.txt \u003e ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_event.txt \u003e ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_mixed.txt \u003e ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_exception.txt \u003e ACTUAL_EXCEPTION.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_delete.txt \u003e ACTUAL_DELETE.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_TODO.TXT EXPECTED_TODO.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_EVENT.TXT EXPECTED_EVENT.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_MIXED.TXT EXPECTED_MIXED.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_EXCEPTION.TXT EXPECTED_EXCEPTION.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_DELETE.TXT EXPECTED_DELETE.TXT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "luo-git": 25,
      "-": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_TODO.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_DEADLINE.TXT\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_EVENT.TXT\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_MIXED.TXT\" ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if ! javac -cp ../src -Xlint:none -encoding UTF-8 -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input_todo.txt \u003e ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_deadline.txt \u003e ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_event.txt \u003e ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_mixed.txt \u003e ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34,
      "-": 31
    }
  }
]
