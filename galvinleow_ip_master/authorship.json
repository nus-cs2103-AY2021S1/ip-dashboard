[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Deadline,false,return book,2020-02-02T18:20"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "Event,false,meeting,2020-08-23T18:00,2020-08-23T19:20"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 2
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  LocalDateTime by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"E, dd/MMM/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return String.format(\"[D]%s (by: %s)\", super.toString(), by.format(dtf));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 18
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  private static final String CURRENT_DIRECTORY \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    String logo \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    System.out.println(logo + \"\\nHello ! I\u0027m Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    final String dataDir \u003d CURRENT_DIRECTORY + File.separator + \"data\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    final String dataFile \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    // Check for if data file exist, create if does not exist"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    createFile(dataDir, dataFile);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    ArrayList\u003cTask\u003e dataArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    readFileToArrList(dataDir, dataFile, dataArrayList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    String input \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      input \u003d scanner.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      // Switch case use for scalability"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      switch (input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.println(\"Here are the tasks in your list: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          int count \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          for (Task task : dataArrayList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            System.out.printf(\"%d.%s\\n\", count, task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          int change \u003d scanner.nextInt() - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          Task task \u003d dataArrayList.get(change);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          task.markAsDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.printf(\"%s\\n\", task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          int delete \u003d scanner.nextInt() - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.printf(\"\\t%s\\n\", dataArrayList.get(delete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          dataArrayList.remove(delete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.printf(\"Now you have %o tasks in the list\\n\", dataArrayList.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          if (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            String addMessage \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            switch (input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              case \"todo\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                String descToDo \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                if (descToDo.equals(\"\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                System.out.println(addMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                dataArrayList.add(new Todo(descToDo));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              case \"deadline\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  scanner.useDelimiter(\"/by\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String descDeadline \u003d scanner.next().trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  if (descDeadline.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    throw new DukeException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                        \"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  scanner.skip(\"/by\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String by \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  if (by.equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The deadline cannot be empty.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String[] inputDateTime \u003d by.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String[] date \u003d inputDateTime[0].split(\"[/\\\\\\\\]|-\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalDate localDate \u003d dateToLocalDate(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalTime localTime \u003d LocalTime.of(0, 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  if (inputDateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    int timeLength \u003d inputDateTime[1].length();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    if (timeLength \u003d\u003d 4) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      int hour \u003d Integer.parseInt(inputDateTime[1].substring(0, 2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      int minute \u003d Integer.parseInt(inputDateTime[1].substring(2, 4));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    } else if (timeLength \u003d\u003d 3) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      int hour \u003d Integer.parseInt(String.valueOf(inputDateTime[1].charAt(0)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      int minute \u003d Integer.parseInt(inputDateTime[1].substring(1, 3));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      throw new DukeException(\"Error with input time\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalDateTime localDateTime \u003d LocalDateTime.of(localDate, localTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  System.out.println(addMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  dataArrayList.add(new Deadline(descDeadline, localDateTime));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              case \"event\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  System.out.println(addMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  scanner.useDelimiter(\"/at\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String descEvent \u003d scanner.next().trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  if (descEvent.equals(\"\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    throw new DukeException("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                        \"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  scanner.skip(\"/at\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String at \u003d scanner.nextLine().trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  if (at.equals(\"\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The event date cannot be empty.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String[] inputDateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  String[] date \u003d inputDateTime[0].split(\"[/\\\\\\\\]|-\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalDate localDate \u003d dateToLocalDate(date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalTime startLocalTime \u003d LocalTime.of(0, 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalTime endLocalTime \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  if (inputDateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    String[] timeArr \u003d inputDateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    if (timeArr.length \u003e 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                      endLocalTime \u003d timeToLocalTime(timeArr[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    startLocalTime \u003d timeToLocalTime(timeArr[0]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalDateTime startLocalDateTime \u003d LocalDateTime.of(localDate, startLocalTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  LocalDateTime endLocalDateTime \u003d LocalDateTime.of(localDate, endLocalTime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  dataArrayList.add(new Event(descEvent, startLocalDateTime, endLocalDateTime));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                throw new Exception(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            int arrListSize \u003d dataArrayList.size();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            System.out.println(\"\\t\" + dataArrayList.get(arrListSize - 1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            scanner.reset();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            System.out.printf(\"Now you have %o tasks in list.\\n\", arrListSize);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      writeArrListToFile(dataDir, dataFile, dataArrayList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  private static LocalDate dateToLocalDate(String[] date) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    LocalDate localDate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    if (date.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      localDate \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      throw new DukeException(\"Error with input date!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return localDate;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  private static LocalTime timeToLocalTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    int timeLength \u003d time.length();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    LocalTime localTime;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    if (timeLength \u003d\u003d 4) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    } else if (timeLength \u003d\u003d 3) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int hour \u003d Integer.parseInt(String.valueOf(time.charAt(0)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      int minute \u003d Integer.parseInt(time.substring(1, 3));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      localTime \u003d LocalTime.of(hour, minute);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      throw new DukeException(\"Error with input time\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return localTime;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  private static void createFile(String pathDir, String fileName) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    Path path \u003d Paths.get(pathDir);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    if (Files.exists(path)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        File file \u003d new File(path + File.separator + fileName);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (file.createNewFile()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.println(\"File created at: \" + file);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          System.out.println(\"File already exist at: \" + file);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.err.println(\"Failed to create file: \" + e.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        Files.createDirectories(path);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.out.println(\"Directory created: \" + pathDir);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        System.err.println(\"Failed to create directory: \" + e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      createFile(pathDir, fileName);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  private static void writeArrListToFile(String dir, String fileName, ArrayList\u003cTask\u003e dataArr) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      FileWriter writer \u003d new FileWriter(dir + File.separator + fileName);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      for (Task task : dataArr) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String taskType \u003d task.getClass().getTypeName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        if (taskType.equals(\"Todo\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          writer.append(String.format(\"%s,%s,%s\", taskType, task.isDone, task.description));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else if (taskType.equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          writer.append("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              String.format("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  \"%s,%s,%s,%s\", taskType, task.isDone, task.description, ((Deadline) task).by));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          writer.append("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              String.format("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  \"%s,%s,%s,%s,%s\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                  taskType, task.isDone, task.description, ((Event) task).at, ((Event) task).end));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      writer.close();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    } catch (IOException ioException) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      ioException.printStackTrace();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  private static void readFileToArrList(String dataDir, String fileName, ArrayList\u003cTask\u003e dataArr) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    File file \u003d new File(dataDir + File.separator + fileName);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      String fileLine;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      while ((fileLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String[] tempArr \u003d fileLine.split(\",\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        String command \u003d tempArr[0];"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          case \"Todo\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            dataArr.add(new Todo(tempArr[2]));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          case \"Deadline\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            Task tempDeadline \u003d new Deadline(tempArr[2], LocalDateTime.parse(tempArr[3]));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            if (tempArr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              tempDeadline.markAsDone();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            dataArr.add(tempDeadline);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          case \"Event\":"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            Task tempEvent \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                new Event("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "                    tempArr[2], LocalDateTime.parse(tempArr[3]), LocalDateTime.parse(tempArr[4]));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            if (tempArr[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "              tempEvent.markAsDone();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            dataArr.add(tempEvent);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "          default:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "            System.err.println(\"No event of this type\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    } catch (IOException fileNotFoundException) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "      System.err.println(\"Failed to find file: \" + fileNotFoundException.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 267,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  LocalDateTime at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  LocalDateTime end;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public Event(String description, LocalDateTime at, LocalDateTime end) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    this.end \u003d end;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"E, dd/MMM/yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return String.format("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "        \"[E]%s (at: %s till %s)\", super.toString(), at.format(dtf), end.format(dtf));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 21
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick of X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  protected void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 21
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "    return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "galvinleow"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "galvinleow": 2,
      "-": 20
    }
  }
]
