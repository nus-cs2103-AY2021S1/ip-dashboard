[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "angrybunny123": 2
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents a Deadline with a specified description, date, and boolean to indicate done or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /** Formatted date to be printed to the user only */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String formattedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Deadline (String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.formattedDate \u003d LocalDate.parse(by).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the Deadline description \u0026 formatted date to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Deadline description and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 33
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * The main class for Project Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Constructor for Project Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param filePath The file path where the user\u0027s task list would be stored."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Initializes the Duke User Interface with the user\u0027s previously saved tasks (if any)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ui.initializeDukeUI(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * The main method for Project Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "angrybunny123": 35
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents the custom exception class for Duke Project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the error message to the user in a readable fashion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Error Message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"********ERROR********\\n\" + \"OOPS!!! \" + this.message + \"\\n********ERROR********\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 22
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents an Event with a specified description, date, and boolean to indicate done or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /** Formatted date to be printed to the user only */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String formattedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Event(String description, String start) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.formattedDate \u003d LocalDate.parse(start).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the Event description \u0026 formatted date to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Event description and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + start + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 33
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Processes each line of user input in accordance to the user\u0027s TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Triggers the appropriate response to the user via the Ui class methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param input Line of user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a ui.goodbye() if the user inputs \"bye\", which ends the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String parse(String input, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String[] splitArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return ui.goodbye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui.list(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (splitArr.length \u003d\u003d 2 \u0026\u0026 splitArr[0].equals(\"done\") \u0026\u0026 Integer.parseInt(splitArr[1]) \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int index \u003d Integer.parseInt(splitArr[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (index \u003e tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                throw new DukeException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasks.get(index - 1).setDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Task t \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui.done(t);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (splitArr.length \u003d\u003d 2 \u0026\u0026 splitArr[0].equals(\"delete\") \u0026\u0026 Integer.parseInt(splitArr[1]) \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int index \u003d Integer.parseInt(splitArr[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (index \u003e tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                throw new DukeException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Task deletedTask \u003d tasks.remove(index - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui.delete(deletedTask, tasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (splitArr.length \u003d\u003d 2 \u0026\u0026 splitArr[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String keyWord \u003d splitArr[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ArrayList\u003cTask\u003e foundTasks \u003d tasks.find(keyWord);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui.find(foundTasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            switch (splitArr[0]) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (splitArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                Task newTask \u003d new ToDo(input.substring(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ui.add(newTask, tasks.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (splitArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                int index \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"Please include the date of the deadline!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String desc \u003d input.substring(9, index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String date \u003d input.substring(index + 4);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newDeadline \u003d new Deadline(desc, date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    tasks.add(newDeadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    ui.add(newDeadline, tasks.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"Please enter a valid YYYY-MM-DD date format!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (splitArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                int ind \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (ind \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"Please include the date of the event!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String des \u003d input.substring(6, ind - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String dat \u003d input.substring(ind + 4);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newEvent \u003d new Event(des, dat);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    tasks.add(newEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    ui.add(newEvent, tasks.size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"Please enter a valid YYYY-MM-DD date format!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 98
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Checks if the Duke Project text file exists. If it does, reads each line of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * file and processes it into a TaskList. If not, creates the text file in the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * specified directory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a TaskList based on the user\u0027s duke project text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If the file was not created correctly/ does not exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        File f \u003d new File(this.filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            final File parentDir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            parentDir.mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            final String hash \u003d \"tasks\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            final String fileName \u003d hash + \".txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            final File file \u003d new File(parentDir, fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Created path data/tasks.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Could not create file.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Scanner s;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"File not found.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String task \u003d s.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            switch (task.charAt(1)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (\u0027T\u0027):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (task.charAt(4) \u003d\u003d \u0027✓\u0027) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newTask \u003d new ToDo(task.substring(7));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    newTask.setDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    loadedTasks.add(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                } else if (task.charAt(4) \u003d\u003d \u0027✘\u0027) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newTask \u003d new ToDo(task.substring(7));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    loadedTasks.add(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (\u0027D\u0027):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (task.charAt(4) \u003d\u003d \u0027✓\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    int indexOfDeadline \u003d task.indexOf(\"by:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String date \u003d task.substring(indexOfDeadline + 4, task.length() - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String description \u003d task.substring(7, indexOfDeadline - 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newTask \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    newTask.setDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    loadedTasks.add(newTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                } else if (task.charAt(4) \u003d\u003d \u0027✘\u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        int indexOfDeadline \u003d task.indexOf(\"by:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        String date \u003d task.substring(indexOfDeadline + 4, task.length() - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        String description \u003d task.substring(7, indexOfDeadline - 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        Task newTask \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        loadedTasks.add(newTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (\u0027E\u0027):"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (task.charAt(4) \u003d\u003d \u0027✓\u0027) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    int indexOfEvent \u003d task.indexOf(\"at:\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String date \u003d task.substring(indexOfEvent + 4, task.length() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String description \u003d task.substring(7, indexOfEvent - 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newTask \u003d new Event(description, date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    newTask.setDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    loadedTasks.add(newTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                } else if (task.charAt(4) \u003d\u003d \u0027✘\u0027) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    int indexOfEvent \u003d task.indexOf(\"at:\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String date \u003d task.substring(indexOfEvent + 4, task.length() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String description \u003d task.substring(7, indexOfEvent - 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    Task newTask \u003d new Event(description, date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    loadedTasks.add(newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new TaskList(loadedTasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Writes the input text onto the specified file path."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param textToAdd Text to be written onto the specified file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws IOException  If the specified file does not exist."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Writes the user\u0027s current TaskList into the project duke text file in a readable manner."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current TaskList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static void store(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            StringBuilder textToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                textToAdd.append(task.toString()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            writeToFile(textToAdd.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Something Went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 127
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents a Task with a specified description, and boolean to indicate if completed or not."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns a tick if task is completed, a cross if otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Tick if completed, cross if not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 39
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents the user\u0027s list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Contains basic operations to manipulate tasks in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Creates a copy of the user\u0027s TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Clone of user\u0027s TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e clone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksClone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasksClone.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasksClone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Searches the task list for tasks that contain the input string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param word String to match"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Array List containing tasks taht contain the input string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String word) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (task.toString().contains(word)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 64
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents a To Do with a specified description, and boolean to indicate if completed or not."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 19
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents the Duke User Interface which deals with interactions with the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Ui() { }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Processes DukeException errors and displays them to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param e The DukeException thrown"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void showLoadingError(DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String goodbye() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"Bye\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Displays the user\u0027s current task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The current TaskList of the User."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void list(TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println((i + 1) + \". \" + tasks.getTasks().get(i).recordString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been marked done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was marked done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void done(Task t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(t.recordString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user how many tasks are left in the current TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param size The number of tasks in the TaskList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void delete(Task t, int size) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(t.recordString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Now, you have \" +  size + \" tasks in the list\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been added."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user how many tasks are in the updated TaskList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param size The number of tasks in the TaskList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void add(Task t, int size) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(t.recordString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Now, you have \" + size + \" tasks in the list\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Displays the tasks in the user\u0027s TaskList that match the input string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The list of Tasks that contains the input string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void find(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Could not find any tasks.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println((i + 1) + \". \" + tasks.get(i).recordString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Initializes the Duke UI to receive user inputs."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The specified task that was marked done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void initializeDukeUI(TaskList tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        greeting();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Scanner userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            while (userInput.hasNext()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String input \u003d userInput.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String s \u003d Parser.parse(input, tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (s.equals(\"Bye\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            showLoadingError(e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 114
    }
  },
  {
    "path": "test/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void recordString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline readBook \u003d new Deadline(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline notReadBook \u003d new Deadline(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✓] read book (by: Jan 01 2020)\", readBook.recordString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✘] not read book (by: Jan 01 2020)\", notReadBook.recordString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline readBook \u003d new Deadline(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline notReadBook \u003d new Deadline(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✓] read book (by: 2020-01-01)\", readBook.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✘] not read book (by: 2020-01-01)\", notReadBook.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 26
    }
  },
  {
    "path": "test/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void recordString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event readBook \u003d new Event(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event notReadBook \u003d new Event(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✓] read book (at: Jan 01 2020)\", readBook.recordString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✘] not read book (at: Jan 01 2020)\", notReadBook.recordString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event readBook \u003d new Event(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event notReadBook \u003d new Event(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✓] read book (at: 2020-01-01)\", readBook.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✘] not read book (at: 2020-01-01)\", notReadBook.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 26
    }
  },
  {
    "path": "test/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task readBook \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task notReadBook \u003d new Task(\"not read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[✓] read book\", readBook.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[✘] not read book\", notReadBook.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 17
    }
  },
  {
    "path": "test/duke/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void recordString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo readBook \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo notReadBook \u003d new ToDo(\"not read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✓] read book\", readBook.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✘] not read book\", notReadBook.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo readBook \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo notReadBook \u003d new ToDo(\"not read book\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✓] read book\", readBook.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✘] not read book\", notReadBook.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deadline cut my nails /by tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deadline shave my beard /by tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "event project meeting /at 2pm later"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "angrybunny123": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "angrybunny123": 2
    }
  }
]
