[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Constructor of the Deadline object which extends Task{@link Task}. It stores the description of the task as well"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * as the deadline of the task, formatted in FORMATSTYLE.FULL."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description the description of the Deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param by the date the deadline should be done by. It should follow the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.date \u003d localDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.by \u003d localDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply checks if the \"by\" String observes the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param date The String which represents by when the deadline is due."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return True if the date String follows the format \"yyyy-MM-dd\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException thrown if the \"by\" String does not follow the specified format, or if the date is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * e.g. the 50th of June."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static boolean checkDateFormat(String date) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        int stringLength \u003d date.length();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        boolean invalidDateString \u003d stringLength !\u003d 10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (invalidDateString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new DukeException(\"That is not a valid date!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try { //Further checks if the date String is a valid date format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                LocalDate localDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Please check your date! It is clearly not realistic \u003e:(\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 55
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * The duke.Duke class that runs the duke.Duke task manager program"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/stark.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for a Duke object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor method for creating a Duke object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        storage \u003d new Storage(\"src/main/data/\", \"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        parser \u003d new Parser(storage.getData());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * A simple method that allows the delayed execution of a runnable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param runnable The runnable you would like to delay"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param delay Duration you want to delay the runnable for"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void setTimeout(Runnable runnable, int delay) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                Thread.sleep(delay);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getUserDialog(userInput.getText(), user),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getDukeDialog(getResponse(userInput.getText()), duke)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String outputMessage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            outputMessage \u003d parser.parse(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (!parser.shouldContinueDuke()) { //Checks if a bye input has been parsed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                ArrayList\u003cString\u003e finalLines \u003d parser.finalizedLines();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                storage.saveData(finalLines);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                setTimeout(() -\u003e Platform.exit(), 1500);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            outputMessage \u003d Ui.handleDukeException(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException ignored) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            /* Exceptions are ignored as they will never be thrown */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            outputMessage \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return outputMessage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage.processData();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (java.io.IOException ignored) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            /* Exceptions are ignored */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.introduction(), duke));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        System.out.println(\"reached here\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setTitle(\"duke.Duke\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 150,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for a DukeException, an exception exclusive to the duke.Duke package."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param errorMessage The desired error message to be displayed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public DukeException (String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert errorMessage.length() \u003e 0 : \"Empty Duke Error Message\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 13
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor of the Event object which is extended from Task{@link Task}. It takes in a task description as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * well as an \"at\" String which represents where the event would be at."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description The description of the Event object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param at where the event would be at"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 22
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static void main (String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/stark.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jarvis.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        // Adds the intro message into the Duke GUI upon start up"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.introduction(), dukeImage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 53
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private TaskList lines;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private boolean carryOn \u003d true;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor of the Parser object. It takes in an ArrayList{@link ArrayList} which represents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * the current set of tasks. The arrayList is then converted into a TaskList object for easier manipulation of the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * items."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Parser(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d new TaskList(lines);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if duke.Duke should carry on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return True if duke.Duke is not terminated with a Bye command, false otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public boolean shouldContinueDuke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return carryOn;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply returns the current set of lines. This should be called when duke.Duke is terminated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The finalized set of lines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e finalizedLines() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines.getList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Parses the input given by the users. The method checks if the user\u0027s input is a done, list, delete, bye or add"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * command and executes the appropriate response. If the input is invalid, a DukeException is thrown."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param inputString The user input to be parsed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The string representing the appropriate response."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws DukeException The exception explaining why the input was invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String parse(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        //Checks if the input string is a done command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (inputString.indexOf(\"done \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                // item number refers to the item index in the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int itemNumber \u003d Integer.parseInt(inputString.substring(inputString.indexOf(\" \") + 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean invalidIndex \u003d lines.getNumberOfItems() \u003c itemNumber || itemNumber \u003c\u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (inputString.length() \u003c\u003d 5) { //This condition is to check if the done command is empty"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"You did not specify which task you are done with!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else if (invalidIndex) { //This condition is to check if the index is within lines."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"Hey, no such task exists!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    String doneTask \u003d lines.getTask(itemNumber - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    String message \u003d Ui.done(doneTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    lines.updateTask(Ui.updateDoneTask(doneTask), itemNumber - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    return message;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Invalid input for done command!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.equals(\"list\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return Ui.listTasks(lines.getList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.equals(\"bye\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            carryOn \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            return Ui.bye();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"delete \") \u003d\u003d 0) { //If the input string is a delete command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                // item number refers to the item index in the user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int itemNumber \u003d Integer.parseInt(inputString.substring(inputString.indexOf(\" \") + 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean invalidIndex \u003d lines.getNumberOfItems() \u003c itemNumber || itemNumber \u003c\u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (inputString.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"You did not specify which task you are deleting!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else if (invalidIndex) { //This condition is to check if the index is within lines"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"Hey, no such task exists!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else { //remove task and return a string representing the delete message"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    String task \u003d lines.getTask(itemNumber - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    lines.removeTask(itemNumber - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    return Ui.deletedTask(task, lines.getNumberOfItems());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } catch (NumberFormatException e) { //thrown by parseInt"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Invalid input for delete command!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"find \") \u003d\u003d 0) { //If the user input is a find command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (inputString.length() \u003d\u003d 5) { //Checks if the input string does not contain a keyword"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"What are you trying to find?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                String keyword \u003d inputString.substring(5);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                ArrayList\u003cString\u003e matchingTasks \u003d lines.find(keyword);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return Ui.listMatchingTasks(matchingTasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else if (inputString.indexOf(\"tag \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            boolean missingTagDetails \u003d inputString.length() \u003c\u003d 6"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    || inputString.length() \u003d\u003d 7 \u0026\u0026 inputString.lastIndexOf(\" \") \u003d\u003d 6;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (missingTagDetails) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"Hey, your tag command is missing details! Check it again!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                String taskIndex \u003d inputString.substring(4, 6);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean singleDigit \u003d taskIndex.contains(\" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (singleDigit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        int index \u003d Integer.parseInt(taskIndex.substring(0, 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        String description \u003d inputString.substring(6);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        lines.tagItem(index - 1, description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        return Ui.taggedTask(lines.getTask(index - 1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        throw new DukeException(\"That is not a valid index input!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        int index \u003d Integer.parseInt(taskIndex.substring(0, 2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        String description \u003d inputString.substring(7);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        lines.tagItem(index - 1, description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        return Ui.taggedTask(lines.getTask(index - 1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        throw new DukeException(\"That is not a valid index input!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (inputString.indexOf(\"todo \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean emptyDescription \u003d inputString.length() \u003d\u003d 5;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (emptyDescription) { //Checks if there is an input for the task command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"Hey! Your Todo is empty \u003e:(\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else if (inputString.indexOf(\" \") !\u003d 4) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"What are you even saying?!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    task \u003d new Todo(inputString.substring(5));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else if (inputString.indexOf(\"deadline \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean containsBy \u003d inputString.contains(\" /by \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean missingDate \u003d inputString.substring(inputString.indexOf(\" /by \")).length() \u003d\u003d 5;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean missingTaskDescription \u003d inputString.contains(\"deadline /by \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int byIndex \u003d inputString.indexOf(\" /by \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (missingTaskDescription) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"You aren\u0027t setting anything for your deadline?!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else if (!containsBy || missingDate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"Oi, when is this deadline due??\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    if (Deadline.checkDateFormat(inputString.substring(byIndex + 5))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                        task \u003d new Deadline(inputString.substring(9, byIndex),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                                inputString.substring(byIndex + 5));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else if (inputString.indexOf(\"event \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean containsAt \u003d inputString.contains(\" /at \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean missingLocation \u003d inputString.substring(inputString.indexOf(\" /at \")).length() \u003d\u003d 5;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                boolean missingDescription \u003d inputString.contains(\"event /at \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int atIndex \u003d inputString.indexOf(\" /at \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (!containsAt || missingLocation) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"Oi, when is this event on??\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else if (missingDescription) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    throw new DukeException(\"You aren\u0027t setting anything as your event?!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    task \u003d new Event(inputString.substring(6, atIndex), inputString.substring(atIndex + 4));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new DukeException(\"What are you even saying?!\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (task !\u003d null) { //There shouldn\u0027t be a case where task would be null. This is just in case."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                String newTask \u003d task.toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                lines.addTask(newTask);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return Ui.addedTask(task, lines.getNumberOfItems());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 174
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The task list */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The directoryPath */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String directoryPath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The filePath */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /** The File object with filePath as its param */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private File data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the Storage class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param directoryPath the path to the directory containing the data.txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param filePath the path to the data.txt file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Storage(String directoryPath, String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.directoryPath \u003d directoryPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            this.processData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException ignored) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            //Exceptions are ignored as processData() checks if the path is valid, if not create the path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Obtains the file required to begin duke.Duke. If the files/folders are missing, they would be created in the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * specified directories. It then converts the txt file into an ArrayList{@link ArrayList} containing strings that"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * represent the tasks specified in the txt file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * It is important to know that the arrayList is not updated throughout the use of duke.Duke. The goal of this class is"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * to only process the initial data.txt file upon loading and saving a final updated copy of the txt file which has"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * to be provided. Updates occur in the Parser{@link Parser} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws IOException An exception is thrown as the file and directory paths specified might be invalid or cannot"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * be found. In this case, the exception can be ignored as the method creates the directories as needed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void processData() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        data \u003d new File(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!data.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            data.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert data.exists() : \"file does not exist!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Scanner fileReader \u003d new Scanner(data);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            buffer.append(fileReader.nextLine()).append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        fileReader.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String fileContents \u003d buffer.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (fileContents.length() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String[] lineArray \u003d fileContents.split(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            Collections.addAll(lines, lineArray);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply returns the ArrayList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the ArrayList stored in the class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e getData() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Saves into the txt file, located in the path specified when creating the storage object, a list of tasks which"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * is obtained from the supplied ArrayList parameter. The old txt file is overwritten as a result. Call this"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * method only after calling processData."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param finalLines the list of tasks to be saved"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws FileNotFoundException Thrown by the PrintWriter class as there is the possibility that the file path is"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * invalid. Fortunately, by calling processData first, this exception can be ignored as it is addressed in that"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * method."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void saveData(ArrayList\u003cString\u003e finalLines) throws FileNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        StringBuffer finalLineList \u003d new StringBuffer();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        for (int i \u003d 0; i \u003c finalLines.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String currentLine \u003d finalLines.get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            finalLineList.append(currentLine).append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        PrintWriter prw \u003d new PrintWriter(data);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        prw.println(finalLineList.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        prw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 102
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Constructor for a Task object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description the description of the Task item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Updates the Task object by setting it to be done or not yet done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param check sets the status of the object to be done or not done. 1 \u003d done, any other int is not done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void updateTask(int check) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (check \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return (isDone ? \"[\" + \"\\u2713\" + \"]\" + \" \" + this.description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                : \"[\" + \"\\u2718\" + \"]\" + \" \" + this.description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 35
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private int numberOfItems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the TaskList object. It takes in an ArrayList of Strings which would be manipulated using the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * methods in the object. It also stores the number of items in said ArrayList and the number gets updated with"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * certain TaskList methods. This is to reduce the number of calls to ArrayList.size()."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The ArrayList to be stored and manipulated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        this.numberOfItems \u003d lines.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Adds a task to the task list if the number of items is less than 100. Updates the number of items in the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * accordingly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The task to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void addTask(String task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (numberOfItems \u003c 100) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            lines.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            numberOfItems +\u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Removes a task from the task list based on the index provided. Updates the number of items in the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * accordingly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the index of the task to be removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        numberOfItems -\u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Changes a task in the task list based on the index provided to the task provided."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The updated task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index the index of the task to be replaced."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void updateTask(String task, int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        // Index has to be a valid index in lines"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert index \u003c\u003d (lines.size() - 1) \u0026\u0026 index \u003e\u003d 0 : \"Invalid Index\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.set(index, task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns the stored arrayList of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the lists of tasks currently stored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns the task stored in the position provided. This method is only called after verifying that the position"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * is valid, i.e not negative and not more than the number of items in the stored list. This is done in the Parser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param position the position of the task desired."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the task desired."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String getTask(int position) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return lines.get(position);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Simply returns the number of items in the stored list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the number of items in the stored list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public int getNumberOfItems() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return numberOfItems;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param tagDescription"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void tagItem(int index, String tagDescription) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String task \u003d lines.get(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String taggedTask \u003d task + \" #\" + tagDescription;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        lines.set(index, taggedTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Finds all tasks that contains the keyword"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param keyword The keyword that we want our resulting tasks to have"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return An arrayList containing the tasks that contains the keyword"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public ArrayList\u003cString\u003e find(String keyword) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        ArrayList\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String task \u003d lines.get(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (task.contains(keyword)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 114
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The constructor for the Todo object which extends Task{@link Task}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param description simply the descriptiong of the todo object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 18
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " * The Ui class handles all of the Ui interaction with the users using its various static methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    private static String divider \u003d \"************************************************\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a String to be printed as an introduction upon start up duke.Duke"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return  returns the intro String"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String introduction() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String intro \u003d \"Hello! I\u0027m duke.Duke\\nWhat can i do for you?\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return divider + intro + divider;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns a done statement while updating the task string by swapping the cross with a tick."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The doneTask argument must comply with the standard output string format of duke.Duke tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param doneTask the task that is to be marked done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return returns the updated line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String updateDoneTask(String doneTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        assert doneTask.length() \u003e\u003d 5 : \"Invalid task done\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return doneTask.substring(0, 4) + \"\\u2713\" + doneTask.substring(5);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a string representing the message shown to users when a task is done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param doneTask The task to be updated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the output message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String done(String doneTask) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String updatedLine \u003d updateDoneTask(doneTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d divider + \"Nice! I have marked this task as done:\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + updatedLine + \"\\n\" + divider;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns out the tasks in numerical order based on the ArrayList param."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * The lines argument must contain Strings that comply with the standard output string format of duke.Duke tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines List of tasks to be printed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The string representing the list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String listTasks(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String list \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        list \u003d list + divider + \"Here are the tasks in your list!\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            int numbering \u003d i + 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            String task \u003d lines.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            list \u003d list + (numbering + \".\" + task + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        list \u003d list + divider;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Same as listTasks() except that the message printed out is slightly different. If the ArrayList supplied is"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * empty, a \"no matching tasks\" message would be printed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param lines The list of tasks to print out."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return A string representing the list of tasks / message to print out."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String listMatchingTasks(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String list \u003d divider; // Listing matching tasks will always start with a divider string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (lines.size() \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            list \u003d list + \"Here are the matching tasks in your list!\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                int numbering \u003d i + 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                String task \u003d lines.get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                list \u003d list + numbering + \".\" + task + \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            list \u003d list + \"Unfortunately no tasks matches your keyword :(\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        list \u003d list + divider;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Returns a String representing the message shown when users exit duke.Duke."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return The string representing the goodbye message."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String bye() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return divider + \"Bye! See you next time!\" + \"\\n\" + divider;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns a statement confirming that a task has been tagged"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task the task string representing the tagged task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the message shown upon tagging a task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String taggedTask(String task) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d divider + \"Noted. The following task has been tagged.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + task + \"\\n\" + divider + \"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * returns a statement confirming that a task has been deleted, as well as the number of tasks left."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The task string representing the task that was deleted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param numberOfItems the remaining number of tasks."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the deleted task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String deletedTask(String task, int numberOfItems) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d divider + \"Noted, the following task has been deleted\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + task + \"\\n\" + divider + \"\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        message \u003d message + \"Now you have \" + numberOfItems + \" tasks in the list.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Prints out a statement confirming that a task has been added, as well as the number of tasks currently."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param task The task string representing the task that was added."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param numberOfItems the current number of tasks."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the message representing the added task"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String addedTask(Task task, int numberOfItems) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (numberOfItems \u003c 100) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider + \"Got it, I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + \" \" + task + \"\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + \"Now you have \" + numberOfItems + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            message \u003d message + divider + \"Sorry, the list is full!\\n\" + divider;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Handles DukeExceptions{@link DukeException} thrown by duke.Duke package methods by returning a string representing"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * the error."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @param e The DukeException to be handled."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @return the string representing the exception."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public static String handleDukeException(DukeException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        return divider + e.getMessage() + \"\\n\" + divider;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 155
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 19
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Tests if the Storage class creates the necessary files and folders should they be missing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws Exception Exception is thrown if the test case fails."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void testFileCreation() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File dir \u003d new File(\"src/main/data/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (dir.exists()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            for (File file: dir.listFiles()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                    file.delete();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (dir.listFiles().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                dir.delete();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Storage storage1 \u003d new Storage(\"src/main/data/\", \"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            storage1.processData();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (IOException ignored) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            /* Exceptions are ignored */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File newDir \u003d new File(\"src/main/data/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!newDir.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new Exception(\"Directory does not exist when it should have been created\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File newFile \u003d new File(\"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!newFile.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new Exception(\"Data file not created\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        System.out.println(\"Test Case Passed\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        newFile.delete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        newDir.delete();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if new files created have 0 text."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws Exception Exception is thrown if test case fails."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void testDataCreation() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Storage storage1 \u003d new Storage(\"src/main/data/\", \"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        storage1.processData();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (storage1.getData().size() !\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            System.out.println(\"Test case 1 failed\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        System.out.println(\"Test Case Passed\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File newFile \u003d new File(\"src/main/data/data.txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (newFile.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            newFile.delete();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        File newDir \u003d new File(\"src/main/data/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        newDir.delete();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 69
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks that the string output from creating todo tasks is correct. Also, it tests if updating the tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * produced the correct output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *@throws Exception Exceptions are thrown if the test case fails"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void testStringOutput() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Todo todo1 \u003d new Todo(\"Make Breakfast\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!todo1.toString().equals(\"[T][\" + \"\\u2718\" + \"] Make Breakfast\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new Exception(\"Default String Output is Wrong for Todo\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        Todo todo2 \u003d new Todo(\"Revise Lectures\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        todo2.updateTask(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        if (!todo2.toString().equals(\"[T][\" + \"\\u2713\" + \"] Revise Lectures\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            throw new Exception(\"Update Task Output is Wrong\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        System.out.println(\"All Tests Passed\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * Checks if date formatting for deadline objects is done correctly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     * @throws Exception Exceptions are thrown if the test cases fail."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    public void testCheckDateFormat() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            boolean isValidDate \u003d Deadline.checkDateFormat(\"2020-50-20\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            if (isValidDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "                throw new Exception(\"checkDateFormat Method Failed\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        } catch (DukeException ignored) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "            /* Exceptions are ignored */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "        System.out.println(\"All Tests Passed\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "todo revise lectures"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "deadline return clothes /by the day before tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "event project meeting /at jurong bird park"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "javac  -cp ..\\src\\  -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IronBiscuit"
        },
        "content": "java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "IronBiscuit": 2,
      "-": 36
    }
  }
]
