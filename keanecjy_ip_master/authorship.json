[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18,
      "-": 42
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Launches the Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Empty argument."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 17
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Opens the dialog box in the GUI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Text to output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param img Image of DialogBox (either Duke or User)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the user\u0027s dialog."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Input text from user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param img User\u0027s icon."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Display of user dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays Duke\u0027s response."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Output text from Duke."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param img Duke image."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Display of Duke\u0027s response."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 81
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Main class to run Duke program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the duke backend."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.tasks \u003d new TaskList(storage.getTasks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Method to run a method after a 1 second delay."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param runnable Method to run."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void setTimeout(Runnable runnable) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                Thread.sleep(1000);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                runnable.run();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains input from user and outputs accordingly."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Duke response message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (command.isExit()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                setTimeout(() -\u003e Platform.exit());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 59,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Starts the GUI application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param stage Stage parameter."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 36
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/thinkingface.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/happyface.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the main GUI screen."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param duke Duke application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        greetUser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Greets the user when the GUI opens."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void greetUser() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            DialogBox.getDukeDialog(Ui.greetings(), dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 72
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the addition of tasks into the Task List."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds the new task into the Task List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param newTask New task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected String addTask(Task newTask, TaskList tasks, Ui ui, Storage storage) throws FileUpdateFailException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.addTask(newTask, tasks.size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/main/java/duke/command/AddComplexTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds a complex task into the task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddComplexTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String DATE_TIME_FORMAT \u003d \"MMM d yyyy / h.mm a\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"MMM d yyyy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"h.mm a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initialises the AddComplexTaskCommand object with the task details and task type."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Task description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddComplexTaskCommand(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a complex task into the TaskList Object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If input format is wrong."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d Parser.parseComplexTaskDescription(description, taskType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String taskDetails \u003d inputArr[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String date \u003d inputArr[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask complexTask;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (isDateAndTimeFormat(date)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            complexTask \u003d new ComplexTask(taskDetails, taskType, dateAndTimeToString(date));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isDateFormat(date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            complexTask \u003d new ComplexTask(taskDetails, taskType, dateToString(date));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isTimeFormat(date)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            complexTask \u003d new ComplexTask(taskDetails, taskType, timeToString(date));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            complexTask \u003d new ComplexTask(taskDetails, taskType, date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return addTask(complexTask, tasks, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given is in a LocalDateTime format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input is in a LocalDateTime format, false otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDateAndTimeFormat(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime.parse(matchDateTimeFormat(input));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Formats the date and time to a fixed MMM d yyyy / h.mm a format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateAndTime Input date and time from user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted date and time."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String dateAndTimeToString(String dateAndTime) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .parse(matchDateTimeFormat(dateAndTime))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tries to match the input to the date and time format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input String."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String matchDateTimeFormat(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return input.replace(\" \", \"T\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given is in a LocalDate format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input is in a LocalDate format, false otherwise."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDateFormat(String input) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDate.parse(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Formats the date to a fixed MMM d YYYY format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param date Input date from user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted date."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String dateToString(String date) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDate.parse(date).format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given is in a LocalTime format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input is in a LocalTime format, false otherwise."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isTimeFormat(String input) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalTime.parse(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Formats the time to a fixed h.mm a format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time Input time from user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String timeToString(String time) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalTime.parse(time).format(DateTimeFormatter.ofPattern(TIME_FORMAT));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 151
    }
  },
  {
    "path": "src/main/java/duke/command/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds a todo task into the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String taskDetails;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the AddToDoCommand with the taskDetails;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskDetails Task details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddToDoCommand(String taskDetails) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskDetails \u003d taskDetails;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a todo task into the TaskList object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyTaskException If the task detail is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskDetails.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTaskException(TaskType.TODO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return addTask(new ToDo(taskDetails), tasks, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 43
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles all possible actions of the program, as given by the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes a specific command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If an error is found in the execution of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides a boolean to which whether the program can stop."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return False as the default value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Terminates the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.goodbye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true to terminate the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyFindException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Executes the finding of matching word in the task descriptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the FindCommand class to look for the matching word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Finds all matching tasks based on the given user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyFindException If no task matches the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws EmptyFindException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyFindException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d tasks.matchAll(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.emptyFind(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.showTaskList(taskList, \"matching \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 43
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String HEADER \u003d \"Here are the available commands that I know:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String[] listOfCommands \u003d new String[]{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"todo _ (e.g. todo 3)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"deadline \u0027task name\u0027 /by \u0027end time\u0027 (e.g. deadline Exercise /by Sunday)\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"event \u0027task name\u0027 /at \u0027start time - end time\u0027 (e.g. meeting /at Sunday 2pm - 4pm)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"list\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"done _ (e.g. done 4)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"delete _ (e.g. delete 4)\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"find \u0027   \u0027 (e.g. find book)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"bye\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the list of commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.printNumberedArray(listOfCommands, HEADER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/main/java/duke/command/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Shows all tasks in the TaskList object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Shows all tasks in the TaskList object iff task list is not empty."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.emptyTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.showTaskList(tasks, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/main/java/duke/command/SimpleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeleteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDoneException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.TaskAlreadyDoneException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the logic of deleting and completing a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class SimpleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_SIMPLE_COMMAND_MESSAGE \u003d \"Command type is neither delete or done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final SimpleCommandType type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the SimpleCommand class with the input string and SimpleCommandType."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param type SimpleCommandType."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public SimpleCommand(String input, SimpleCommandType type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes or complete a task, depending on the task type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If an error is found in the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!isNumber(input)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (type \u003d\u003d SimpleCommandType.DONE) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidDoneException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else if (type \u003d\u003d SimpleCommandType.DELETE) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidDeleteException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                assert false : INVALID_SIMPLE_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int digit \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!tasks.checkIfValid(digit)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidTaskNumberException(tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task current \u003d tasks.get(digit - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (type \u003d\u003d SimpleCommandType.DONE) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (current.isDone()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new TaskAlreadyDoneException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            current.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.markTaskAsDone(current);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (type \u003d\u003d SimpleCommandType.DELETE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            tasks.delete(digit - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.deleteTask(current, tasks.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert false : INVALID_SIMPLE_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the string is a number, returning true if so, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param str String to check."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return true if string is a number, false otherwise."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean isNumber(String str) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 88
    }
  },
  {
    "path": "src/main/java/duke/command/SimpleCommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the 2 simple commands, delete and done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum SimpleCommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DONE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parent exception class for this program, which is thrown when there is an error in the user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the DukeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param message Message to be displayed when exception is thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"OOPS!!! %s\", message));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when there is not succeeding word after find."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyFindException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyFindException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"The description of a find cannot be empty!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task detail of a Task object is empty."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyTaskException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Task type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyTaskException(TaskType taskType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"The description of a %s cannot be empty.\", taskType.toString().toLowerCase()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the Complex Task does not have its time specified."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyTimeException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param complexTask Complex Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyTimeException(TaskType complexTask) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Deadline / time of %s is not specified\", complexTask.toString().toLowerCase()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/FileUpdateFailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the csv file fails to update properly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FileUpdateFailException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the FileUpdateFailException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FileUpdateFailException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Failed to update tasks in csv file.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the input to create a Deadline task is not formatted correctly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_1 \u003d \"Deadline task is poorly formatted.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_2 \u003d \"Here is a proper format: deadline \u0027task name\u0027 /by \u0027end time\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_3 \u003d \"e.g. deadline Exercise /by 2020-12-01 12:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDeadlineException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDeadlineException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(LINE_1, LINE_2, LINE_3));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a wrong delete format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDeleteException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_1 \u003d \"Delete format is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_2 \u003d \"Please try again with a proper format like \u0027delete 3\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDeleteException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDeleteException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(LINE_1, LINE_2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a wrong done format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDoneException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_1 \u003d \"Done format is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_2 \u003d \"Please try again with a proper format like \u0027done 3\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDoneException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDoneException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(LINE_1, LINE_2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the input to create an Event task is not formatted correctly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_1 \u003d \"Event task is poorly formatted.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_2 \u003d \"Here is a proper format: event \u0027event name\u0027 /at \u0027start time to end time\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String LINE_3 \u003d \"e.g. meeting /at Sunday 2 - 4pm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidEventException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidEventException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(LINE_1, LINE_2, LINE_3));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the file format of the CSV is not properly formatted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidFileFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidFileFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidFileFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"CSV file is poorly formatted!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task number provided by the user is not valid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidTaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidTaskNumberException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size provided by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidTaskNumberException(int size) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(\"Task number does not exist in the list.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String.format(\"Your current list only has %d tasks!\", size)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskAlreadyDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task is already done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskAlreadyDoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the TaskAlreadyDoneException object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskAlreadyDoneException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Task has already been mark as done!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a command which is not part of the known commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String MSG_1 \u003d \"I\u0027m sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String MSG_2 \u003d \"Type \u0027help\u0027 to display the list of commands available.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the UnknownCommandException object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(MSG_1, MSG_2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddComplexTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses the user input and creating a command from it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String INVALID_ARR_ERROR \u003d \"Array is not empty\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the user input and returns the corresponding command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text User text input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Corresponding command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If user input does not belong to the list of known commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Command parse(String text) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d deconstructInput(text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String keyWord \u003d getKeyWord(inputArr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String details \u003d getRestOfWord(inputArr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (keyWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new SimpleCommand(details, SimpleCommandType.DONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new SimpleCommand(details, SimpleCommandType.DELETE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddToDoCommand(details);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddComplexTaskCommand(details, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddComplexTaskCommand(details, TaskType.EVENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new FindCommand(details);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"help\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deconstructs the string into a string array."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String array of the input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] deconstructInput(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String formattedString \u003d input.trim().replaceAll(\"\\\\s{2,}\", \" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return formattedString.split(\" \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the keyword of the user input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param arr User input in a String array."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Keyword."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getKeyWord(String[] arr) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (arr.length \u003e 0) : INVALID_ARR_ERROR;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr[0].toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the rest of the user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param arr User input in a String array."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Rest of the user input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getRestOfWord(String[] arr) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (arr.length \u003e 0) : INVALID_ARR_ERROR;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr.length \u003d\u003d 1 ? \"\" : arr[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the unique identifier tied to the ComplexTask."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String identifier of the Task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getIdentifier(TaskType taskType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (taskType \u003d\u003d TaskType.DEADLINE || taskType \u003d\u003d TaskType.EVENT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskType \u003d\u003d TaskType.DEADLINE ? \" /by\" : \" /at\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the description for ComplexTask."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of Complex task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Task type of Complex task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String Array consisting of task details and time."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If the format inputted is not correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String[] parseComplexTaskDescription(String description, TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d description.split(getIdentifier(taskType), 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (taskType \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidEventException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String taskDetails \u003d inputArr[0];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String time \u003d inputArr[1];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskDetails.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTaskException(taskType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (time.isBlank()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTimeException(taskType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        inputArr[1] \u003d inputArr[1].trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return inputArr;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 138
    }
  },
  {
    "path": "src/main/java/duke/storage/CsvConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Converts the task in CSV format to a Task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CsvConverter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a task from the CSV format of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input CSV format of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task corresponding to the csv string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected static Task parseToTask(String input) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] resultArr \u003d parseString(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String taskType \u003d resultArr[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description \u003d resultArr[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String time \u003d resultArr[2];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean isDone \u003d stringToBoolean(resultArr[3]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskType.equals(\"TODO\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ToDo(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (taskType.equals(\"EVENT\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ComplexTask(description, isDone, TaskType.EVENT, time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (taskType.equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ComplexTask(description, isDone, TaskType.DEADLINE, time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the input csv string to an array."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Array format of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidFileFormatException If there are errors in the csv format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] parseString(String input) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] resultArr \u003d input.split(\"\\\\s{2},\", 4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (resultArr.length \u003c 4) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        resultArr[0] \u003d resultArr[0].toUpperCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        resultArr[3] \u003d resultArr[3].toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String doneStatus \u003d resultArr[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean validStatus \u003d doneStatus.equals(\"done\") || doneStatus.equals(\"not done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!validStatus) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return resultArr;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the done status to a boolean."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Done status."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if done, false if not done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean stringToBoolean(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return input.equals(\"done\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 72
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the interactions with the user\u0027s CSV file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Includes creating, updating file and retrieving list of tasks from CSV file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String dataDirectory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the storage object and create a new file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dataDirectory \u003d System.getProperty(\"user.dir\") + \"/data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        filePath \u003d dataDirectory + \"/tasklist.csv\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates the tasklist.csv file in the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creation works by creating the folder first (if not found), then afterwards creating the file (if it does not"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * already exist)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            File newDirectory \u003d new File(dataDirectory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            newDirectory.mkdir();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            newFile.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the list of tasks from the tasklist CSV file, if any."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String header \u003d br.readLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (header !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                String line \u003d br.readLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    Task newTask \u003d CsvConverter.parseToTask(line);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    line \u003d br.readLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException | InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.fileReadingError();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Updates the task list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void update(TaskList tasks) throws FileUpdateFailException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String header \u003d \"Task type  ,Description  ,Time  ,Status\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder(header);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                stringBuilder.append(convertToCsvFormat(task));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fileWriter.write(stringBuilder.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new FileUpdateFailException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the task to a csv format to be stored in a .csv file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the task in .csv format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String convertToCsvFormat(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.format(\"%s  ,%s  ,%s  ,%s\\n\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            task.getTaskName(), task.getDescription(), task.getTime(), task.getStatus());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 109
    }
  },
  {
    "path": "src/main/java/duke/task/ComplexTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Stores properties of the more complex tasks - EVENT and DEADLINE."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ComplexTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the complex task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of task, either EVENT or DEADLINE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time Time of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ComplexTask(String description, TaskType taskType, String time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, false, taskType, time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the complex task with isDone boolean value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Boolean to represent if task is done or not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of task, either EVENT or DEADLINE."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time Time of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ComplexTask(String description, boolean isDone, TaskType taskType, String time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, isDone, taskType, time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides the string representation of the complex task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the complex task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskType \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert false : \"Invalid complex task!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Stores all methods and properties of a Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Variables include description, task type, time and done status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initialises the Task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Task details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Status of task - true if done, false otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time Time of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected Task(String description, boolean isDone, TaskType taskType, String time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the Done and Not done icons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of icons."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status of the Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True iff task is done, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the String representation of the status of Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of Task status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDone ? \"Done\" : \"Not done\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the Task name in capitalized form."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task name in CAPS."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskType.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the Task description."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the time of the Task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Time of Task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true iff the task description contains the query word, false otherwise."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param query Query word."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return true iff task description contains the query."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean match(String query) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description.contains(query);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the String representation of the Task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the Task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 109
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains the three types of task, namely DEADLINE, EVENT and TODO."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 10
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ToDo task, which is one of the three Task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the ToDo task with isDone boolean value."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Boolean value to represent if task is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, isDone, TaskType.TODO, \"-\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the ToDo task with isDone boolean value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, false, TaskType.TODO, \"-\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides a string representation of the ToDo task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the ToDo task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 35
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Keeps and handles all operations regarding the user tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the task at the index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param index Position of task in list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes the tasks at the index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param index Position of task in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a new task to the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param task Task being added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the list object of the tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return List object containing all tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Size of task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if digit lies within (0, number of tasks)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param digit Input digit."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if digit lies within the range, false otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean checkIfValid(int digit) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return digit \u003c\u003d tasks.size() \u0026\u0026 digit \u003e 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the task list is empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True iff task list is empty, false otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Finds all tasks with descriptions that are matching the String input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input word for querying."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return new TaskList with tasks matching the input word"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList matchAll(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (task.match(input)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                newTaskList.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new TaskList(newTaskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 102
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the program interactions with user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Concatenates the strings, separating each string with a line separator."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Strings to concatenate."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Concatenated strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String stringFormatter(String... args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 0; i \u003c args.length - 1; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            sb.append(args[i]).append(\"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        sb.append(args[args.length - 1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (sb.length() \u003e 0) : \"String builder is empty!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints out the list of commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param array Input array."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param header Header title."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Numbered list of commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String printNumberedArray(Object[] array, String header) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int numOfCommands \u003d array.length;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder str1 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(header).append(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 1; i \u003c numOfCommands; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s \u003d String.format(\"%d. %s\\n\", i, array[i - 1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            str1.append(s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(String.format(\"%d. %s\", numOfCommands, array[numOfCommands - 1]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return str1.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Greets the user upon starting the program."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String greetings() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(\"Hello, I\u0027m Duke!\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the goodbye message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String goodbye() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints task done message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param current Input task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String markTaskAsDone(Task current) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(\"Nice! I\u0027ve marked this task as done:\", String.format(\"    %s\", current));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the deletion success message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param current Current task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size of task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String deleteTask(Task current, int size) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(\"Noted. I\u0027ve removed this task:\", String.format(\"    %s\", current),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String.format(\"Now you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the add task message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param newTask New task added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size of task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String addTask(Task newTask, int size) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(\"Got it. I\u0027ve added this task:\", String.format(\"    %s\", newTask),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String.format(\"Now you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the empty task list message."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String emptyTaskList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return \"You currently have no tasks in the list.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the task list to the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param extra Extra word to add in, if any."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String showTaskList(TaskList tasks, String extra) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String header \u003d String.format(\"Here are the %stasks in your list:\", extra);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return printNumberedArray(tasks.getTasks().toArray(), header);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the no matching tasks found message."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param queryWord Word use to query task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String emptyFind(String queryWord) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.format(\"There are no matching tasks with the keyword %s.\", queryWord);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the file read error when reading from the CSV file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void fileReadingError() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(\"Error in reading from csv file\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 124
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"620.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#2c2929\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI\" size\u003d\"13.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"1.0\" right\u003d\"3.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"620.0\" minWidth\u003d\"580.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cGridPane AnchorPane.bottomAnchor\u003d\"0\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" minHeight\u003d\"42.0\" minWidth\u003d\"485.0\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                       AnchorPane.bottomAnchor\u003d\"1.0\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    prefWidth\u003d\"95.0\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textFill\u003d\"#262424\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    \u003cFont name\u003d\"Forte\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    pannable\u003d\"true\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    prefWidth\u003d\"580.0\" vvalue\u003d\"1.0\" GridPane.columnIndex\u003d\"0\" GridPane.columnSpan\u003d\"2\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"525.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 42
    }
  },
  {
    "path": "src/test/java/duke/command/AddComplexTaskCommandTests.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddComplexTaskCommandTests extends CommandTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for adding of simple tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testAddingStandard() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask complexTask1 \u003d new ComplexTask(\"test\", TaskType.EVENT, \"2-4pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask complexTask2 \u003d new ComplexTask(\"test2\", TaskType.DEADLINE, \"2pm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd1 \u003d new AddComplexTaskCommand(\"test /at 2-4pm\", TaskType.EVENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd2 \u003d new AddComplexTaskCommand(\"test2 /by 2pm\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(complexTask1, 1), cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(1, storage.getTasks().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(complexTask2, 2), cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(2, storage.getTasks().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for invalid complex task formats."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidFormat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd1 \u003d new AddComplexTaskCommand(\"read /by 2-4pm\", TaskType.EVENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd2 \u003d new AddComplexTaskCommand(\"read /at 2-4pm\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd3 \u003d new AddComplexTaskCommand(\"read/at 2-4pm\", TaskType.EVENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd4 \u003d new AddComplexTaskCommand(\"read/at2-4pm\", TaskType.EVENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd3.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd4.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for blank descriptions."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testBlankDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd1 \u003d new AddComplexTaskCommand(\"\", TaskType.EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd2 \u003d new AddComplexTaskCommand(\"/at 2-4pm\", TaskType.EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd3 \u003d new AddComplexTaskCommand(\"/by 2-4pm\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd3.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for empty time in description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd1 \u003d new AddComplexTaskCommand(\"meeting /at\", TaskType.EVENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd2 \u003d new AddComplexTaskCommand(\"meeting /at   \", TaskType.EVENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd3 \u003d new AddComplexTaskCommand(\"meeting /by\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddComplexTaskCommand cmd4 \u003d new AddComplexTaskCommand(\"meeting /by \", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String eventMsg \u003d \"OOPS!!! Deadline / time of event is not specified\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String deadlineMsg \u003d \"OOPS!!! Deadline / time of deadline is not specified\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTimeException e \u003d assertThrows(EmptyTimeException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(eventMsg, e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTimeException e1 \u003d assertThrows(EmptyTimeException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(eventMsg, e1.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTimeException e2 \u003d assertThrows(EmptyTimeException.class, () -\u003e cmd3.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(deadlineMsg, e2.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTimeException e3 \u003d assertThrows(EmptyTimeException.class, () -\u003e cmd4.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(deadlineMsg, e3.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for various time formats."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testTimeFormats() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask ct1 \u003d new ComplexTask(\"Test\", TaskType.EVENT, \"Aug 23 2020\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask ct2 \u003d new ComplexTask(\"test2\", TaskType.DEADLINE, \"Aug 23 2020 / 10.15 AM\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask ct3 \u003d new ComplexTask(\"test2\", TaskType.DEADLINE, \"10.15 PM\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd1 \u003d new AddComplexTaskCommand(\"Test /at   2020-08-23   \", TaskType.EVENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd2 \u003d new AddComplexTaskCommand(\"test2 /by 2020-08-23 10:15\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd3 \u003d new AddComplexTaskCommand(\"test2 /by 2020-08-23T10:15\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd4 \u003d new AddComplexTaskCommand(\"test2 /by 2020-08-23 10:15:33\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddComplexTaskCommand cmd5 \u003d new AddComplexTaskCommand(\"test2 /by 22:15\", TaskType.DEADLINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct1, 1), cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(1, storage.getTasks().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct2, 2), cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct2, 3), cmd3.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct2, 4), cmd4.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct3, 5), cmd5.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 119
    }
  },
  {
    "path": "src/test/java/duke/command/AddToDoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddToDoCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests adding of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testAddingOfTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String taskDetails1 \u003d \"test\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String taskDetails2 \u003d \"test2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo1 \u003d new ToDo(taskDetails1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo2 \u003d new ToDo(taskDetails2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddToDoCommand cmd1 \u003d new AddToDoCommand(taskDetails1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddToDoCommand cmd2 \u003d new AddToDoCommand(taskDetails2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(toDo1, 1), cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(1, storage.getTasks().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(toDo2, 2), cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(2, storage.getTasks().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests empty task details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTaskDetails() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String emptyTaskDetails \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expectedMessage \u003d \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddToDoCommand cmd \u003d new AddToDoCommand(emptyTaskDetails);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTaskException e \u003d assertThrows(EmptyTaskException.class, () -\u003e cmd.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 51
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTests.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Declares the storage, tasklist and ui for the children test classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CommandTests {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected final TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16
    }
  },
  {
    "path": "src/test/java/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ExitCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ExitCommand cmd \u003d new ExitCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(cmd.isExit());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ui.goodbye(), cmd.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyFindException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FindCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the find command with 2 different query words."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testFindMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FindCommand fc \u003d new FindCommand(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo \u003d new ToDo(\"te\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask event \u003d new ComplexTask(\"test\", TaskType.EVENT, \"2pm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ComplexTask deadline \u003d new ComplexTask(\"123test12312\", TaskType.DEADLINE, \"2pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Test 1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            TaskList newTaskList \u003d taskList.matchAll(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.showTaskList(newTaskList, \"matching \"), fc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Test 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fc \u003d new FindCommand(\"TEST\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.emptyFind(\"TEST\"), fc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (EmptyFindException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests find command with empty query word."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyFind() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        FindCommand fc \u003d new FindCommand(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(EmptyFindException.class, () -\u003e fc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 49
    }
  },
  {
    "path": "src/test/java/duke/command/ShowCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ShowCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ShowCommand sc \u003d new ShowCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests of empty list display."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ui.emptyTaskList(), sc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests of tasklist displays."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testActualDisplay() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"te\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(toDo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ui.showTaskList(taskList, \"\"), sc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 30
    }
  },
  {
    "path": "src/test/java/duke/command/SimpleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeleteException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDoneException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.TaskAlreadyDoneException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class SimpleCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests simple command when the succeeding word is not a number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testNotNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc1 \u003d new SimpleCommand(\"\", SimpleCommandType.DONE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc2 \u003d new SimpleCommand(\"awsdsa\", SimpleCommandType.DELETE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDoneException.class, () -\u003e sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeleteException.class, () -\u003e sc2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests simple command when the succeeding word is not valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidTaskNumber() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expectedMessage \u003d String.format(\"OOPS!!! Task number does not exist in the list.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Your current list only has %d tasks!\", 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc1 \u003d new SimpleCommand(\"5\", SimpleCommandType.DONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc2 \u003d new SimpleCommand(\"-2\", SimpleCommandType.DELETE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InvalidTaskNumberException e \u003d assertThrows("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidTaskNumberException.class, () -\u003e sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InvalidTaskNumberException e2 \u003d assertThrows("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidTaskNumberException.class, () -\u003e sc2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedMessage, e2.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the marking of task done command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDoneCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo1 \u003d new ToDo(\"test1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo2 \u003d new ToDo(\"test2\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo3 \u003d new ToDo(\"test3\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            SimpleCommand sc1 \u003d new SimpleCommand(\"2\", SimpleCommandType.DONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"Nice! I\u0027ve marked this task as done:\\n    [T][\\u2713] test2\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(storage.getTasks().get(1).isDone());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertThrows(TaskAlreadyDoneException.class, () -\u003e sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests deletion of tasks command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDeleteCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo1 \u003d new ToDo(\"test1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo2 \u003d new ToDo(\"test2\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo3 \u003d new ToDo(\"test3\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            SimpleCommand sc1 \u003d new SimpleCommand(\"2\", SimpleCommandType.DELETE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.deleteTask(toDo2, 2), sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(2, storage.getTasks().size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 94
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddComplexTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the basic commands given to the parser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputBasic() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"todo work\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"deadline test /by 2pm\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"event test /at 2-4pm\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s4 \u003d \"list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s5 \u003d \"done 5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s6 \u003d \"delete 2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s7 \u003d \"find book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s8 \u003d \"bye\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s1) instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s2) instanceof AddComplexTaskCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s3) instanceof AddComplexTaskCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s4) instanceof ShowCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s5) instanceof SimpleCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s6) instanceof SimpleCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s7) instanceof FindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s8) instanceof ExitCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests parser with inputs with random number of spaces."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputAdvanced() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"\\t todo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"deadline\\t\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"event \\t\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s4 \u003d \"\\nlist\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s5 \u003d \"done done\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s6 \u003d \"delete random\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s7 \u003d \"   find   \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s8 \u003d \"bye 444\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s1) instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s2) instanceof AddComplexTaskCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s3) instanceof AddComplexTaskCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s4) instanceof ShowCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s5) instanceof SimpleCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s6) instanceof SimpleCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s7) instanceof FindCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s8) instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests parsing with invalid words."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s1 \u003d \"random\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s2 \u003d \"bye1\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s3 \u003d \"findd\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s4 \u003d \"    \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s5 \u003d \" do find\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s3));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s4));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s5));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 93
    }
  },
  {
    "path": "src/test/java/duke/storage/CsvConverterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CsvConverterTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests Csv converter with correctly formatted basic text."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputBasic() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"TODO  ,cs2103 tutorial  ,-  ,Not done\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"EVENT  ,eat  ,1200-1400  ,Not done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"DEADLINE  ,read  ,2pm  ,Done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task todo \u003d CsvConverter.parseToTask(s1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task event \u003d CsvConverter.parseToTask(s2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task deadline \u003d CsvConverter.parseToTask(s3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check ToDo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(todo instanceof ToDo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"cs2103 tutorial\", todo.getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"-\", todo.getTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(todo.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check event"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(event instanceof ComplexTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"eat\", event.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"1200-1400\", event.getTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(event.isDone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline instanceof ComplexTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"read\", deadline.getDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"2pm\", deadline.getTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests Csv converter with correctly formatted text with multiple complicated variants."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputAdvanced() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"TODO  ,cs2103 tutorial  ,-  ,Not Done\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"EVENT  ,     ,1200-1400  ,NOt done\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"deadLinE  ,read  ,2pm  ,done\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task todo \u003d CsvConverter.parseToTask(s1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task event \u003d CsvConverter.parseToTask(s2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task deadline \u003d CsvConverter.parseToTask(s3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check ToDo"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(todo instanceof ToDo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"cs2103 tutorial\", todo.getDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"-\", todo.getTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(todo.isDone());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(event instanceof ComplexTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"   \", event.getDescription());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"1200-1400\", event.getTime());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(event.isDone());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check deadline"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline instanceof ComplexTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"read\", deadline.getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"2pm\", deadline.getTime());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests CsvConverter with invalid string formats."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidFormat() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s1 \u003d \"TODO  ,cs2103 tutorial ,-  ,Not done\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s2 \u003d \"DEADLINE  ,read  ,2pm\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s3 \u003d \"EVENT  ,eat   ,Not done\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s4 \u003d \"EVENT  ,eat   ,I am not done\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s5 \u003d \"NOTEVENT  ,eat   ,2-4pm  ,done\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s3));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s4));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s5));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 100
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests updating of tasks in storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testTaskUpdate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task task1 \u003d new ToDo(\"cs2103t\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task task2 \u003d new ToDo(\"tutorial\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task task3 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(task1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(task2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(task3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Update"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            storage.update(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // After updating"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(3, tasks.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(task1.getDescription(), tasks.get(0).getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(task2.getDescription(), tasks.get(1).getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(task3.getDescription(), tasks.get(2).getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                assertEquals(\"TODO\", task.getTaskName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                assertEquals(\"-\", task.getTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (FileUpdateFailException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests updating of empty tasks in storage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTasks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList emptyTaskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            storage.update(emptyTaskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ArrayList\u003cTask\u003e emptyTasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(emptyTasks.isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (FileUpdateFailException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 67
    }
  },
  {
    "path": "src/test/java/duke/task/ComplexTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ComplexTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description \u003d \"workout\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String time \u003d \"2pm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests dead"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testMethods() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask newDeadline \u003d new ComplexTask(description, TaskType.DEADLINE, time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check default"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newDeadline.isDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Not done\", newDeadline.getStatus());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(time, newDeadline.getTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newDeadline.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newDeadline.isDone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Done\", newDeadline.getStatus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[D][\\u2713] %s (by: %s)\", description, time), newDeadline.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests creation of deadline task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDeadline() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask newDeadline \u003d new ComplexTask(description, TaskType.DEADLINE, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"DEADLINE\", newDeadline.getTaskName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[D][\\u2718] %s (by: %s)\", description, time), newDeadline.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests creation of event task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEvent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask newEvent \u003d new ComplexTask(description, TaskType.EVENT, time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"EVENT\", newEvent.getTaskName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[E][\\u2718] %s (at: %s)\", description, time), newEvent.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the second constructor with 4 parameters in ComplexTask."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testSecondConstructor() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask newEvent \u003d new ComplexTask(description, true, TaskType.EVENT, time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newEvent.isDone());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newEvent \u003d new ComplexTask(description, false, TaskType.EVENT, time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newEvent.isDone());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 61
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description \u003d \"workout\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests basic methods in todo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testWithDefault() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check default"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newToDo.isDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Not done\", newToDo.getStatus());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"TODO\", newToDo.getTaskName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"-\", newToDo.getTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(description, newToDo.getDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[T][\\u2718] %s\", description), newToDo.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newToDo.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newToDo.isDone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Done\", newToDo.getStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[T][\\u2713] %s\", description), newToDo.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests both constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo newTodo \u003d new ToDo(description, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newTodo.isDone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newTodo \u003d new ToDo(description, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newTodo.isDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests match method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testMatch() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description1 \u003d \"man\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description2 \u003d \"Man\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description3 \u003d \"woman\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description4 \u003d \"mane\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String toMatch \u003d \"man\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(new ToDo(description1).match(toMatch));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(new ToDo(description2).match(toMatch));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(new ToDo(description3).match(toMatch));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(new ToDo(description4).match(toMatch));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 61
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests all methods in task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Additions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask \u003d new ToDo(\"apple\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask2 \u003d new ToDo(\"apple and orange\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask3 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask4 \u003d new ToDo(\"zest\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask5 \u003d new ToDo(\"war\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Basic methods"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(5, taskList.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask, taskList.get(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.checkIfValid(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.checkIfValid(10));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.checkIfValid(-2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // On match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList newList \u003d taskList.matchAll(\"ple\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask, newList.get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask2, newList.get(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Deletions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.delete(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotSame(newTask, taskList.get(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask2, taskList.get(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(5, taskList.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(4, taskList.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 59
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ToDo toDo \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests greetings method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testGreeting() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Hello, I\u0027m Duke!\\nWhat can I do for you?\", Ui.greetings());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests goodbye method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testGoodbye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Bye! Hope to see you again soon!\", ui.goodbye());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests markTaskAsDone method."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testMarkTaskAsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        toDo.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n    [T][\\u2713] test\", ui.markTaskAsDone(toDo));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests deleteTask method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDeleteTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task:\\n    [T][\\u2718] test\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Now you have 5 tasks in the list.\", ui.deleteTask(toDo, 5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests addTask method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\n    [T][\\u2718] test\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Now you have 4 tasks in the list.\", ui.addTask(toDo, 4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests emptyTaskList method."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"You currently have no tasks in the list.\", ui.emptyTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests showTaskList method."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testShowTaskList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo1 \u003d new ToDo(\"todo1\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo2 \u003d new ToDo(\"todo2\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo3 \u003d new ToDo(\"todo3\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(toDo1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(toDo2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(toDo3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Test 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expectedString \u003d \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"1. [T][\\u2718] todo1\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"2. [T][\\u2718] todo2\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"3. [T][\\u2718] todo3\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedString, ui.showTaskList(taskList, \"matching \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Test 2"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        expectedString \u003d \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"1. [T][\\u2718] todo1\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"2. [T][\\u2718] todo2\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"3. [T][\\u2718] todo3\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedString, ui.showTaskList(taskList, \"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests emptyFind method."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyFind() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"There are no matching tasks with the keyword size.\", ui.emptyFind(\"size\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"There are no matching tasks with the keyword .\", ui.emptyFind(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 104
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "todo test case"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "null"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 2020-08-23"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 2020-08-23 10:15"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline Return Book /by 2020-08-23 19:00:35"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 00:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event /at 2 - 4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline meeting /at"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline meeting /by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event project meeting /at 2019-12-01"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done sdvgfdsg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete asbf"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "FiND book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "find legend"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "bye 5"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "-": 20
    }
  }
]
