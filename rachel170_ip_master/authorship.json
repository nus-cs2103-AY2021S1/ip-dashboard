[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Duke\u0027s main class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Consists of a Storage, TaskList and Ui."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Contains the program loop in run() method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Duke\u0027s program variables"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private boolean isUpdating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private String updateCommand \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Duke\u0027s Default Constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Initialize isUpdating as false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Initializes ui, storage and tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Loads in save file (if any)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Uses a default filePath"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        isUpdating \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFileContents());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            ui.setGreetings(\"... Oh! You\u0027re back!\\nEr, gimme a sec...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            ui.setGreetings(\"... Who? Never mind. Er-hmm.\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Own function to generate a response to user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Read user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String userInput \u003d input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // If Duke is getting input for updating a task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (isUpdating) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Assert that updateCommand is not empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            assert !updateCommand.isEmpty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Updates task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            output \u003d ui.getOutputSymbol() + tasks.updateTask(updateCommand, input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Reset Duke back to default state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            isUpdating \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            updateCommand \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // returns the Updated task details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return output + ui.getLineBreak();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Parse out the command from the user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Command cmd \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Use switch to process the commands"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Try to Save the data"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    boolean saveSuccess \u003d storage.saveToFile(tasks.getTasks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    assert saveSuccess; // Save should be successful"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    output \u003d ui.getError(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Return farewells"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                   return ui.getFarewells() + output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getLineBreak() + ui.getList(tasks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.createTodo(userInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.createDeadline(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.createEvent(userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case INVALID:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Duke does not recognize the commands"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Sorry, I don\u0027t recognize what you just entered...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.markTaskDone(userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.deleteTask(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.searchForKeyword(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            case UPDATE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                output \u003d ui.getOutputSymbol() + tasks.fetchTaskToUpdate(userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Valid task to update, then set Duke status to isUpdating"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                this.isUpdating \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                updateCommand \u003d userInput;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                assert false : cmd;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                //throw new DukeException(\"Sorry I think I something went wrong...\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            output \u003d ui.getLineBreak() + ui.getError(e);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return output + ui.getLineBreak();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Print\u0027s Duke\u0027s greetings in GUI."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getGreetings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return ui.getGreetings();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 121,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            stage.setTitle(\"Duke: An AI In-Progress\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                DialogBox.getDukeDialog(duke.getGreetings(), dukeImage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * containing Duke\u0027s reply and then appends them to the dialog container."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Closing program on \"bye\" command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 59
    }
  },
  {
    "path": "src/main/java/util/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Represents the type of commands Duke can do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Commands:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * INVALID - Unrecognized commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * EXIT - \u0027bye\u0027 that ends Duke\u0027s session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * LIST - \u0027list\u0027 which lists Duke\u0027s recorded tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * DONE - Helps mark task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * DELETE - Indicates task to be removed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * FIND - Identifies tasks containing given keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * UPDATE - Updates task description with given string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Types of task that can be made:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * DEADLINE, EVENT, TO DO"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    INVALID, EXIT, LIST,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    DONE, DELETE, FIND, UPDATE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    TODO, DEADLINE, EVENT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 21
    }
  },
  {
    "path": "src/main/java/util/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Duke\u0027s Custom Exception Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10
    }
  },
  {
    "path": "src/main/java/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deals with making sense of the user command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Parses the provided user input into something Duke understands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param userInput String containing the user\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return The command interpreted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If input is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check if it is a single word command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return Command.EXIT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return Command.LIST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Process input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (instructions[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command for to do Tasks creation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Add check for command details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If command has details, return command to add to do"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return Command.TODO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"deadline \u003ctaskName\u003e /by \u003cdeadline\u003e\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Extract Details from command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                String[] details \u003d instructions[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if have valid deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (hasCmdDetails(details)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    checkDate(details[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.DEADLINE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                            + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"deadline \u003ctaskName\u003e /at \u003cevent\u003e\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Extract Details from command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                String[] details \u003d instructions[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if have valid event time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (hasCmdDetails(details)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.EVENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                            + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"done \u003ctask\u003e\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If valid \u003ctask\u003e, mark done"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Integer.parseInt(instructions[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Only add if task number is a valid number"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.DONE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid number...\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"delete \u003ctaskNumber\u003e\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If valid \u003ctaskNumber\u003e, remove from list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Integer.parseInt(instructions[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Only delete if task number is a valid number"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.DELETE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    //System.out.println(\"Caught nfe\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid number...\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"find \u003ckeyword\u003e\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return Command.FIND;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else if (instructions[0].equals(\"update\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command: \"done \u003ctask\u003e\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If valid \u003ctask\u003e, mark done"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (hasCmdDetails(instructions)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Integer.parseInt(instructions[1]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Only add if task number is a valid number"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    return Command.UPDATE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid number...\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Something wrong with command, throw exception"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                throw new DukeException(\"Whoops! Something went wrong and I can\u0027t process your \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        + instructions[0] + \" command. Sorry! D:\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return Command.INVALID;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Checks whether command has follow-up details."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param cmd String array with the command sectioned out."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return True/False value of whether the command is complete."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If command has missing data."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static boolean hasCmdDetails(String[] cmd) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (cmd[1].equals(\"\") || cmd[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Make sure command has follow up details"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if there is second word"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Check if second word is just whitespace"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // If so, command has no details"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Check if there is even anything after command"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Exception thrown if userInput.split() fails"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Command has no details, throw exception"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Whoops! I think you forgot to finish your \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    + \"command. Sorry but I need it. D:\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns lateral location of the specified position."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * If the position is unset, NaN is returned."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param dateString String that may be a LocalDate."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If dateString is not a LocalDate."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public static void checkDate(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            LocalDate df \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Check if string can be recognized as a valid LocalDate"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // If can\u0027t, print out error message"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Whoops! I think there is an error in your date.\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    \"\\nPlease Try Again!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 185
    }
  },
  {
    "path": "src/main/java/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructor for Storage class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param filePath File path string for Duke\u0027s data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Loads save file contents (if any)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * https://nus-cs2103-ay2021s1.github.io/website/book/cppToJava/misc/fileAccess/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Array list of Tasks deciphered from save file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws FileNotFoundException  If no save file detected."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Initialize list to be returned"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        File data \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Scanner scanner \u003d new Scanner(data); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // File should not be more than 100 lines"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            assert tasks.size() !\u003d 100;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Read the data line"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            String dataLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Split data line into components"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            String[] taskDetails \u003d dataLine.split(\" - \", 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Depending on first letter, determine what task it is"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (taskDetails[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                Task t \u003d new Todo(taskDetails[2]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    t.setStatus(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else if (taskDetails[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Try to add Deadline based off file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Check if string can be recognized as a valid LocalDate"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // If can\u0027t, throw Duke\u0027s exception"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    Task t \u003d new Deadline(taskDetails[2], LocalDate.parse(taskDetails[3]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                        t.setStatus(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                } catch(Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    // Print out error message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    System.out.println(\"Er, I found an error in the storage data.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    System.out.println(\"This line will be excluded from my task list:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                            + dataLine);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else if (taskDetails[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                Task t \u003d new Event(taskDetails[2], taskDetails[3]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                if (taskDetails[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    t.setStatus(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Basic Error, if invalid task, print error message"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.print(\"Sorry I could not comprehend this: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.println(dataLine);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // End of Loop"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // return the final task list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Saves Duke\u0027s current data into a file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param list ArrayList of Tasks Duke currently has."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException  If Duke is unable to save into file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean saveToFile(ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Create file if there is none"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            createFile();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Empties file if there is one"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            clearTheFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry, something went wrong and I couldn\u0027t save my data... \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // List should at most have 100 tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assert list.size() \u003c\u003d 100;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Try to write into save file"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                writeToFile(list.get(i).toSaveData());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.print(\"Something happened and this failed to be saved: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                System.out.println(list.get(i));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns lateral location of the specified position."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * https://nus-cs2103-ay2021s1.github.io/website/book/cppToJava/misc/fileAccess/"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param textToAdd String of text to append to save file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IOException If unable to write to file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Empties last save file of content."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * https://stackoverflow.com/questions/29878237/"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *     java-how-to-clear-a-text-file-without-deleting-it/42282671"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws IOException  If cannot empty file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void clearTheFile() throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        FileWriter fwOb \u003d new FileWriter(filePath, false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        PrintWriter pwOb \u003d new PrintWriter(fwOb, false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        pwOb.flush();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        pwOb.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        fwOb.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates file directory (if not already existing)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates new save file (if not already existing)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Make directory if it doesn\u0027t already exists"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        dir.mkdir();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // create a File for the given file path"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        new File(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 161
    }
  },
  {
    "path": "src/main/java/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * e.g., it has operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Note: limit storage to 100 items **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructors."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.tasks \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns list of Tasks Duke knows."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Task List."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and adds a to-do task into TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The to-do command and its details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Message of successful creation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String createTodo(String command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d new Todo(instructions[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return String.format(\"added: %s\\n There is now %d tasks in the list!\\n\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                t, tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and adds a deadline task into TaskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The deadline command and its details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Message of successful creation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String createDeadline(String command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] details \u003d instructions[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d new Deadline(details[0], LocalDate.parse(details[1]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return String.format(\"added: %s\\n There is now %d tasks in the list!\\n\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                t, tasks.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Creates and adds a Event task into TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The event command and its details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Message of successful creation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String createEvent(String command) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] details \u003d instructions[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d new Event(details[0], details[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return String.format(\"added: %s\\n There is now %d tasks in the list!\\n\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                t, tasks.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Identifies a specific task and mark it as done."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The done command and its details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Message of successful change of status"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If index noted in command is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String markTaskDone(String command) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        int index \u003d Integer.parseInt(instructions[1]) - 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            t.setStatus(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return String.format(\"Congratulations!\\nI\u0027ve helped you mark the task as done:\\n -\u003e %s\\n\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    t.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid index...\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Identifies a specific task and deletes it from TaskList."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The delete command and its details."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Message of successful deletion of task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If index noted in command is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String deleteTask(String command) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        int index \u003d Integer.parseInt(instructions[1]) - 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            String m \u003d String.format(\"Noted!\\nI\u0027ve helped you remove the following task:\\n -\u003e%s\\n\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            t.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return m + String.format(\"Now, there is %d tasks in the list!\\n\", tasks.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid index...\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns whether the task list is empty."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return True if list is empty, False otherwise."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean isListEmpty() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Gets all of the tasks in the TaskList."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return List of all tasks as a String."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getAllTasks() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Turn all tasks in Duke\u0027s list into a long String"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            output \u003d output + String.format(\"%d. %s\\n\", i+1, tasks.get(i));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Searches through all of Duke\u0027s tasks and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * print out tasks with given keyword"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The find command inputted by the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return List of findings"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If no tasks with keyword can be found."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String searchForKeyword(String command) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String keyword \u003d instructions[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Initialize an arraylist to store found tasks"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ArrayList\u003cTask\u003e findings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Go through Duke\u0027s tasks"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            //Check each task for the keyword"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (tasks.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                // Add to findings"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                findings.add(tasks.get(i));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        //Check if list is empty"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (findings.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry I find can\u0027t any tasks related to \" + keyword + \".\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            String m \u003d \"Here are the relevant tasks!\\n\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Prints all tasks in findings"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            for (int i \u003d 0; i \u003c findings.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                m \u003d m + String.format(\"-\u003e %s\\n\", findings.get(i));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return m;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Identifies what task user wants to update and"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * returns current description of task."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param command The update command and its details."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Current details of task user wants to update"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If index noted in command is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String fetchTaskToUpdate(String command) throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        int index \u003d Integer.parseInt(instructions[1]) - 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return String.format(\"%s\\n -\u003e %s\\n%s\\n\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    \"Here is the details of the specified task!\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    t.toString(),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                    \"What would you like to change its description to?\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            throw new DukeException(\"Sorry, I don\u0027t think that\u0027s a valid index...\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Updates previously mentioned task with provided description."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param newDescription The new description for task."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return String of updated task."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @throws DukeException If index noted in command is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String updateTask(String command, String newDescription) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String[] instructions \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        int index \u003d Integer.parseInt(instructions[1]) - 1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // Check for index is within range;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assert (index \u003c tasks.size() \u0026\u0026 index \u003e\u003d 0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        t.setDescription(newDescription);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return String.format(\"%s\\n -\u003e %s\\n\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"Here is the details of the updated task!\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                t.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 224
    }
  },
  {
    "path": "src/main/java/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deals with interactions with the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /** Constants **/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String outputSymbol \u003d \"\u003e\u003e\u003e \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String lineBreak \u003d \"--.--.--.--.--.--.--.--.--.--.--.\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            \"--.--.--.--.--.--.--.--.--.--.--\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Text Images"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Other variable"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    private String greetings \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Sets Duke\u0027s load message as a string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setGreetings(String loadMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.greetings \u003d loadMessage + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns Duke\u0027s greetings as a string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Duke\u0027s greetings as a String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getGreetings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return greetings +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"\\nHello, I\u0027m Duke! \" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"What can I help you with today?\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"\\n\" + lineBreak + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Gets Duke\u0027s farewell to user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Duke\u0027s farewell as a String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getFarewells() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return outputSymbol +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"Bye! Hoped I helped!\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"\\n\" + lineBreak;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns a line break and Duke\u0027s symbols before response."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return The string containing output symbols."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getOutputSymbol() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return lineBreak + \"\\n\" + outputSymbol;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the line break string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @returns Line break as String."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getLineBreak() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return lineBreak + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Prints error messages from DukeException."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param e The DukeException to print message of."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return String message of exception."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getError(DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns all tasks within a TaskList (if any)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Else prints a list is empty message."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param list TaskList of Duke."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return List of tasks in String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getList(TaskList list) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String output \u003d \"Here is what I have! ^^\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if (list.isListEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            // Handles printing empty list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            output +\u003d \"Whoops! I don\u0027t have anything of note yet...\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            output +\u003d list.getAllTasks();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 102
    }
  },
  {
    "path": "src/main/java/util/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deadline inherits from Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Deadline is a Task that has an added characteristic of a dueDate."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected LocalDate dueDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Deadline(String name, LocalDate date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.dueDate \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Deadline in String format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.dueDate.format(formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"D - \" + super.toSaveData() + \" - \" + this.dueDate + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDeadline() + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 38
    }
  },
  {
    "path": "src/main/java/util/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Event inherits from Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Event is a Task that has an added characteristic of a duration."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Event(String name, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.duration \u003d details;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns duration of the Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Duration of the Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getEventDetails() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        //return this.duration.format(formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"E - \" + super.toSaveData() + \" - \" + this.duration + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getEventDetails() + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 38
    }
  },
  {
    "path": "src/main/java/util/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Parent Class for all Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * Task contains a name describing the task and"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * a isDone boolean that indicates whether"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * the task is completed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    // Variables"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param name  Name of Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns status of the Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Task Status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Set Task status to specified value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param status  Status to set Task to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setStatus(boolean status) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns name of the Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return Lateral location."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Set Task description to specified string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @param description  New description for the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        this.name \u003d description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * Returns details of the Task in a format loadable by Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     * @return String in proper format for Duke\u0027s save file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"1 - \" + this.name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"0 - \" + this.name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name and status"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"[Done] \" + this.name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            return \"[X] \" + this.name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 85
    }
  },
  {
    "path": "src/main/java/util/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "package util.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * To-do inherits from Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": " * To-do is similar to a Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toSaveData() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"T - \" + super.toSaveData() + \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        // By default print task name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 22
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rachel170": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"6.0\" layoutY\u003d\"560.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"38.0\" prefWidth\u003d\"310.0\" AnchorPane.bottomAnchor\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"324.0\" layoutY\u003d\"560.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"38.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rachel170": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 10
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void randomCommand_InvalidInput_GivenInput(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"something\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.INVALID) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"something\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void todoCommand_ValidInput_GivenInput(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"todo read book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.TODO) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"todo read book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deadlineCommand_ValidInput_GivenInput(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"deadline return book /by 2020-06-06\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"deadline return book /by 2020-06-06\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deadlineCommand_InvalidDate_ExceptionMessage(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"deadline return book /by 2020/06/06\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"Whoops! I think there is an error in your date.\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                \"\\nPlease Try Again!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void deadlineCommand_MissingDate_ExceptionMessage(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"deadline return book \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            if (Parser.parse(actual) !\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                actual \u003d Parser.parse(actual).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"Whoops! I think you forgot to finish your \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rachel170"
        },
        "content": "                + \"command. Sorry but I need it. D:\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 81
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import util.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    public void markTaskDone_InvalidIndex_SuccessMessage(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        ArrayList\u003cTask\u003e testTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        testTasks.add(new Todo(\"return book\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        TaskList tasktester \u003d new TaskList(testTasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            tasktester.markTaskDone(\"done 0\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rachel170"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        String expected \u003d \"Sorry, I don\u0027t think that\u0027s a valid index...\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rachel170": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rachel170"
        },
        "content": "something"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rachel170"
        },
        "content": "event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rachel170"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rachel170"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rachel170"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rachel170"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rachel170"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rachel170"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rachel170"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rachel170": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rachel170"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rachel170"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rachel170"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rachel170"
        },
        "content": "    echo TEST FAILED"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rachel170"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rachel170"
        },
        "content": ")"
      }
    ],
    "authorContributionMap": {
      "rachel170": 6,
      "-": 20
    }
  }
]
