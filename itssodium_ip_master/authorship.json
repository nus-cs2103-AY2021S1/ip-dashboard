[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "itssodium": 15
    }
  },
  {
    "path": "src/main/java/Duke/Commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This class handles the case of adding different tasks which are ToDo, deadline and Event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor that assigns string value of string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string passes it to super class constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public AddCommand(String string) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives a String saying that the task list has been updated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param task to be added into taskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param taskList where task is added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String that informs task is added into taskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    protected static String stringToUpdateTaskList(Task task, TaskList taskList){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  Got it. I\u0027ve added this task:\\n  \" + task.toString() + \"\\n\" + //Task added message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  Now you have \" + taskList.getAllTasks().size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * adds the task to list of task in taskList and into the file in storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage where the file here is updated"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param task this task is added into storage and taskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param taskList where the tasks here is updated with task added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws IOException when the file in storage is not present"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    protected static String updateTaskList(Storage storage, Task task, TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        FileWriter fw \u003d new FileWriter(storage.getFilePath(), true); //updates the file in storage as new task is added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        taskList.getAllTasks().add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        fw.write(task.inputListFormat() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Task.tasks.add(task); //adds task to taskList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(stringToUpdateTaskList(task, taskList));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return stringToUpdateTaskList(task, taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts string to date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string string to convert to date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return local date which is converted from string, if cannot then DateTimeException thrown"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    protected static LocalDate stringToLocalDate(String string){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(string, formatter); //converts string to date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (DateTimeException d) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw d;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts string to dateTime"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string string to convert to dateTime"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return local dateTime which is converted from string, if cannot then DateTimeException thrown"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    protected static LocalDateTime stringToLocalDateTime(String string){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd, HH:mm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDateTime parsedDate \u003d LocalDateTime.parse(string, formatter); //converts string to date and time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DateTimeException g) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw g;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * converts string to time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string string to convert to time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return local time which is converted from string, if cannot then DateTimeException thrown"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    protected static LocalTime stringToLocalTime(String string){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalTime parsedDate \u003d LocalTime.parse(string, formatter);//converts string to time"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DateTimeException f) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw f;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 104
    }
  },
  {
    "path": "src/main/java/Duke/Commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * this is an abstract class used for polymorphism"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * commandName which contains information on task and details to perform task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * isExit is used to tell whether program terminates, where id true, it terminates"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String commandDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    boolean isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns string to a value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param commandDescription assigns this.string to string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Command(String commandDescription){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.commandDescription \u003d commandDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gets value of exit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return exit"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Executes the necessary task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks used to access tasks in its list and change if necessary"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the input there if necessary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException if there are exceptions present"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 45
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * has the method if deadline is keyword deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeadlineCommand(String string) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * to add deadline into a task list in TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList if necessary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file in the if necessary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the action is successful"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException whenever there is an error, where the time adn or date is absent or in wrong format, no"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isDescriptionAbsent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DeadlineException(true, false, false); //Since description is absent"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String[] dataSplit \u003d splitData(); //Split into description name and time and/or date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Deadline d \u003d deadlineTask(dataSplit[0], dataSplit[1]); //gives the Deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return updateTaskList(storage, d, tasks); //updates the tasks and file in storage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException i){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * checks whether the commandDescription contains the description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true if description absent and false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDescriptionAbsent(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.length() \u003d\u003d 8 || commandDescription.length() \u003d\u003d 9; // since description can only appear after length of 9"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * splits the data into Deadline description and the Deadline date and/ or time. If the date and/or time is absent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * then DeadlineException is thrown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the String array where the first String is the name of the Deadline and the second is the date and/or time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * of deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DeadlineException thrown when the time and/or date is absent."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String[] splitData() throws DeadlineException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean time \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 8; i \u003c commandDescription.length(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (commandDescription.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                time \u003d true;//since date appears after /"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + commandDescription.charAt(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!time) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DeadlineException(false, false, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert !s.substring(1, s.length() - 1).contains(\"/\"); // description should not contain /"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert !commandDescription.substring(index + 4).contains(\"/by\"); ////date and/or time should not contain /at"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String[] dataSplit \u003d new String[]{s.substring(1, s.length() - 1), commandDescription.substring(index + 4)};"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return dataSplit;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This method creates a deadline task by checking whether the date and/or time given is in the correct"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * format. If it is then Deadline task is returned else, DeadlineException is returned."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name description of Deadline task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param dateTime gives the dateTime, to check whether they are in the correct format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return deadline if the dateTime is in the correct format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DeadlineException if the dateTime is in the incorrect format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static Deadline deadlineTask(String name, String dateTime) throws DeadlineException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Deadline e;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate parsedDate \u003d stringToLocalDate(dateTime); //converts string to date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            e \u003d new Deadline(name, parsedDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (DateTimeException d) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                LocalDateTime parsedDate \u003d stringToLocalDateTime(dateTime);//converts string to date and time"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                e \u003d new Deadline(name, parsedDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy, HH:mm\")));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (DateTimeException g) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    LocalTime parsedDate \u003d stringToLocalTime(dateTime);//converts string to date"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    e \u003d new Deadline(name, parsedDate.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                } catch (DateTimeException f) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new DeadlineException(false, true, false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 122
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DeleteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles the case when the keyword is delete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeleteCommand(String string) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Deletes task and handles error"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList since item is deleted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file since item is deleted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the delete action has been complete."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException thrown if the ID is more than number of ID is absent"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isNumberAbsent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DeleteException(true, false); //when number is absent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            int ID \u003d Integer.parseInt(commandDescription.substring(7));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (isNumberNotInList(ID, tasks)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new DeleteException(false, true); //when ID is more than number of tasks in list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return rewrite(storage, tasks, ID); //to update TaskList and file in Storage"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns whether the number is present."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true is the number is absent and false if number is present."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNumberAbsent(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.length() \u003d\u003d 4 || commandDescription.length() \u003d\u003d 5; //since the delete number appears after length of 5"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns whether the task is present in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID of task to be removed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks from which the task is to be removed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true if the task is not present in list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNumberNotInList(int ID, TaskList tasks){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return ID \u003e tasks.getAllTasks().size(); //ID cannot be more than length of tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns the String informing that the task is deleted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks uses to give the current number of tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID uses to get the task to be deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing that the task is deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String deleteTaskString(TaskList tasks, int ID){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"   Noted. I\u0027ve removed this task:\\n\" + // gives delete message"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"   \" + tasks.getAllTasks().get(ID - 1).toString() + \"\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  Now you have \" + (tasks.getAllTasks().size() - 1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * updates the the file in storage after task is deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param newList where this is the new input replaces the old input in the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage which contains file to be changed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws FileAbsentException when the file to be updated is absent in Storage"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void updateTaskInStorage(String newList, Storage storage) throws FileAbsentException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storage.getFilePath()); //updates the file in Storage with new String"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(newList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives the string for the new task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks contains current tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string for the new task list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String newInputInStorageFIle(TaskList tasks){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + tasks.getAllTasks().get(i).inputListFormat() + \"\\n\"; // Task of ID is deleted and then the String of tasks is updated"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Removes task that has to be deleted from TaskList"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks where task with index (ID - 1) is removed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID gives information on which task to remove."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void deleteTaskInTaskList(TaskList tasks, int ID){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.getAllTasks().remove(ID - 1); //removes task with ID from task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This returns the string that the task has been deleted adn also updated the TakList."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage in which the file is updated."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks used to update the task for the task to be deleted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID of the task to be deleted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException throws if file is absent"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String rewrite(Storage storage, TaskList tasks, int ID)  throws DukeException{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        deleteTaskInTaskList(tasks, ID); //deleted the task with ID in TaskList"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String newTaskList \u003d newInputInStorageFIle(tasks); //gives new file input and deletes"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            updateTaskInStorage(newTaskList, storage); //replaces old list in storage file with this"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            System.out.println(deleteTaskString(tasks, ID));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return deleteTaskString(tasks, ID);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (FileAbsentException f) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 144
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DoneException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles case when done is keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DoneCommand(String string) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Completes done task and handle error"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList as a task is completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file as task is completed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the done action has been complete."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException thrown if the ID is more than number of ID is absent"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isNumberAbsent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new DoneException(true, false); //when number is absent"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            int ID \u003d Integer.parseInt(commandDescription.substring(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (isNumberNotInList(ID, tasks)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new DoneException(false, true); //when number is not in list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return rewrite(storage, tasks, ID); //where the file in Storage is updated and TaskList is updated"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns whether the number is present."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true is the number is absent and false if number is present."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNumberAbsent(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.length() \u003d\u003d 4 || commandDescription.length() \u003d\u003d 5; // keyword is absent if user input is only 4/5"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns whether the task is present in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID of task to be removed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks from which the task is to be removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true if the task is not present in list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNumberNotInList(int ID, TaskList tasks){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return ID \u003e tasks.getAllTasks().size(); //since ID cannot be more that number of tasks present"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * updates the the file in storage after task is marked as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param newList where this is the new input replaces the old input in the file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage which contains file to be changed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws FileAbsentException when the file to be updated is absent in Storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void updateTaskInStorage(String newList, Storage storage) throws FileAbsentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storage.getFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(newList); //updates task list to newList since one task is marked as done"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives the string for the new task list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks marks the task as done"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string for the new task list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String newInputInStorageFIle(TaskList tasks){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + tasks.getAllTasks().get(i).inputListFormat() + \"\\n\"; //new taskList String since done is being set for task with ID mentioned by user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns the String informing that the task that is marked as done"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks uses to give the current number of tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID uses to get the task to mark done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing that the task is marked as done."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String doneMessage(TaskList tasks, int ID){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"   Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"   \" + tasks.getAllTasks().get(ID - 1).toString(); //gives the doneMessage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This returns the string that the task has been deleted adn also updated the TakList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage in which the file is updated."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks used to update the task for the task to mark as done."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ID of the task to mark as done."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException throws if file is absent"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String rewrite(Storage storage, TaskList tasks, int ID) throws DukeException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.getAllTasks().get(ID - 1).setDone(true); //sets the task at (ID - 1) as done"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d newInputInStorageFIle(tasks); //new List for storage file"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            updateTaskInStorage(s, storage); //updates the TaskList and the file in storage file"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return doneMessage(tasks, ID); // returns done message"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (FileAbsentException f) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 129
    }
  },
  {
    "path": "src/main/java/Duke/Commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.EventException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles cases when Event is keyword"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class EventCommand extends AddCommand{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns string to a value of string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public EventCommand(String string) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Adds Event task or handle exceptions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList if necessary when no error"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file in the if necessary when no error"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the action has been complete."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException if there no description after Event no time or time is wrong format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isDescriptionAbsent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(true, false, false, false, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String[] dataSplit \u003d splitData(); //splits String into different of Event name, start and end time and/or date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Event event \u003d provide(dataSplit[0], dataSplit[1], dataSplit[2]); //gives the event or throws exception"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return updateTaskList(storage, event, tasks); //updates the Task list in Storage and TaskList since the Event is added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * checks whether the commandDescription contains the description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true if description absent and false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDescriptionAbsent(){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.length() \u003d\u003d 5 || commandDescription.length() \u003d\u003d 6; // since description is present after index 6"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * splits the data into Deadline description and the Deadline date and/ or time. If the date and/or time is absent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * then DeadlineException is thrown."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the String array where the first String is the name of the Deadline and the second is the date and/or time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * of start for event, third is the date and/or time of end for event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws EventException thrown when the time and/or date is absent."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String[] splitData() throws EventException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int end \u003d -1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean startPresent \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean endPresent \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String start \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d 5; i \u003c commandDescription.length(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (commandDescription.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                startPresent \u003d true; //the presence of / indicates that the start time is present."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + commandDescription.charAt(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for (int i \u003d index + 1; i \u003c commandDescription.length(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (commandDescription.charAt(i) \u003d\u003d \u0027-\u0027 \u0026\u0026 i !\u003d commandDescription.length() - 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                end \u003d i;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                endPresent \u003d true; // - indicates that end time is present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            start \u003d start + commandDescription.charAt(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!startPresent) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(false, false, false, false, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (!endPresent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(false, true, false, false, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String[] dataSplit \u003d new String[3];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert !s.substring(1, s.length() - 1).contains(\"/\"); //description cannot contain /"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert !commandDescription.substring(index + 4).contains(\"/at\"); //start date and/or time cannot contain /at"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert !commandDescription.substring(end + 1).contains(\"-\"); //end date and/or time cannot contain -"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        dataSplit[0] \u003d s.substring(1, s.length() - 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        dataSplit[1] \u003d commandDescription.substring(index + 4, end);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        dataSplit[2] \u003d commandDescription.substring(end + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return dataSplit;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This method creates a deadline task by checking whether the date and/or time given is in the correct"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * format. If it is then Deadline task is returned else, DeadlineException is returned."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name description of Deadline task"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param start gives the dateTime of the start to check whether they are in the correct format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param end gives the dateTime of the end to check whether they are in the correct format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return deadline if the dateTime is in the correct format"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DeadlineException if the dateTime is in the incorrect format"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private static Event provide(String name, String start, String end) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Event e;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate startDate \u003d stringToLocalDate(start); //converts start to date"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            LocalDate endDate \u003d stringToLocalDate(end); //converts end to date"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(startDate.isAfter(endDate)){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new EventException(false, false, true, false, false); //if start \u003e end then it throws this error."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            e \u003d new Event(name, startDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    endDate.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (EventException event){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new EventException(false, false, true, false, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (DateTimeException d) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                LocalDateTime startDateTime \u003d stringToLocalDateTime(start);//converts start to dateTime"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                LocalDateTime endDateTime \u003d stringToLocalDateTime(end);//converts end to dateTime"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                if(startDateTime.isAfter(endDateTime)){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new EventException(false, false, true, false, false); //if start \u003e end it throws this error"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                e \u003d new Event(name, startDateTime.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy, HH:mm\")),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        endDateTime.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy, HH:mm\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (EventException event){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new EventException(false, false, true, false, false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            catch (DateTimeException g) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    LocalTime parsedDate \u003d stringToLocalTime(start);//converts start to time"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    LocalTime endDate \u003d stringToLocalTime(end);//converts end to time"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if(parsedDate.isAfter(endDate)){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        throw new EventException(false, false, true, false, false);//if start \u003e end it throws error"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    e \u003d new Event(name, parsedDate.format(DateTimeFormatter.ofPattern(\"HH:mm\")),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                            endDate.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }catch (EventException y){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new EventException(false, false, true, false, false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }catch (DateTimeException z) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    throw new EventException(false, false, false, true, false);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 167
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles case when exit is the keyword"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * assigns string to a value of string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ExitCommand(String string) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives the exit message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String of exit message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String exitMessage(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Prints bye message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks no change made"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage no change made"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the exit action has been complete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException not thrown"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(exitMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return exitMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns true to exit program"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true to exit program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 51
    }
  },
  {
    "path": "src/main/java/Duke/Commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FindException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * used to handle case where find is keyword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns string to a value of string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FindCommand(String string) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Finds the tasks which contains keyword in string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to look for the task\u0027s string value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage no need"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the find action is successful."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException used to throw error when no words mentioned after find or the keyword is not present in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(wordsToFindAbsent()){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FindException(false, true, \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String find \u003d commandDescription.substring(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String[] strings \u003d find.split(\" \", -2); // keywords split into different Strings"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            setTasks(strings, tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(this.tasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new FindException(true, false, find);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return findMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * sets the Tasks list here with Tasks containing key words."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param strings contains String of key words"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks contains all the current tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void setTasks(String[] strings, TaskList tasks){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        List\u003cTask\u003e allTasks \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d allTasks.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String string \u003d task.getName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String[] comp \u003d string.split(\" \", -2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean contains \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            for(int j \u003d 0; j \u003c strings.length; j++){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String s \u003d strings[j];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                for(int k \u003d 0; k \u003c comp.length; k++){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if(comp[k].equals(s)){ //checks whether Task name/description contains keywords given by user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        contains \u003d true;  //then assigns contains true if that is the case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(contains) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                this.tasks.add(task); //if contains is true, Task is added to ArrayList of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String findMessage() throws FindException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"  Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c this.tasks.size(); i++){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Task task \u003d this.tasks.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            System.out.println(\"  \" + (i + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + \"\\n\" + \"  \" + (i + 1) + \".\" + task.toString(); // concatenates all the Task present in tasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean wordsToFindAbsent(){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.length() \u003d\u003d 4 || commandDescription.length() \u003d\u003d 5;  //since keywords present after length of 5"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 98
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * used to handle case when list is the keyword"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns string to a value of string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ListCommand(String string) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Lists all the tasks that are currently present in the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to access the list and print them"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the action has been complete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return listMessage(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives the message when list is called."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks gives the current list, which is used to return current list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return all the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String listMessage(TaskList tasks){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.getAllTasks().size(); i++){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            System.out.println(\"  \" + tasks.getAllTasks().get(i)); // concatenates all the string representation of Tasks TaskList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            s \u003d s + \"\\n\" + \"  \" + tasks.getAllTasks().get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 49
    }
  },
  {
    "path": "src/main/java/Duke/Commands/RandomCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.WrongInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * handles case where a random word is being input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns string to a value of string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public RandomCommand(String string) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives wrong input exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the action has been complete."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws WrongInputException is thrown"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws WrongInputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        throw new WrongInputException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 34
    }
  },
  {
    "path": "src/main/java/Duke/Commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.TodoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * has the method if ToDo is keyword deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TodoCommand extends AddCommand{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns string to a value of string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string assigns string to this this.string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TodoCommand(String string) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Adds deadline into a task list in TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks to change the taskList if necessary"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param storage to change the file in the if necessary"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String returns the string of the output that informs the action has been complete."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException whenever there is an error, no"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isDescriptionAbsent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new TodoException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ToDo t \u003d new ToDo(todoDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return updateTaskList(storage, t, tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }catch (IOException i){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new FileAbsentException(storage.getFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * checks whether the commandDescription contains the description"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return true if description absent and false otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDescriptionAbsent(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.length() \u003d\u003d 4 || commandDescription.length() \u003d\u003d 5; //since if the description is absent length is only 4 or 5"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns the name of the task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return name of task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String todoDescription(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return commandDescription.substring(5);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 68
    }
  },
  {
    "path": "src/main/java/Duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives the DialogBox of the user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param text input by the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param img user image"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return DialogBox of user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives the DialogBox of Duke"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param text input by duke in response to the input given by user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param img Duke image"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return DialogBox of Duke"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        db.flip(); //to have a Duke appear on different side"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 75
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Helpers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This Duke class is the main class that prints out the relevant outputs by including all the subclasses of Task and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * taking in the input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Duke(){}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns the above member variables with the appropriate values, and throws certain exceptions if file in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * the filePath mentioned is empty or absent"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param filePath represents where the filepath of where the file may exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Duke(String filePath, String input){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            ui \u003d new Ui(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This gives the boolean value of isExit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns the value of isExit."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This gives the respective output based on the input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param inputs what the user inputs in the GUI, can be multiple inputs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the output based on the output."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getResponse(String... inputs)  {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String input \u003d inputs[i];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                output \u003d output + \"\\n\" + (i + 1) + \". \" + c.execute(tasks, new Ui(), storage); //concatenates output message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                output \u003d output + \"\\n\" + (i + 1) + \". \" + e.getMessage();//concatenates error message"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return output.substring(1); //returns String"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives main logic of the App,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * where exceptions are caught and printed and if bye is there code stops. also starts with hello"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                isExit \u003d c.isExit(); //if true exits program as bye is mentioned"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param args of type String[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * reads input using scan() and adds it to todos."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  Then, prints out relevant information using the output() func."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Duke duke \u003d new Duke(\"src/main/java/tasks.txt\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        //String s \u003d duke.getResponse(\"ToDo read book\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        /*PrintStream fileOut \u003d new PrintStream(\"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.setOut(fileOut);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"src/main/java/tasks.txt\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Duke duke \u003d new Duke(\"src/main/java/tasks.txt\", \"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        duke.run();*/"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 117
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DeadlineException is used to print out exceptions when there is an incomplete input where wither the description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeadlineException extends DukeException{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * descriptionPresent tests shows whether the description is present in the input of the user or not."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If description is not present it is true, else it is false"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDescriptionAbsent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDateTimeFormatWrong;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDateTimeAbsent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor for deadline exception that assigns description and format values"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDescriptionAbsent true if description absent"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDateTimeFormatWrong true if format is wrong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDateTimeAbsent true if date and time are absent."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeadlineException(boolean isDescriptionAbsent, boolean isDateTimeFormatWrong, boolean isDateTimeAbsent){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isDescriptionAbsent \u003d isDescriptionAbsent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isDateTimeFormatWrong \u003d isDateTimeFormatWrong;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isDateTimeAbsent \u003d isDateTimeAbsent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description is empty if descriptionAbsent is true. Else, it tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * whether the format is wrong, if it then a string describing it would be returned. If isDateTimeAbsent is true then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * date time for deadline is absent and a String describing it would be returned. Else then default returns which"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * should not occur."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.isDescriptionAbsent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return descriptionAbsent(); //when descriptionAbsent"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if(this.isDateTimeFormatWrong) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return dateTimeFormatWrong(); //when dateTimeFormat is wrong"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if(this.isDateTimeAbsent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return dateTimeAbsent(); //when dateTime is absent"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns String on condition where description for Deadline is absent"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing user that the description for Deadline is absent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String descriptionAbsent(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns String on condition where format for date and/or time format for Deadline is wrong"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing user format for date and/or time format for Deadline is wrong"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dateTimeFormatWrong(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The formats of date and/ or include \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"yyyy MM dd/ yyyy MM dd, HH:mm/ HH:mm\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns String on condition where date and/or time for Deadline is absent"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing user that the date and/or time for Deadline is absent"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dateTimeAbsent(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The specific date/time of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 77
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DeleteException is used to print out exceptions when there is an incomplete input where the ID is absent or the ID"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * of that Task hasn\u0027t been defined yet or it has previously been deleted."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DeleteException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * IDabsent tests shows whether the ID is present in the input of the user or not."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If ID is not present it is true, else it is false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * deleted checks whether the task was previously deleted, if deleted it is true else false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isIDAbsent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNotIDDefined;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor that assigns tne 2 variables its respective values"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isIDabsent     input, true if ID is input my reader, false otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isNOtIDDefined input, true if ID \u003e number of tasks present, false otherwise."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DeleteException(boolean isIDabsent, boolean isNOtIDDefined) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isIDAbsent \u003d isIDabsent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isNotIDDefined \u003d isNOtIDDefined;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method, for printing in getMessage()."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string depending on the scenario. If the IDAbsent is true, then description that the description of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * delete cannot be empty. Else if isDefined is true then String returning that ID is not defined is returned. Else,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * default is returned which should not occur."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (isIDAbsent) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return iDAbsent(); //when ID is not input by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (isNotIDDefined) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return iDNotDefined(); //when ID is not defined yet"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns on condition when user didn\u0027t mention the task ID to delete"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing user that ID of task to be deleted is not mentioned"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String iDAbsent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of delete cannot be empty.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns on condition when the ID is more than the number of tasks present"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informing user that ID of task to be deleted is not defined yet."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String iDNotDefined() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The ID is not yet defined.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 62
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This DoneException is used to print out exceptions when there is an incomplete input where the ID is absent or the ID"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * of that Task hasnt been defined yet."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DoneException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * IDabsent tests shows whether the ID is present in the input of the user or not."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If ID is not present it is true, else it is false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isIDAbsent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isNotIDDefined;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor that assigns tne 2 variables its respective values"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isIDabsent input, depending on whether the ID is present or not in the input.txt file. If present it is false"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *   else it is true."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isNOtIDDefined input, true if ID \u003e number of tasks present, false otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public DoneException(boolean isIDabsent, boolean isNOtIDDefined){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isIDAbsent \u003d isIDabsent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isNotIDDefined \u003d isNOtIDDefined;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string depending on the scenario. If the IDabsent is true, then description that the description of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * done cannot be empty.Else if isDefined is true then String returning that ID is not defined is returned. Else,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *  default is returned which should not occur."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(isIDAbsent){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return iDAbsent(); //when ID is absent"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(isNotIDDefined){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return iDNotDefined(); //when ID is not defined"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when iD is not given by user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that description of done(a number) cannot be empty"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String iDAbsent(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of done cannot be empty.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when ID input by user is not defined yet"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that ID is not defined."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String iDNotDefined(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The ID is not yet defined.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 61
    }
  },
  {
    "path": "src/main/java/Duke/Errors/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * this is a DukeException class which is the parents class of all the other exceptions in this package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * this is never intiilized and therefore is an abstract class and used for polymorphism."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * overrides getMessage of an error"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return string of the exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 17
    }
  },
  {
    "path": "src/main/java/Duke/Errors/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This EventException is used to print out exceptions when there is an incomplete input where whether the description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * description tests shows whether the description is present in the input of the user or not."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If description is not present it is true, else it is false"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDescriptionAbsent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isEndTimeAbsent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isStartAfterEnd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDateTimeWrongFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isStartDateTimeEmpty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDescriptionAbsent input, depending on whether the description is given by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isEndTimeAbsent is true when the user has no input for end time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isStartAfterEnd is true when the start time is after end time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDateTimeWrongFormat is true when date and/or time is input in wrong format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isStartDateTimeEmpty is true when date abd/or time is input in wrong format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public EventException(boolean isDescriptionAbsent, boolean isEndTimeAbsent, boolean isStartAfterEnd,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                          boolean isDateTimeWrongFormat, boolean isStartDateTimeEmpty){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isDescriptionAbsent \u003d isDescriptionAbsent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isEndTimeAbsent \u003d isEndTimeAbsent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isStartAfterEnd \u003d isStartAfterEnd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isDateTimeWrongFormat \u003d isDateTimeWrongFormat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isStartDateTimeEmpty \u003d isStartDateTimeEmpty;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description is empty if description is true."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * If isEndTimeAbsent is absent is true, end time is absent and then a description mentioning this would be returned."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Else, if isStartAfterEnd is true, start would be more than end then a description describing this would be printed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Else if ifDateWrongFormat is true, then the date is in wrong format and a description describing it would be printed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Else if isDateEmpty is true, then String giving that is returned."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Else default is returned."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.isDescriptionAbsent){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return descriptionAbsent(); //when description is not given by user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(this.isEndTimeAbsent) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return endTimeAbsent(); //when end time is not given by user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(this.isStartAfterEnd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return startAfterEnd(); //when start is after end"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(this.isDateTimeWrongFormat) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return dateTimeWrongFormat(); //when date is given in wrong format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(this.isStartDateTimeEmpty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return startDateTimeEmpty(); //when start date and/or time is absent"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when description of Event is absent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that description of Event is absent."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String descriptionAbsent() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of an Event cannot be empty.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when endTime is not given by user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying end time is not given by user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String endTimeAbsent() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return  \"  \u0027\\u2639\u0027 OOPS!!! There should be 2 occurrences of date and/or time values.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when start time is more than end"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that start \u003c end"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String startAfterEnd() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! Start should be less than end.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when date and/or time is in wrong format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that date and/or time is in wrong format and the format it should be in"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dateTimeWrongFormat() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! Start and should be of the same format. The formats include \" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"yyyy MM dd/ yyyy MM dd, HH:mm/ HH:mm\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when start date and/or time is empty"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that start date and/or time is absent"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String startDateTimeEmpty(){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The specific date and/or time of an Event cannot be empty.\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 105
    }
  },
  {
    "path": "src/main/java/Duke/Errors/FIleEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This exception is thrown when the file is empty"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FIleEmptyException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * this overrides the toString() method"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a String representation of FileEmptyException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return fileEmpty(); //when file is empty"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when file is empty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return informs user that file is empty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String fileEmpty(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  Task file is empty!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 26
    }
  },
  {
    "path": "src/main/java/Duke/Errors/FileAbsentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This exception is thrown whenever there is a file absent at a specific path mentioned in the filePath"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FileAbsentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String isFilePathAbsent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This assigns filePath variable to a value"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isFilePathAbsent the value assigned to filePath"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FileAbsentException(String isFilePathAbsent){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isFilePathAbsent \u003d isFilePathAbsent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This overrides the toString() method"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a String for the exception is printed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return fileAbsent(); //when file is absent"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when file is not present"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String saying that file is absent."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String fileAbsent(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  The file in this directory \" + this.isFilePathAbsent + \" is absent!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 36
    }
  },
  {
    "path": "src/main/java/Duke/Errors/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The class FindException deals with what happens when an error occurs for task with find keyword"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean noMatches;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean isDescriptionAbsent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns values of description and string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDescriptionAbsent value is assigned to this.description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param description value is assigned to this.string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public FindException(boolean noMatches, boolean isDescriptionAbsent,  String description){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.noMatches \u003d noMatches;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.isDescriptionAbsent \u003d isDescriptionAbsent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * overrides the toString() method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return if description is present error is due to no matches being present and an error message informing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * them would be printed. If it is not present than error is due to keywords being absent therefore an error"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * message regarding that would be released."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(noMatches){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return noMatches(); //when there are no matches"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if(isDescriptionAbsent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return descriptionAbsent(); //when description is absent"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when there are no matches for the keywords given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String that there are no matches to the keywords given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String noMatches(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  there are no matches to your keyword: \" + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when there are no keywords given by user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String that the keywords are absent."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String descriptionAbsent(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  description of find cannot be empty!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 58
    }
  },
  {
    "path": "src/main/java/Duke/Errors/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This TodoException is used to print out exceptions when there is an incomplete input where whether the description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * or date is absent."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TodoException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * doesn\u0027t take in any arguments, overrides the in-built toString() method."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return returns a string informing that the description of the ToDo is absent as it cant be."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return descriptionAbsent(); //when description is absent"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns when description is absent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String informign user that the description of ToDo cannot be empty."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String descriptionAbsent(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639\u0027 OOPS!!! The description of a ToDo cannot be empty\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 26
    }
  },
  {
    "path": "src/main/java/Duke/Errors/WrongInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This prints the exception when a wrong word is being input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class WrongInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This takes not args and overrides the toString() method"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return a string that describes the error that took place which is that an invalid string has been inserted"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return wrongInputString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * returns when user gives something Duke doesn\u0027t understand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String that the user has mentioned something that the Duke cannot understand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String wrongInputString(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"  \u0027\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 24
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This is a Parser class that determines which command operation to choose, which in turn determines"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * the action to be taken."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns a Command, depending on the string being input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param string where the first words determines command to be returned"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return Command is returned based on the first word of param string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static Command parse(String string)  {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert !string.contains(\",\");//to ensure that no , appears when multiple inputs are given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (string.length() \u003e\u003d 3 \u0026\u0026 string.equals(\"bye\")) { //represents ExitCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new ExitCommand(string);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.equals(\"list\")) { //represents ListCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new ListCommand(string);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 6 \u0026\u0026 string.substring(0, 6).equals(\"delete\")) { //represents deleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new DeleteCommand(string);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"done\")) { //represents doneCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new DoneCommand(string);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"todo\")) { //represents ToDoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new TodoCommand(string);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 5 \u0026\u0026 string.substring(0, 5).equals(\"event\")) { //represents EventCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new EventCommand(string);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 8 \u0026\u0026 string.substring(0, 8).equals(\"deadline\")) { //represents DeadlineCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new DeadlineCommand(string);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else if (string.length() \u003e\u003d 4 \u0026\u0026 string.substring(0, 4).equals(\"find\")) { //represents FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new FindCommand(string);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } else { //rest are RandomCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return new RandomCommand(string);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 38
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FIleEmptyException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Constructor assigns filePath to filePath"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param filePath assigns this value to variable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Storage(String filePath){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Converts the string form of tasks on the file to Task objects"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the List of tasks containing Task instead of String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @throws DukeException when a file with FilePath doesnt exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        assert f.exists(); //file should exist to keep track of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(sc.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                do{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    char bool \u003d input.charAt(4); //gives the char of 1 or 0 as it is always present at index 4"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    boolean isDone \u003d (bool \u003d\u003d \u00271\u0027); //since 1 indicates done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    if(input.charAt(0) \u003d\u003d \u0027T\u0027){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        ToDo todoPresent \u003d todoPresent(input, isDone);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        tasks.add(todoPresent);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }else if(input.charAt(0) \u003d\u003d \u0027E\u0027){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        Event eventPresent \u003d eventPresent(input, isDone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        tasks.add(eventPresent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }else if(input.charAt(0) \u003d\u003d \u0027D\u0027){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        Deadline deadlinePresent \u003d deadlinePresent(input, isDone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                        tasks.add(deadlinePresent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                } while (sc.hasNextLine());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(tasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                throw new FIleEmptyException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException error){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(this.filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns ToDo task for that present in the list in storage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param input string from the file in storage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDone boolean of whether task is completed or not. True if completed and false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return ToDo task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private ToDo todoPresent(String input, boolean isDone){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new ToDo(input.substring(8), isDone); // since the string after index 8"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns Event task for that present in list in storage"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param input string from file in storage"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDone boolean of whether task is completed or not. True if completed and false otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return Event task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Event eventPresent(String input, boolean isDone){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String string \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 8; i \u003c input.length(); i++){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(input.charAt(i) \u003d\u003d \u0027|\u0027){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            string \u003d string + input.charAt(i); //character \"|\" splits the description of event and time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String another \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d index + 2; i \u003c input.length(); i++){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(input.charAt(i) \u003d\u003d \u0027-\u0027){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            another \u003d another + input.charAt(i); // character \"-\" separates the start and end time."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Event(string, isDone, another, input.substring(index + 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns Deadline task for that present in list in storage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param input string from file in storage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param isDone boolean of whether task is completed or not. True if completed and false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return Deadline task"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Deadline deadlinePresent(String input, boolean isDone){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String string \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        for(int i \u003d 8; i \u003c input.length(); i++){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(input.charAt(i) \u003d\u003d \u0027|\u0027){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            string \u003d string + input.charAt(i); //line \u0027|\u0027 splits the description of deadline and time."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return new Deadline(string, isDone, input.substring(index + 2));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives the filePath"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the value of filePath"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 137
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * contains the task list e.g., it has operations to add/delete tasks in the list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private List\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns allTasks a value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param tasks assings the mem var a value of allTasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.allTasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * another constructor, where the allTasks variable is just empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Returns the List\u003cTask\u003e value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the List\u003cTask\u003e value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public List\u003cTask\u003e getAllTasks(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 37
    }
  },
  {
    "path": "src/main/java/Duke/Helpers/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import Duke.Errors.FileAbsentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * deals with interactions with the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        sc \u003d  new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Ui(String file) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            sc \u003d new Scanner(new File(file));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (FileNotFoundException f){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            throw new FileAbsentException(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This prints out if there is an error when tasks are loaded"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param d this is the error that is thrown whose string message gets printed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showLoadingError(DukeException d){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * prints welcome message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \"  Hello! I\u0027m Duke\\n\" + \"  What can I do for you?\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This prints the ____ for easier readability"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(\"  ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * This prints the next line of code to execute if it exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string of command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(sc.hasNextLine()){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Prints out the error"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param s s is the error that is printed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void showError(String s){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 72
    }
  },
  {
    "path": "src/main/java/Duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Launches the GUI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 16
    }
  },
  {
    "path": "src/main/java/Duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Duke duke \u003d new Duke(\"src/main/java/tasks.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Implements the abstract start method in Application class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param stage it is to show the main screen"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(duke.isExit()){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            MainWindow ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke, stage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 38
    }
  },
  {
    "path": "src/main/java/Duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * Controller for Duke.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private TextField display;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean intro \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Initializes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Also ensures that the getDukeDialog prints hello when opened"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param d assigns duke value of d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param stage assigns stage value of stage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setDuke(Duke d, Stage stage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(\"Hello\", dukeImage)); //Introduction given by Duke"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(duke.isExit()){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            stage.close(); //since bye message is given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String input \u003d userInput.getText(); //input can be multiple input separated by \u0027,\u0027 sign"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String[] inputs \u003d input.split(\", \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        String response \u003d duke.getResponse(inputs); //response given by duke"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),//user input displayed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage) //Duke input displayed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 71
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The deadline is a subclass of Task and it is used to describe tasks that has to be completed by a specific day."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String day \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns the name and day values"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param day assigns this.day to day value"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Deadline(String name, String day) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns the nam, done and day values"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name argument in super class constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done argument in super class constructor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param day assigns to this.day"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Deadline(String name, boolean done, String day) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Takes no arguments and overrides the toString method"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for deadline class as mentioned with [D] indicating that it is a deadline class"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * and also mentions the deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + this.day + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives a specific string representation for that in the tasks.txt file and overrides that in Task to make"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * it unique to that for Deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"D\" + super.inputListFormat() + \" | \" + this.day; //format of Tasks to appear in file in Storage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 51
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The Event is a subclass of Task and it is used to describe tasks that has to be completed by a specific day and time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Initializes the Event class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param dateTime assigns this.dayTime to dayTime value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Event(String name, String dateTime, String end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns the nam, done and day values"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name argument in super class constructor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done argument in super class constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public Event(String name, boolean done, String dateTime, String end) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Overrides the toString methods"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for Event class as mentioned with [E] indicating that it is a Event class"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *      * and also mentions the Event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + this.dateTime +  \"-\" + this.end + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives a specific string representation for that in the tasks.txt file and overrides that in Task to make"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * it unique to that for Event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"E\" + super.inputListFormat() + \" | \" + this.dateTime + \"-\" + this.end; //format of Tasks to appear in file in Storage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 53
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * This Task is made abstract because it is never intialized in the actual code, however, it is used so that polymorphism"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * is able to work properly."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Tasks is made static because it contains the different tasks that are added, and therefore it is not limited to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * a single instance of Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns name variable a value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name this assigns the name of the Task to the name being given in the constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * constructor assigns name and done a value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name assigns name to this.name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done assigns name to this.done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    Task(String name, boolean done){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        tasks.add(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * gives name of task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return name of task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * setter that sets Done to the done value stated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done value given to set it to done var"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Overrides the toString methods"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return String which contains info on task name as well as whether it is completed(tick sign) or not(cross sign)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if (this.done) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"[\" + \"\\u2713\" + \"] \" + this.name; //\\u2713 is a tick, denoting done"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(!this.done) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"[\" + \"\\u2717\" + \"] \" + this.name; //\\u2717 is a cross, deonoting not done"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives a specific string representation for that in the tasks.txt file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat(){    //format of Tasks to appear in file in Storage"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(this.done){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \" | 1 | \" + this.name; //1 denotes done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else if(!this.done) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \" | 0 | \" + this.name; //0 denotes not done"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            return \"default\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 87
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": " * The ToDo is a subclass of Task and it is used to describe tasks that have no specific deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns name to name value"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name super(name) so that it does whatever is mentioned in the parent class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Assigns name and done to values"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param name assigns name to this.name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @param done assigns done to this.done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public ToDo(String name, boolean done){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Takes no arguments and overrides the toString method"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the specific representation for ToDo class as mentioned with [T] indicating that it is a ToDo class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * Gives a specific string representation for that in the tasks.txt file and overrides that in Task to make"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * it unique to that for ToDo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     * @return the string representation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public String inputListFormat(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return \"T\" + super.inputListFormat(); //format of Tasks to appear in file in Storage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 46
    }
  },
  {
    "path": "src/main/java/expected.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Task file is empty!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  What can I do for you?"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [T][✗] buy book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   [T][✓] buy book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! The ID is not yet defined."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[T][✓] buy book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "[D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 57
    }
  },
  {
    "path": "src/main/java/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event concert /at 12:00-10:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "todo buy book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event book club /at 12:00-10:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "deadline submission /by 2020 11 14"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "itssodium": 9
    }
  },
  {
    "path": "src/main/java/output.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "Task file is empty!"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  What can I do for you?"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [T][✗] buy book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "   [T][✓] buy book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! Start should be less than end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹\u0027 OOPS!!! The ID is not yet defined."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [T][✓] buy book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  [D][✗] submission(by: 14 Nov 2020)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  \u0027☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ____________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "itssodium": 57
    }
  },
  {
    "path": "src/main/java/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 1 | buy book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "D | 1 | submission   | 14 Nov 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "T | 0 | read book"
      }
    ],
    "authorContributionMap": {
      "itssodium": 8
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"  minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "itssodium": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import Duke.MainWindow?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003cMainWindow maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"Duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cTextField fx:id\u003d\"display\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "\u003c/MainWindow\u003e"
      }
    ],
    "authorContributionMap": {
      "itssodium": 20
    }
  },
  {
    "path": "src/test/java/Duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static boolean equal(String s1, String s2) throws FileNotFoundException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        File exp \u003d new File(s1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        File act \u003d new File(s2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Scanner e \u003d new Scanner(exp);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        Scanner a \u003d new Scanner(act);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        boolean equal \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        while(e.hasNext() \u0026\u0026 a.hasNext()){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if(!e.next().equals(a.next())){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                equal \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        if(equal) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (e.hasNext() \u0026\u0026 !a.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                equal \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            if (!e.hasNext() \u0026\u0026 a.hasNext()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                equal \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        return equal;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void Test1()  {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/expected.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.write(\"Task file is empty!\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            String[] args \u003d new String[2];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Duke.main(args);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean equal \u003d equal(\"src/main/java/expected.txt\", \"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            assertTrue(equal);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException f){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void Test2()  {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"Event book club /at 12:00-14:00\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"ToDo read book\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"deadline submission /by 2019 12 12\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"done 1\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"delete 4\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"list\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.append(\"bye\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/expected.txt\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.write(\"Task file is empty!\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [E][✗] book club(at: 12:00-14:00)\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 1 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [T][✗] read book\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 2 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [D][✗] submission(by: 12 Dec 2019)\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 3 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   [E][✓] book club(at: 12:00-14:00)\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! The ID is not yet defined.\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[E][✓] book club(at: 12:00-14:00)\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[T][✗] read book\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[D][✗] submission(by: 12 Dec 2019)\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "itssodium"
        },
        "content": "             Duke.main(new String[10]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean equal \u003d equal(\"src/main/java/expected.txt\", \"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            assertTrue(equal);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException f){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public void Test3(){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"src/main/java/input.txt\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/expected.txt\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.write(\"Event concert /at 12:00-10:00\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"ToDo buy book\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"done 1\\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"Event book club /at 12:00-10:00\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"delete 2\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"deadline submission /by 2020 11 14\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"list\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"blah\\n\" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                 \"bye\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.write(\"Task file is empty!\\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! Start should be less than end.\\n\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [T][✗] buy book\\n\" +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 1 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"   [T][✓] buy book\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! Start should be less than end.\\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹\u0027 OOPS!!! The ID is not yet defined.\\n\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  [D][✗] submission(by: 14 Nov 2020)\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Now you have 2 tasks in the list.\\n\" +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[T][✓] buy book\\n\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"[D][✗] submission(by: 14 Nov 2020)\\n\" +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  \u0027☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"  ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "itssodium"
        },
        "content": "                    \"\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            Duke.main(new String[10]);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            boolean equal \u003d equal(\"src/main/java/expected.txt\", \"src/main/java/output.txt\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "itssodium"
        },
        "content": "            assertTrue(equal);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }catch (IOException f){"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "itssodium"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "itssodium"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "itssodium"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "itssodium": 218
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "event book club /at 12:00-14:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "deadline submission /by 2019 12 12"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "itssodium": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "  )"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "itssodium"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "itssodium": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/event.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Tasks/todo.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/DeleteCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/ListCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/Command.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/AddCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/ExitCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Commands/DoneCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/EventException.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/FileAbsentException.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/FIleEmptyException.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DeadlineException.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DeleteException.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DoneException.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/TodoException.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/WrongInputException.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Errors/DukeException.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/TaskList.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/Storage.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/Parser.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "itssodium"
        },
        "content": "../src/main/java/Duke/Helpers/Ui.java"
      }
    ],
    "authorContributionMap": {
      "itssodium": 24
    }
  }
]
