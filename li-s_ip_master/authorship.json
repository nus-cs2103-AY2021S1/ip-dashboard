[
  {
    "path": "src/main/java/DataHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DataHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static void saveTask(String pathName, ArrayList\u003cTask\u003e data) throws IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // If no save file, create one"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!Files.exists(Paths.get(pathName))) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Files.createFile(Paths.get(pathName));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Write to save file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FileWriter fs \u003d new FileWriter(pathName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (Task i : data) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "            fs.write(i.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "        fs.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static ArrayList\u003cTask\u003e loadTask(String pathName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        File f \u003d new File(pathName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Loads the input from the file, if no file, return empty arraylist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Scanner input \u003d new Scanner(f);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "            while (input.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String newTask \u003d input.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Get type of task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "                char taskType \u003d newTask.charAt(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Check if the task is done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "                boolean isDone \u003d newTask.contains(\"âœ“\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Format the string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "                newTask \u003d newTask.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "                newTask \u003d newTask.replace(\"(\", \"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "                newTask \u003d newTask.replaceAll(\"[:)]\", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Add the tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String[] description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \u0027T\u0027:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        tasks.add(new ToDo(newTask, isDone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \u0027D\u0027:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        description \u003d Duke.stringSplit(newTask, \"/by\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        tasks.add(new Deadline(description[0], isDone, LocalDate.parse(description[1])));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \u0027E\u0027:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        description \u003d Duke.stringSplit(newTask, \"/at\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        tasks.add(new Event(description[0], isDone, LocalDate.parse(description[1])));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 69
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false, by);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Deadline(String description, boolean isDone, LocalDate by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Return updated task of subtype: Deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new Deadline with updated status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new Deadline(super.description, isDone, by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 31
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String LINEDIVIDER \u003d \"\\t____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static final String SAVEPATH \u003d \"./src/main/data/SaveData.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static enum AcceptedCommands {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        CLEAR,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        respondPicker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Prints out the greeting"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void greet() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        prettyPrint(\"Hello! I\u0027m Duke\\n\\tWhat can I do for you?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Driver method to respond to user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void respondPicker() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArrayList\u003cTask\u003e userInputCollector \u003d DataHandler.loadTask(SAVEPATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "            Task taskToUpdate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "            String[] userInputArray;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "            // Splits input to command, content"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "            userInputArray \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Catch illegal commands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkIllegalArgument(userInputArray[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Catch missing content"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkMissingArgument(userInputArray);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Check indexing out of bounds"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "                checkExistingTask(userInputArray, userInputCollector.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // Decide the actions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String[] description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "                switch (userInputArray[0]) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        prettyPrint(userInputCollector);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"done\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        taskToUpdate \u003d userInputCollector.get(Integer.parseInt(userInput.split(\" \", 2)[1])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        Task updatedTask \u003d taskToUpdate.updateStatus(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        userInputCollector.set(userInputCollector.indexOf(taskToUpdate), updatedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        prettyPrint(\"Nice! I\u0027ve marked this task as done: \\n\" + \"\\t\" + updatedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        taskToUpdate \u003d new ToDo(userInputArray[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        userInputCollector.add(taskToUpdate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        prettyPrint(\"Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\t\" + taskToUpdate + \"\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\tNow you have \" + userInputCollector.size() +\" tasks in the list.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        description \u003d stringSplit(userInputArray[1], \"/at\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        taskToUpdate \u003d new Event(description[0], LocalDate.parse(description[1]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        userInputCollector.add(taskToUpdate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        prettyPrint(\"Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\t\" + taskToUpdate + \"\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\tNow you have \" + userInputCollector.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        description \u003d stringSplit(userInputArray[1], \"/by\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        taskToUpdate \u003d new Deadline(description[0], LocalDate.parse(description[1]));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        userInputCollector.add(taskToUpdate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        prettyPrint(\"Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\t\" + taskToUpdate + \"\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\tNow you have \" + userInputCollector.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        taskToUpdate \u003d userInputCollector.get(Integer.parseInt(userInputArray[1]) - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        userInputCollector.remove(taskToUpdate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        prettyPrint(\"Noted. I\u0027ve removed this task: \\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\t\" + taskToUpdate + \"\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "                                \"\\tNow you have \" + userInputCollector.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "li-s"
        },
        "content": "                    case \"clear\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        System.out.println(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "li-s"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // ToDo: handle localDate parse error"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "li-s"
        },
        "content": "                // ToDo: stretch goal level-8"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": "            } catch (DukeIllegalCommandException | DukeMissingArgumentException | DukeTaskOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "li-s"
        },
        "content": "                System.out.println(e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "li-s"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "li-s"
        },
        "content": "                DataHandler.saveTask(SAVEPATH, userInputCollector);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "li-s"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "li-s"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "li-s"
        },
        "content": "            // Gets the new input"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "li-s"
        },
        "content": "            userInput \u003d scan.nextLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "li-s"
        },
        "content": "        prettyPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static String[] stringSplit(String toSplit, String split) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String description \u003d toSplit.split(split)[0];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new String[]{description.substring(0, description.length() - 1),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "li-s"
        },
        "content": "                toSplit.split(split)[1].substring(1)};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Check if command user input is valid"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkIllegalArgument(String command) throws DukeIllegalCommandException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (AcceptedCommands i : AcceptedCommands.values()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if (command.equalsIgnoreCase(i.name())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "li-s"
        },
        "content": "        throw new DukeIllegalCommandException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Check if command of user missing arguments"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkMissingArgument(String[] command) throws DukeMissingArgumentException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!(command[0].equalsIgnoreCase(AcceptedCommands.LIST.name())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command[0].equalsIgnoreCase(AcceptedCommands.BYE.name())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command[0].equalsIgnoreCase(AcceptedCommands.CLEAR.name()))"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "li-s"
        },
        "content": "                        \u0026\u0026 (command.length \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new DukeMissingArgumentException(command[0]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Check if trying to access Tasks index out of the list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void checkExistingTask(String[] command, int max) throws DukeTaskOutOfBoundsException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if ((command[0].equalsIgnoreCase(AcceptedCommands.DONE.name()))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || command[0].equalsIgnoreCase(AcceptedCommands.DELETE.name())) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if ((Integer.parseInt(command[1]) \u003c 1) || (Integer.parseInt(command[1]) \u003e\u003d (max + 1))) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "li-s"
        },
        "content": "                throw new DukeTaskOutOfBoundsException(command[0]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Prints the given string with additional wrappings"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param string String to print"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void prettyPrint(String string) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "li-s"
        },
        "content": "        System.out.println(LINEDIVIDER + \"\\t\" + string + \"\\n\" + LINEDIVIDER);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Prints the given array list with additional effects"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param array Array of strings to print"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static void prettyPrint(ArrayList array) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "li-s"
        },
        "content": "        System.out.println(LINEDIVIDER + \"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "li-s"
        },
        "content": "        for (int i \u003d 0; i \u003c array.size(); i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "li-s"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \".\" + array.get(i));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "li-s"
        },
        "content": "        System.out.println(LINEDIVIDER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 171,
      "-": 10
    }
  },
  {
    "path": "src/main/java/DukeIllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DukeIllegalCommandException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"\\t____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \"\\tâ˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 8
    }
  },
  {
    "path": "src/main/java/DukeMissingArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DukeMissingArgumentException extends ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final String DESCRIPTION;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "    DukeMissingArgumentException(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.DESCRIPTION \u003d description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"\\t____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \"\\tâ˜¹ OOPS!!! The description of \" + DESCRIPTION +\" cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 14
    }
  },
  {
    "path": "src/main/java/DukeTaskOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class DukeTaskOutOfBoundsException extends IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final String DESCRIPTION;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "    DukeTaskOutOfBoundsException(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.DESCRIPTION \u003d description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"\\t____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \"\\tâ˜¹ OOPS!!! The task to mark as \" + DESCRIPTION + \" does not exist.\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 14
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private LocalDate at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false, at);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Event(String description, boolean isDone, LocalDate at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Return updated task of subtype: Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new Event with updated status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new Event(super.description, isDone, at);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 31
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "// Group each action the user input as a task, with the description and status if the task is done"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Get status icon for the current task, tick \u003d done, cross \u003d no done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Return updated task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new task with updated status"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new Task(description, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    // Print the status of the task before the task description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 35
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ToDo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Return updated task of subtype: ToDo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param isDone New status for the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return new ToDo with updated status"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Task updateStatus(boolean isDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new ToDo(super.description, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "Walk the dog"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": "todo running"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "event swimming /at sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "deadline do tests /by wednesday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "li-s": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "li-s": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "-": 37
    }
  }
]
