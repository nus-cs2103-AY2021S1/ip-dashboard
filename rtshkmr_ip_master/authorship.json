[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \"6.0.0\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    testImplementation(platform(\u0027org.junit:junit-bom:5.6.2\u0027))"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//    java FX dependencies:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 21,
      "-": 43
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.TextUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Drives the personal assistant using a UI, along with a parser to make sense of user inputs and executing commands on"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * a list of tasks that are read/written from local storage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Duke extends Thread {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean canExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates UI and loads saved tasks from hard drive along with Duke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // save location has been hardcoded into Storage class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Runtime currentRuntime \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.ui \u003d new TextUi();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.canExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.tasks \u003d Storage.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        currentRuntime.addShutdownHook(new Thread(() -\u003e { // lambda used for anon-class"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Storage.save(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.ui.bidFarewell();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Starts the application, invokes UI interaction and execution of Commands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are issues with reading/writing onto file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void runDuke() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.ui.greet();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (!canExit) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String userInput \u003d this.ui.readCommand(sc);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Command command \u003d parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                command.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.canExit \u003d command.isExit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.ui.displayError(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getResponse(String rawUserInput) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Command command \u003d parser.parseCommand(rawUserInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return command.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        new Duke().runDuke();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/*  Todo: 1. sanitise user input: all lowercase.."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "          2."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 77,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Launcher class for JavaFX Application"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.controller.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load(); // AnchorPane is a node within the fxml file, so loads that node"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Scene scene \u003d new Scene(ap); // place the nod onto the scene"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            scene.getStylesheets().add(\"/view/mainStyle.css\"); // one stylesheet to rule them all"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            stage.setTitle(\"Duke: get a hold of yourself\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            stage.setScene(scene); // set the scene on the stage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(this.duke); // point the controller to Duke"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            stage.show(); // show the stage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 32
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.CommandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Parses the user input to determine what command the user intends to make"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DEADLINE_DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String EVENT_DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TIME_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the correct command after parsing the user\u0027s input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return a Command that represents user\u0027s intended action"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If User\u0027s input can\u0027t be understood or doesn\u0027t follow the correct format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Command parseCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String keyword \u003d words[0].toLowerCase().trim(); // keyword tells us what command to create"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (keyword.equals(CommandWord.EXIT_CMD.getCmd())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (keyword.equals(CommandWord.LIST_CMD.getCmd())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ListCommand(new String[]{input});"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (keyword.equals(CommandWord.DONE_CMD.getCmd())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                || keyword.equals(CommandWord.DELETE_CMD.getCmd())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return parseDoneDelete(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (keyword.equals(CommandWord.FIND_CMD.getCmd())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else { // parse the command based on the identified keyword:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            switch (keyword) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return new AddCommand(parseToDo(input));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return new AddCommand(parseDeadline(input));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return new AddCommand(parseEvent(input));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                throw new DukeException(Message.ERROR_UNKNOWN_CMD.getMsg());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the done and delete commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to Done and Delete commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Either Done or Delete Command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the format is wrong or if a non-integer is passed in as argument or  multiple arguments"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *                       are passed in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Command parseDoneDelete(String input) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // if there are more than 2 tokens, then it\u0027s wrong format:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (st.countTokens() !\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DONEDELETE_ARGS.getMsg());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d st.nextToken();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert command.equals(CommandWord.DONE_CMD.getCmd())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                || command.equals(CommandWord.DELETE_CMD.getCmd()) : \"parseDoneDelete(): neither done nor delete cmd\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String taskID \u003d st.nextToken();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!isInteger(taskID)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DONEDELETE_NOTINT.getMsg());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput \u003d new String[]{command, taskID};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return command.equals(CommandWord.DELETE_CMD.getCmd())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "               ? new DeleteCommand(parsedInput)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "               : new DoneCommand(parsedInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the todo"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to todo command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String[] array of format: description of todo"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If no description is passed in"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseToDo(String input) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d st.nextToken();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert command.equals(CommandWord.TODO_CMD.getCmd()) : \"parseToDo(): incorrect cmd\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_TODO_DESC.getMsg());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder description \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            description.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"T\", description.toString().stripTrailing()};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the Deadline command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to Deadline command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String array of format: description of Deadline String representation for the date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the format is wrong or if it lacks proper description"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedInput \u003d input.split(DEADLINE_DELIMITER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DEADLINE_FORMAT.getMsg());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d separatedInput[1];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(separatedInput[0]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d st.nextToken();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert command.equals(CommandWord.DEADLINE_CMD.getCmd()) : \"parseToDo(): incorrect cmd\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder descriptionBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            descriptionBuilder.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d descriptionBuilder.toString().stripTrailing();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DEADLINE_DESC.getMsg());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"D\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            description,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            dateString};"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the Event command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to Event command"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String array of format: \"E\" description of Event String representation for the date start time end"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *         time\u003e}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the format is wrong or if it lacks proper description"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // todo: refactor this if possible. so long :("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedInput \u003d input.split(EVENT_DELIMITER); //  \u003cwords\u003e /at \u003ctimeInfo\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // not enough info in user input:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_FORMAT.getMsg());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // parse description field for the event:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String words \u003d separatedInput[0];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer wordsTokenizer \u003d new StringTokenizer(words);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d wordsTokenizer.nextToken();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert command.equals(CommandWord.EVENT_CMD.getCmd()) : \"[parseEvent()]: incorrect command\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder descriptionBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (wordsTokenizer.hasMoreTokens()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            descriptionBuilder.append(wordsTokenizer.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d descriptionBuilder.toString().stripTrailing();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // parse start and end timing for the event:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] timeInfo \u003d separatedInput[1].split(\" \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startAndEndTiming \u003d timeInfo[timeInfo.length - 1];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedStartAndEndTiming \u003d startAndEndTiming.split(TIME_DELIMITER);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedStartAndEndTiming.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_TIME.getMsg());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startTime \u003d separatedStartAndEndTiming[0];"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String endTime \u003d separatedStartAndEndTiming[1];"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // parse string representation for the date:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder dateStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d timeInfo.length - 2; i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateStringBuilder.append(timeInfo[i]).append(\" \");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d dateStringBuilder.toString().stripTrailing();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (dateString.isEmpty()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_DATE.getMsg());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"E\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            description,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            dateString,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            startTime,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            endTime};"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Checks if input is a string representation of an integer"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param s input string"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if input is representing an Integer"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean isInteger(String s) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return s.matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 200
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Handles the loading and saving of data onto the local storage by serialising the TaskList object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // hardcoded for now:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final Path ROOT_PATH \u003d Paths.get(\"\").toAbsolutePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final Path DATA_DIR_PATH \u003d Paths.get(ROOT_PATH.toAbsolutePath().toString(), \"data\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static final Path SAVE_FILE_PATH \u003d Paths.get(DATA_DIR_PATH.toAbsolutePath().toString(), \"savedData\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Saves the current TaskList object by serialising it and writing onto the default file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param allTasks Current TaskList that represents all the tasks that have been created by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors writing onto the intended file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void save(TaskList allTasks) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        initStorage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(SAVE_FILE_PATH.toFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            oos.writeObject(allTasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fos.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Reads saved data from the default save location and returns TaskList, if it exists, or constructs a new TaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * for Duke to use"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return TaskList for Duke to use"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors reading from existing file or file doesn\u0027t exist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static TaskList load() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskList savedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(SAVE_FILE_PATH.toFile());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            savedTasks \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fis.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return savedTasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ClassNotFoundException | IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            initStorage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return savedTasks;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialises the Storage location by creating the Data dir and SaveFile, if required"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors in file creation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void initStorage() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        createDataDir();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert Files.exists(DATA_DIR_PATH) \u0026\u0026 Files.exists(SAVE_FILE_PATH) : \"Storage directory/path doesn\u0027t exist\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates the data directory if that path doesn\u0027t exist"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors in directory creation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void createDataDir() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!Files.exists(DATA_DIR_PATH)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Files.createDirectory(DATA_DIR_PATH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates the save file if the directory exists but file doesn\u0027t"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors in file creation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void createSaveFile() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert (Files.exists(DATA_DIR_PATH)) : \"data dir doesn\u0027t exist\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!Files.exists(SAVE_FILE_PATH)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Files.createFile(SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 93
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Holds a Collection of Tasks and has methods to manipulate these Tasks, is serializable as well"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private int currentTaskCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Constructs a TaskList of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.currentTaskCount \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates a task and adds it as an entry to the tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput The parsed output of the Parser object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param commandTag  A string tag to conveniently identify the type of Task entry it should be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Description of the added Task entry"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the Task can\u0027t be created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // side effect: create \u0026 add task + return response"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String addEntry(String[] parsedInput, String commandTag) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        int newTaskID \u003d ++currentTaskCount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        switch (commandTag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ToDo newToDo \u003d new ToDo(parsedInput[1], newTaskID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newToDo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newToDo.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Deadline newDeadline \u003d Deadline.createDeadline(parsedInput, newTaskID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newDeadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newDeadline.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Event newEvent \u003d Event.createEvent(parsedInput, newTaskID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newEvent.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            assert false : \"default statement is supposed to be a fallthrough\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return \"ugh how did we get here\"; // this is a FALLTHROUGH, never reached"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Marks a Task as complete and modifies the TaskList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID Selected Task to mark as complete"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Description of the completed task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If it\u0027s an invalid task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String completeTask(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        verifyTaskValidity(taskID);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taskList.set(taskID - 1, taskList.get(taskID - 1).complete());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return taskList.get(taskID - 1).toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Deletes the specified Task and modifies the TaskList by decrementing the IDs of the remaining tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID Selected Task to delete"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Description of the deleted task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If it\u0027s an invalid task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String deleteTask(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        currentTaskCount--;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        verifyTaskValidity(taskID);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert currentTaskCount !\u003d 0 : \"nothing to delete\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Task toDelete \u003d taskList.get(taskID - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d taskID - 1; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            taskList.set(i, taskList.get(i).decrementID());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Task.decrementTaskCount();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return toDelete.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Verifies the validity of the task to be handled, whether it exists in the TaskList or not; is used only when"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * tasks are being deleted or marked as done"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID TaskID to be checked"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException Invalid task if it\u0027s more than the current list size or fewer than 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private void verifyTaskValidity(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (taskID \u003e taskList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(\"invalid task: task id \u003e list size\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (taskID \u003c 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(\"invalid task: task id \u003c 1\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the String description of the remaining undone tasks in the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String description"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        int incompleteTasks \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (!t.isComplete()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                incompleteTasks++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"Now you have \" + incompleteTasks + ((incompleteTasks \u003d\u003d 1)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                                    ? \" undone task\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                                    : \" undone tasks\") + \" in the list.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task getTask(int taskID) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.taskList.get(taskID);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public int getCurrentTaskCount() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.currentTaskCount;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 131
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Adds Tasks to the TaskList and invokes appropriate UI messages about it"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String[] parsedInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String commandTag; // indicates what kind of Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Constructs an AddCommand Object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput Parser\u0027s output for the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public AddCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.commandTag \u003d parsedInput[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out a confirmation message of the command, adds the entry to TaskList and displays the current status of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * the TaskList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If we can\u0027t write onto the file after adding a task to TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String execute(TaskList tasks, Ui ui) throws DukeException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.CONFIRMATION_MSG.getMsg());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String reply \u003d tasks.addEntry(this.parsedInput, this.commandTag);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert !reply.isEmpty() : \"AddCommand.execute(): reply is somehow empty\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(reply);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.getCurrentStatus());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Storage.save(tasks); // save upon addition because we want to do a write on every change"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Command.listLinesToString(lines);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 53
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * A command can be executed on and can be an Exit Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    String execute(TaskList tasks, Ui ui) throws DukeException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Converts an ArrayList of response lines into a single String response; default"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * utility function used by implementors of the Command Interface"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param lines ArrayList of lines that represent a response"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Combined String response"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static String listLinesToString(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String line:lines) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            builder.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Deletes Tasks from the TaskList and invokes appropriate UI messages about it"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String[] parsedInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DeleteCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out a deletion message of the command, removes the entry from TaskList and displays the current status of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * the TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If we can\u0027t write onto the file after deleting a task to TaskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String execute(TaskList tasks, Ui ui) throws DukeException, IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        int taskID \u003d Integer.parseInt(this.parsedInput[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.DELETE_MSG.getMsg());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.deleteTask(taskID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.getCurrentStatus());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Command.listLinesToString(lines);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Marks a specific task from the TaskList as completed and invokes appropriate UI messages about it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String[] parsedInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DoneCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out a done message and displays the newly done task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If we can\u0027t write onto the file after marking a task as done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String execute(TaskList tasks, Ui ui) throws DukeException, IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.DONE_MSG.getMsg());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.completeTask(Integer.parseInt(this.parsedInput[1])));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Command.listLinesToString(lines);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Exits the Duke program"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ExitCommand() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initiates the System shutdown for the VM"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert false : \"System should have exited, we shouldn\u0027t be reaching this line\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"Stub for ExitCommand.execute()\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String searchTerm;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Finds tasks related to User\u0027s input query"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param userInput User\u0027s Search query"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        st.nextToken();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder searchTermBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            searchTermBuilder.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.searchTerm \u003d searchTermBuilder.toString().trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns an appropriate matcher for that exact search term"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param searchTerm User input search term"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Matcher based on the regex with boundaries"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Matcher getMatcher(String searchTerm) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Pattern p \u003d Pattern.compile(\"\\\\b\" + searchTerm.trim() + \"\\\\b\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return p.matcher(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Displays the tasks that match a specific word/phrase passed in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Matcher matcher \u003d getMatcher(this.searchTerm);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.FOUND_MSG.getMsg());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AtomicInteger counter \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // filters from the stream, only exact word matches for every task in stream"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        allTasks.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .filter(task -\u003e this.containsExactWord(task.getDescription(), searchTerm))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .forEach(foundTask -\u003e lines.add(counter.incrementAndGet() + \". \" + foundTask.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (lines.size() \u003d\u003d 1) { //if no found lines"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            lines.add(Message.ERROR_NO_FIND.getMsg());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ui.displayError(Message.ERROR_NO_FIND.getMsg());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Command.listLinesToString(lines);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Tests if a word/phrases is exactly present in a text"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param text Text to search within"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param word The search term (word/phrase) to search for"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if exact word is within the text"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean containsExactWord(String text, String word) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String regex \u003d \"\\\\b\" + word + \"\\\\b\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Matcher myMatcher \u003d pattern.matcher(text);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return myMatcher.find();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 83
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Lists all the tasks that are in the TaskList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ListCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out all the tasks in the TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // involves making the ui print everything."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.FETCHING_MSG.getMsg());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            lines.add((i + 1) + \".\" + tasks.getTask(i).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Command.listLinesToString(lines);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 39
    }
  },
  {
    "path": "src/main/java/duke/enums/CommandWord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An Enumeration of the various command words that shall be use on Duke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum CommandWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ECHO_MODE(\"echo\"), TODO_CMD(\"todo\"), DEADLINE_CMD(\"deadline\"), EVENT_CMD(\"event\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EXIT_CMD(\"bye\"), LIST_CMD(\"list\"), DONE_CMD(\"done\"), DELETE_CMD(\"delete\"), FIND_CMD(\"find\"), INVALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static Map\u003cString, CommandWord\u003e keyableMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CommandWord() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } // constructor for INVALID"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CommandWord(String cmd) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * An Initialisation for the Hashmap that allows us to access keys from their values (command-string pairs)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Map\u003cString, CommandWord\u003e commandLabelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (CommandWord c : CommandWord.values()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            commandLabelMap.put(c.getCmd(), c);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        CommandWord.keyableMap \u003d commandLabelMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /* Returns the string representation for that command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *  @return Command\u0027s String form"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getCmd() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.cmd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 35
    }
  },
  {
    "path": "src/main/java/duke/enums/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An Enumeration of the various DateTime formatters that Duke shall use to parse the Date and Time from user commands"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum DateTimeFormat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // Add Formats for date and time here as needed..."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DATE_OUTPUT_FORMATTER1(\"MMM dd yyy\"), DATE_INPUT_FORMATTER1(\"d/M/yyyy\"), DATE_INPUT_FORMATTER2(\"yyyy/M/d\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    TIME_FORMATTER(\"HHmm\"), INVALID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DateTimeFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DateTimeFormat(String format) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.formatter \u003d DateTimeFormatter.ofPattern(format).withResolverStyle(ResolverStyle.SMART);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DateTimeFormatter getFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.formatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns a stream of all the Formatters, that can be filtered through to select the correct formatter for the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * user\u0027s input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Stream of DateTimeFormatter objects"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Stream\u003cDateTimeFormatter\u003e getFormatterStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Arrays.stream(DateTimeFormat.values()).map(DateTimeFormat::getFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 33
    }
  },
  {
    "path": "src/main/java/duke/enums/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An Enumeration of the various Messages words that shall be used by Duke\u0027s UI"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum Message {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    GREETING(\"Hello I\u0027m Duke\\nWhat can I do for you?\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EXIT_GREETING(\"Bye. Hope to see you again soon!\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DONE_MSG(\"Nice! I\u0027ve marked this task as done\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DELETE_MSG(\"Noted. I\u0027ve removed this task:\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CONFIRMATION_MSG(\"Got it. I\u0027ve added this task:\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    FETCHING_MSG(\"Here are the tasks in your list:\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    FOUND_MSG(\"Here are the matching tasks in your list:\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_NO_DATE_FORMATTER(\"Can\u0027t find Date Formatter\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_NO_TIME_FORMATTER(\"Can\u0027t find Time Formatter\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_BAD_TIME_INPUT(\"what kinda date/time is that\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_NO_FIND(\"Couldn\u0027t find anything related to the search term\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_UNKNOWN_CMD(\"upset parser: unknown command\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DONEDELETE_ARGS(\"invalid done/delete command: do things one at a time pls!\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DONEDELETE_NOTINT(\"invalid done/delete command: you gotta pass an integer\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_TODO_DESC(\"invalid todo command: do what?\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DEADLINE_FORMAT(\"invalid deadline command: bad format, try deadline \u003cdesc\u003e /by \u003cdateString\u003e\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DEADLINE_DESC(\"invalid deadline command: bro, where\u0027s the deadline description at?\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_FORMAT(\"invalid event command: bad format, try event \u003cdesc\u003e /at \u003cdateString\u003e \u003cstartTime\u003e-\u003cendTime\u003e\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_TIME(\"invalid event command: you need to pass in a start and end time for your event\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_DATE(\"invalid event command: you didn\u0027t pass in the date!\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static Map\u003cString, Message\u003e keyableMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Message() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } // constructor for INVALID"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Message(String msg) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * An Initialisation for the Hashmap that allows us to access keys from their values (message-label pairs)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Map\u003cString, Message\u003e messageLabelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Message m : Message.values()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            messageLabelMap.put(m.getMsg(), m);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Message.keyableMap \u003d messageLabelMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the string representation for that Message"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Message\u0027s String form"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getMsg() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 56
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Customised Exception thrown, specific to the UI and logic errors relating to Duke\u0027s workings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.DateTimeFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Contains information about a Task to be done by a particular date and time along with its description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DELIMITER \u003d \"by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Constructs the Deadline object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param description String description attribute for Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param dateString  String representation for the date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newTaskID   Task number to assign to the new deadline task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If there are issues writing onto the savedData upon adding"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Deadline(String description, String dateString, int newTaskID) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description, newTaskID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        setDateTime(dateString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates a Deadline by extracting out relevant information from the parsed user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput Parser\u0027s output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Deadline createDeadline(String[] parsedInput, int newTaskID) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d parsedInput[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d parsedInput[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new Deadline(description, dateString, newTaskID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String date \u003d this.date.format(DateTimeFormat.DATE_OUTPUT_FORMATTER1.getFormat());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String time \u003d this.time.format(DateTimeFormat.TIME_FORMATTER.getFormat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[D]\" + super.toString() + \" (\" + DELIMITER + \":\" + date + \", time:\" + time + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Sets the Date and Time attributes of a Deadline by choosing the correct formatter and formatting the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * information for these fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param dateTimeString Unformatted date and time fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the Date and Time user input is not understandable"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void setDateTime(String dateTimeString) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateTimeString \u003d dateTimeString.strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String[] dateTimeSeparated \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String dateString \u003d dateTimeSeparated[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String timeString \u003d dateTimeSeparated[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            DateTimeFormatter chosenDateFormatter \u003d chooseDateFormatter(dateString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            DateTimeFormatter chosenTimeFormatter \u003d chooseTimeFormatter(timeString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(dateString, chosenDateFormatter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            LocalTime localTime \u003d LocalTime.parse(timeString, chosenTimeFormatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.date \u003d localDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.time \u003d localTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_BAD_TIME_INPUT.getMsg());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Filters through the Enumeration for DateTime formatters and selects the correct Formatter based on the format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * that the user inputs the Date information in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param dateString String representation for a date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return DateTimeFormatter that can be used to format this user input for Date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the User\u0027s date format isn\u0027t supported by the existing Formatters in the Enumeration"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DateTimeFormatter chooseDateFormatter(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return DateTimeFormat.getFormatterStream().filter(formatter -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            // filters through stream of formatters to find one that works:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                LocalDate.parse(dateString, formatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                // ON PURPOSE: ignored because we only want the formatter that handles things properly"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }).findAny().orElseThrow(() -\u003e new DukeException(Message.ERROR_NO_DATE_FORMATTER.getMsg()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Filters through the Enumeration for DateTime formatters and selects the correct Formatter based on the format"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * that the user inputs the Date information in"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param timeString String representation for a time"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return DateTimeFormatter that can be used to format this user input for Time"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the User\u0027s time format isn\u0027t supported by the existing Formatters in the Enumeration"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DateTimeFormatter chooseTimeFormatter(String timeString) throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return DateTimeFormat.getFormatterStream().filter(formatter -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            // filters through stream of formatters to find one that works:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                LocalTime.parse(timeString, formatter);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } catch (Exception ignored) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                // ignored because we only want the formatter that handles things properly"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }).findAny().orElseThrow(() -\u003e new DukeException(Message.ERROR_NO_TIME_FORMATTER.getMsg()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 122
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Contains information about an Event, with when it starts and ends and on what date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DELIMITER \u003d \"at\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TIME_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String dateString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Constructs an Event object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param description String description for the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param dateString  String description for the Event\u0027s date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param startTime   String description for when the event starts"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param endTime     String description for when the event ends"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param newTaskID   ID to be assigned to the new task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Event(String description, String dateString, String startTime, String endTime, int newTaskID) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description, newTaskID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates an Event by extracting out relevant information from the parsed user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput Parser\u0027s output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Event createEvent(String[] parsedInput, int newTaskID) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d parsedInput[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d parsedInput[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startTime \u003d parsedInput[3];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String endTime \u003d parsedInput[4];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new Event(description, dateString, startTime, endTime, newTaskID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" (\" + DELIMITER + \":\" + this.dateString + \" \" + this.startTime + TIME_DELIMITER + this.endTime + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Describes the Task stored by Duke; is serializable"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static int taskCount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Assigns an ID based on the count of active tasks there currently"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param description A string description for that Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID TaskID of the newly created Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task(String description, int taskID) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskID \u003d ++taskCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Marks a task as completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return the completed version of that task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Marks task as complete"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Completed Task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task complete() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Decreases the taskID by 1 when a Task is deleted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Task with a lower ID"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task decrementID() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        --this.taskID;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Decreases the taskCount by 1 when a Task is deleted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void decrementTaskCount() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        --Task.taskCount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Checks if Task is completed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if task is completed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.taskID;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[\" + (this.completed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                      ? TICK"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                      : CROSS) + \"] \" + this.description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 74
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Contains a description of a future task to do"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ToDo(String description, int newTaskID) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description, newTaskID);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 18
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.controller.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog box consisting of an ImageView to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        setMargin(tmp.get(0), new Insets(5, 0, 5, 15)); // #pimp inset val for margin"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 60
    }
  },
  {
    "path": "src/main/java/duke/ui/GraphicalUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class GraphicalUi extends javafx.application.Application implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  step1: set up required components \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // container for the content for the chat to scroll:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.userInput \u003d new TextField();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // add these as children nodes:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Step 2. Formatting the window to look as expected \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER); // no scroll for horizontal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS); // scroll for vertical only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Step3: Add functionality to handle User Input \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // Scroll down to the end every time dialogContainer\u0027s height changes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable -\u003e scrollPane.setVvalue(1.0)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Iteration 1: Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Iteration 2: Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dukeText \u003d getResponse(userText);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(userText, this.user),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                             DialogBox.getDukeDialog(dukeText, this.duke));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String getResponse(String text) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"Duke heard: \" + text;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String readCommand(Scanner sc) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void bidFarewell() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void display(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void displayError(String message) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 111
    }
  },
  {
    "path": "src/main/java/duke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TextUi implements Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // constant strings:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String LINE_BREAK \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String readCommand(Scanner sc) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e greeting \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greeting.add(\"Hello I\u0027m Duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greeting.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        display(greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void bidFarewell() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.EXIT_GREETING.getMsg());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.display(lines);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void display(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        printResponse(prettify(lines));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void displayError(String message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.display(lines);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out collection of lines to the Command Line"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param response Collection of confirmed lines"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void printResponse(ArrayList\u003cString\u003e response) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String s : response) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Makes UI message lines pretty by encapsulating in line breaks and indenting them"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param rawResponse Ugly response"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Pretty lines"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e prettify(ArrayList\u003cString\u003e rawResponse) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // rawResponse.add(0, LINE_BREAK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // rawResponse.add(rawResponse.size(), LINE_BREAK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return indentLines(rawResponse);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Indents a collection of lines"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param responseLines Collection of the lines to indent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Collection of the indented lines"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e indentLines(ArrayList\u003cString\u003e responseLines) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String current : responseLines) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            current \u003d TextUi.INDENT + current;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            result.add(current);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 76
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Duke can have UI that can greet users, read commands that they give, display lines and errors and bid the users"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * farewell upon exiting the program"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void greet();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    String readCommand(Scanner sc);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void bidFarewell();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void display(ArrayList\u003cString\u003e lines);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void displayError(String message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 16
    }
  },
  {
    "path": "src/main/java/duke/ui/controller/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML // allows FXML to access these private attributes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/visualise.gif\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialize Duke by printing welcome greeting"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Message.GREETING.getMsg(), dukeImage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String input \u003d this.userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String response \u003d this.duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                             DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // todo: 2) dynamic resizing of DialogBox for vertical height to display long list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Gif cropped from: http://gifgifs.com/crop/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    gif taken from: https://www.reddit.com/r/Cinemagraphs/comments/8ceghg/reflections/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 57
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.paint.LinearGradient?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.paint.Stop?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "         stylesheets\u003d\"@mainStyle.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003cVBox fx:id\u003d\"chatBubble\" alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" spacing\u003d\"5.0\" styleClass\u003d\"chatBubble\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cInsets left\u003d\"15.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cDropShadow blurType\u003d\"GAUSSIAN\" color\u003d\"#9c9a9a\" height\u003d\"16.23\" radius\u003d\"9.9625\" width\u003d\"25.62\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" lineSpacing\u003d\"5.0\" styleClass\u003d\"chat-label\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cFont size\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003ctextFill\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cLinearGradient endX\u003d\"1.0\" endY\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            \u003cstops\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                \u003cStop color\u003d\"#171215\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                \u003cStop color\u003d\"#171217\" offset\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            \u003c/stops\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003c/LinearGradient\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/textFill\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003ceffect\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cDropShadow blurType\u003d\"GAUSSIAN\" color\u003d\"#ee0e0e\" spread\u003d\"0.44\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/effect\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c!--          \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                          \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"125.0\" prefWidth\u003d\"291.0\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                     \u003c/children\u003e--\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" cache\u003d\"true\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cDropShadow blurType\u003d\"GAUSSIAN\" color\u003d\"#c90c9a\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 61
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.effect.Blend?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.effect.BoxBlur?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"root\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"anchorPane\" stylesheets\u003d\"@mainStyle.css\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.controller.MainWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"secondContainer\" prefHeight\u003d\"806.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"secondContainer\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"744.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"scrollPane\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"0.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"dialogContainer\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            \u003ceffect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                                \u003cDropShadow blurType\u003d\"GAUSSIAN\" color\u003d\"#ee1111\" height\u003d\"105.63\" radius\u003d\"53.165\" spread\u003d\"0.26\" width\u003d\"109.03\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            \u003c/effect\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"747.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"56.0\" prefWidth\u003d\"548.0\" promptText\u003d\"Command me...\" styleClass\u003d\"userInput\" AnchorPane.bottomAnchor\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003ceffect\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cBlend mode\u003d\"RED\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/effect\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003c/TextField\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"548.0\" layoutY\u003d\"750.0\" minWidth\u003d\"50.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"sendButton\" text\u003d\"\u0026gt;\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003ceffect\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cBoxBlur height\u003d\"0.0\" width\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/effect\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        \u003cFont size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 46
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    //    public void dukeRun() throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    //        new Duke().run();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 17
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"deadline return book /by 19/02/2020 0900\", \"event project meeting /at Mon 2-4pm\", \"todo \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            + \"join sports club\"})"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parsingCommand_parameterizedTest_validCommandsCreated(String input) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert (p.parseCommand(input) !\u003d null); // successful creation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_insufficientTodoDescription_dukeExceptionReturned() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String input \u003d \"todo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d \"invalid todo command: do what?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            p.parseCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(expectedMsg, de.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"tod\", \"blah\"})"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHanlding_unknownCommand_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_UNKNOWN_CMD.getMsg();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"done 4 5 6\", \"delete 4 5 6\"})"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_multipleDoneDeleteArguments_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_DONEDELETE_ARGS.getMsg();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"deadline\", \"deadline a\"})"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_badDeadlineFormat_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_DEADLINE_FORMAT.getMsg();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"deadline /by xxx\", \"deadline /by Sunday\"})"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_deadlineNoDateDescription_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_DEADLINE_DESC.getMsg();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"event /by Sunday\"})"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_badEventFormat_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_EVENT_FORMAT.getMsg();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 72
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 5
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void initTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput1 \u003d {\"T\", \"kill me now\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput2 \u003d {\"T\", \"i want ice cream\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String commandTag \u003d \"T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput1, commandTag);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput2, commandTag);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void modifyTaskList_addEntryTodo_increaseTaskCount() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskListTest.initTest();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput1 \u003d {\"T\", \"happy thoughts\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(testTaskList.addEntry(parsedInput1, \"T\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                     \"[T][✘] happy thoughts\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void queryTaskList_getCurrentStatus_returnsString() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskListTest.initTest();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expected \u003d \"Now you have 2 undone tasks in the list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(testTaskList.getCurrentStatus(), expected);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void modifyTaskList_completeTask_returnsString() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskListTest.initTest();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expected \u003d \"[T][✓] i want ice cream\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(testTaskList.completeTask(2), expected);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 39
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final Ui ui \u003d new TextUi();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void initTest() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput1 \u003d {\"T\", \"kill me now\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput2 \u003d {\"T\", \"i want me ice cream\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedIntput3 \u003d {\"T\", \"i want more\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput4 \u003d {\"D\", \"i want\", \"19/02/2020 1400\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String commandTag \u003d \"T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput1, commandTag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput2, commandTag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedIntput3, commandTag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput4, \"D\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.completeTask(2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"find want\", \"find i\", \"find me\", \"find xxx\"})"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void findSuccessfully_queryTaskList_returnsTrue(String s) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        initTest();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        FindCommand cmd \u003d new FindCommand(s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        cmd.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"i\", \"world i\", \"world \", \"hi\"})"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void testHelperContains_matchExactSearchTerm_returnsTrue(String query) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String text \u003d \"hello world i am ritesh hohohehe hi\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        FindCommand command \u003d new FindCommand(\"hello\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertTrue((command.containsExactWord(text, query)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 45
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline return book /by 20/01/1998 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline return book /by 19/02/2020 0900"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 4 5 6"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event /at Mon"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event /at 2-4pm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline burn book /by 2/12/2019 1800"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline shred book /by 2020/12/2 2359"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline burn house /by 235262346"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "# shellcheck disable\u003dSC2046"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin $(find ../ *.java)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "# todo create proper testscript"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "#../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 4,
      "-": 37
    }
  }
]
